// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: cosmos/vesting/v1beta1/vesting.proto
// Protobuf C++ Version: 5.29.4

#include "cosmos/vesting/v1beta1/vesting.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace cosmos {
namespace vesting {
namespace v1beta1 {

inline constexpr Period::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : amount_{},
        length_{::int64_t{0}},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Period::Period(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct PeriodDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PeriodDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PeriodDefaultTypeInternal() {}
  union {
    Period _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PeriodDefaultTypeInternal _Period_default_instance_;

inline constexpr BaseVestingAccount::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        original_vesting_{},
        delegated_free_{},
        delegated_vesting_{},
        base_account_{nullptr},
        end_time_{::int64_t{0}} {}

template <typename>
PROTOBUF_CONSTEXPR BaseVestingAccount::BaseVestingAccount(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct BaseVestingAccountDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BaseVestingAccountDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BaseVestingAccountDefaultTypeInternal() {}
  union {
    BaseVestingAccount _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BaseVestingAccountDefaultTypeInternal _BaseVestingAccount_default_instance_;

inline constexpr PermanentLockedAccount::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        base_vesting_account_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR PermanentLockedAccount::PermanentLockedAccount(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct PermanentLockedAccountDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PermanentLockedAccountDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PermanentLockedAccountDefaultTypeInternal() {}
  union {
    PermanentLockedAccount _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PermanentLockedAccountDefaultTypeInternal _PermanentLockedAccount_default_instance_;

inline constexpr PeriodicVestingAccount::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        vesting_periods_{},
        base_vesting_account_{nullptr},
        start_time_{::int64_t{0}} {}

template <typename>
PROTOBUF_CONSTEXPR PeriodicVestingAccount::PeriodicVestingAccount(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct PeriodicVestingAccountDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PeriodicVestingAccountDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PeriodicVestingAccountDefaultTypeInternal() {}
  union {
    PeriodicVestingAccount _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PeriodicVestingAccountDefaultTypeInternal _PeriodicVestingAccount_default_instance_;

inline constexpr DelayedVestingAccount::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        base_vesting_account_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR DelayedVestingAccount::DelayedVestingAccount(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct DelayedVestingAccountDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DelayedVestingAccountDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DelayedVestingAccountDefaultTypeInternal() {}
  union {
    DelayedVestingAccount _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DelayedVestingAccountDefaultTypeInternal _DelayedVestingAccount_default_instance_;

inline constexpr ContinuousVestingAccount::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        base_vesting_account_{nullptr},
        start_time_{::int64_t{0}} {}

template <typename>
PROTOBUF_CONSTEXPR ContinuousVestingAccount::ContinuousVestingAccount(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ContinuousVestingAccountDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ContinuousVestingAccountDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ContinuousVestingAccountDefaultTypeInternal() {}
  union {
    ContinuousVestingAccount _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ContinuousVestingAccountDefaultTypeInternal _ContinuousVestingAccount_default_instance_;
}  // namespace v1beta1
}  // namespace vesting
}  // namespace cosmos
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_cosmos_2fvesting_2fv1beta1_2fvesting_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_cosmos_2fvesting_2fv1beta1_2fvesting_2eproto = nullptr;
const ::uint32_t
    TableStruct_cosmos_2fvesting_2fv1beta1_2fvesting_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        PROTOBUF_FIELD_OFFSET(::cosmos::vesting::v1beta1::BaseVestingAccount, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::cosmos::vesting::v1beta1::BaseVestingAccount, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::cosmos::vesting::v1beta1::BaseVestingAccount, _impl_.base_account_),
        PROTOBUF_FIELD_OFFSET(::cosmos::vesting::v1beta1::BaseVestingAccount, _impl_.original_vesting_),
        PROTOBUF_FIELD_OFFSET(::cosmos::vesting::v1beta1::BaseVestingAccount, _impl_.delegated_free_),
        PROTOBUF_FIELD_OFFSET(::cosmos::vesting::v1beta1::BaseVestingAccount, _impl_.delegated_vesting_),
        PROTOBUF_FIELD_OFFSET(::cosmos::vesting::v1beta1::BaseVestingAccount, _impl_.end_time_),
        0,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::cosmos::vesting::v1beta1::ContinuousVestingAccount, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::cosmos::vesting::v1beta1::ContinuousVestingAccount, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::cosmos::vesting::v1beta1::ContinuousVestingAccount, _impl_.base_vesting_account_),
        PROTOBUF_FIELD_OFFSET(::cosmos::vesting::v1beta1::ContinuousVestingAccount, _impl_.start_time_),
        0,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::cosmos::vesting::v1beta1::DelayedVestingAccount, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::cosmos::vesting::v1beta1::DelayedVestingAccount, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::cosmos::vesting::v1beta1::DelayedVestingAccount, _impl_.base_vesting_account_),
        0,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::cosmos::vesting::v1beta1::Period, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::cosmos::vesting::v1beta1::Period, _impl_.length_),
        PROTOBUF_FIELD_OFFSET(::cosmos::vesting::v1beta1::Period, _impl_.amount_),
        PROTOBUF_FIELD_OFFSET(::cosmos::vesting::v1beta1::PeriodicVestingAccount, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::cosmos::vesting::v1beta1::PeriodicVestingAccount, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::cosmos::vesting::v1beta1::PeriodicVestingAccount, _impl_.base_vesting_account_),
        PROTOBUF_FIELD_OFFSET(::cosmos::vesting::v1beta1::PeriodicVestingAccount, _impl_.start_time_),
        PROTOBUF_FIELD_OFFSET(::cosmos::vesting::v1beta1::PeriodicVestingAccount, _impl_.vesting_periods_),
        0,
        ~0u,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::cosmos::vesting::v1beta1::PermanentLockedAccount, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::cosmos::vesting::v1beta1::PermanentLockedAccount, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::cosmos::vesting::v1beta1::PermanentLockedAccount, _impl_.base_vesting_account_),
        0,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, 13, -1, sizeof(::cosmos::vesting::v1beta1::BaseVestingAccount)},
        {18, 28, -1, sizeof(::cosmos::vesting::v1beta1::ContinuousVestingAccount)},
        {30, 39, -1, sizeof(::cosmos::vesting::v1beta1::DelayedVestingAccount)},
        {40, -1, -1, sizeof(::cosmos::vesting::v1beta1::Period)},
        {50, 61, -1, sizeof(::cosmos::vesting::v1beta1::PeriodicVestingAccount)},
        {64, 73, -1, sizeof(::cosmos::vesting::v1beta1::PermanentLockedAccount)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::cosmos::vesting::v1beta1::_BaseVestingAccount_default_instance_._instance,
    &::cosmos::vesting::v1beta1::_ContinuousVestingAccount_default_instance_._instance,
    &::cosmos::vesting::v1beta1::_DelayedVestingAccount_default_instance_._instance,
    &::cosmos::vesting::v1beta1::_Period_default_instance_._instance,
    &::cosmos::vesting::v1beta1::_PeriodicVestingAccount_default_instance_._instance,
    &::cosmos::vesting::v1beta1::_PermanentLockedAccount_default_instance_._instance,
};
const char descriptor_table_protodef_cosmos_2fvesting_2fv1beta1_2fvesting_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n$cosmos/vesting/v1beta1/vesting.proto\022\026"
    "cosmos.vesting.v1beta1\032\021amino/amino.prot"
    "o\032\024gogoproto/gogo.proto\032\036cosmos/base/v1b"
    "eta1/coin.proto\032\031cosmos_proto/cosmos.pro"
    "to\032\036cosmos/auth/v1beta1/auth.proto\"\315\004\n\022B"
    "aseVestingAccount\022I\n\014base_account\030\001 \001(\0132"
    " .cosmos.auth.v1beta1.BaseAccountB\004\320\336\037\001R"
    "\013baseAccount\022\214\001\n\020original_vesting\030\002 \003(\0132"
    "\031.cosmos.base.v1beta1.CoinBF\310\336\037\000\252\337\037(gith"
    "ub.com/cosmos/cosmos-sdk/types.Coins\232\347\260*"
    "\014legacy_coins\250\347\260*\001R\017originalVesting\022\210\001\n\016"
    "delegated_free\030\003 \003(\0132\031.cosmos.base.v1bet"
    "a1.CoinBF\310\336\037\000\252\337\037(github.com/cosmos/cosmo"
    "s-sdk/types.Coins\232\347\260*\014legacy_coins\250\347\260*\001R"
    "\rdelegatedFree\022\216\001\n\021delegated_vesting\030\004 \003"
    "(\0132\031.cosmos.base.v1beta1.CoinBF\310\336\037\000\252\337\037(g"
    "ithub.com/cosmos/cosmos-sdk/types.Coins\232"
    "\347\260*\014legacy_coins\250\347\260*\001R\020delegatedVesting\022"
    "\031\n\010end_time\030\005 \001(\003R\007endTime:&\210\240\037\000\212\347\260*\035cos"
    "mos-sdk/BaseVestingAccount\"\313\001\n\030Continuou"
    "sVestingAccount\022b\n\024base_vesting_account\030"
    "\001 \001(\0132*.cosmos.vesting.v1beta1.BaseVesti"
    "ngAccountB\004\320\336\037\001R\022baseVestingAccount\022\035\n\ns"
    "tart_time\030\002 \001(\003R\tstartTime:,\210\240\037\000\212\347\260*#cos"
    "mos-sdk/ContinuousVestingAccount\"\246\001\n\025Del"
    "ayedVestingAccount\022b\n\024base_vesting_accou"
    "nt\030\001 \001(\0132*.cosmos.vesting.v1beta1.BaseVe"
    "stingAccountB\004\320\336\037\001R\022baseVestingAccount:)"
    "\210\240\037\000\212\347\260* cosmos-sdk/DelayedVestingAccoun"
    "t\"\233\001\n\006Period\022\026\n\006length\030\001 \001(\003R\006length\022y\n\006"
    "amount\030\002 \003(\0132\031.cosmos.base.v1beta1.CoinB"
    "F\310\336\037\000\252\337\037(github.com/cosmos/cosmos-sdk/ty"
    "pes.Coins\232\347\260*\014legacy_coins\250\347\260*\001R\006amount\""
    "\233\002\n\026PeriodicVestingAccount\022b\n\024base_vesti"
    "ng_account\030\001 \001(\0132*.cosmos.vesting.v1beta"
    "1.BaseVestingAccountB\004\320\336\037\001R\022baseVestingA"
    "ccount\022\035\n\nstart_time\030\002 \001(\003R\tstartTime\022R\n"
    "\017vesting_periods\030\003 \003(\0132\036.cosmos.vesting."
    "v1beta1.PeriodB\t\310\336\037\000\250\347\260*\001R\016vestingPeriod"
    "s:*\210\240\037\000\212\347\260*!cosmos-sdk/PeriodicVestingAc"
    "count\"\273\001\n\026PermanentLockedAccount\022b\n\024base"
    "_vesting_account\030\001 \001(\0132*.cosmos.vesting."
    "v1beta1.BaseVestingAccountB\004\320\336\037\001R\022baseVe"
    "stingAccount:=\210\240\037\000\322\264-\017cosmos-sdk 0.43\212\347\260"
    "*!cosmos-sdk/PermanentLockedAccountB3Z1g"
    "ithub.com/cosmos/cosmos-sdk/x/auth/vesti"
    "ng/typesb\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_cosmos_2fvesting_2fv1beta1_2fvesting_2eproto_deps[5] =
    {
        &::descriptor_table_amino_2famino_2eproto,
        &::descriptor_table_cosmos_2fauth_2fv1beta1_2fauth_2eproto,
        &::descriptor_table_cosmos_2fbase_2fv1beta1_2fcoin_2eproto,
        &::descriptor_table_cosmos_5fproto_2fcosmos_2eproto,
        &::descriptor_table_gogoproto_2fgogo_2eproto,
};
static ::absl::once_flag descriptor_table_cosmos_2fvesting_2fv1beta1_2fvesting_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_cosmos_2fvesting_2fv1beta1_2fvesting_2eproto = {
    false,
    false,
    1856,
    descriptor_table_protodef_cosmos_2fvesting_2fv1beta1_2fvesting_2eproto,
    "cosmos/vesting/v1beta1/vesting.proto",
    &descriptor_table_cosmos_2fvesting_2fv1beta1_2fvesting_2eproto_once,
    descriptor_table_cosmos_2fvesting_2fv1beta1_2fvesting_2eproto_deps,
    5,
    6,
    schemas,
    file_default_instances,
    TableStruct_cosmos_2fvesting_2fv1beta1_2fvesting_2eproto::offsets,
    file_level_enum_descriptors_cosmos_2fvesting_2fv1beta1_2fvesting_2eproto,
    file_level_service_descriptors_cosmos_2fvesting_2fv1beta1_2fvesting_2eproto,
};
namespace cosmos {
namespace vesting {
namespace v1beta1 {
// ===================================================================

class BaseVestingAccount::_Internal {
 public:
  using HasBits =
      decltype(std::declval<BaseVestingAccount>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(BaseVestingAccount, _impl_._has_bits_);
};

void BaseVestingAccount::clear_base_account() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.base_account_ != nullptr) _impl_.base_account_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void BaseVestingAccount::clear_original_vesting() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.original_vesting_.Clear();
}
void BaseVestingAccount::clear_delegated_free() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.delegated_free_.Clear();
}
void BaseVestingAccount::clear_delegated_vesting() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.delegated_vesting_.Clear();
}
BaseVestingAccount::BaseVestingAccount(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.vesting.v1beta1.BaseVestingAccount)
}
inline PROTOBUF_NDEBUG_INLINE BaseVestingAccount::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::cosmos::vesting::v1beta1::BaseVestingAccount& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        original_vesting_{visibility, arena, from.original_vesting_},
        delegated_free_{visibility, arena, from.delegated_free_},
        delegated_vesting_{visibility, arena, from.delegated_vesting_} {}

BaseVestingAccount::BaseVestingAccount(
    ::google::protobuf::Arena* arena,
    const BaseVestingAccount& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  BaseVestingAccount* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.base_account_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::cosmos::auth::v1beta1::BaseAccount>(
                              arena, *from._impl_.base_account_)
                        : nullptr;
  _impl_.end_time_ = from._impl_.end_time_;

  // @@protoc_insertion_point(copy_constructor:cosmos.vesting.v1beta1.BaseVestingAccount)
}
inline PROTOBUF_NDEBUG_INLINE BaseVestingAccount::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        original_vesting_{visibility, arena},
        delegated_free_{visibility, arena},
        delegated_vesting_{visibility, arena} {}

inline void BaseVestingAccount::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, base_account_),
           0,
           offsetof(Impl_, end_time_) -
               offsetof(Impl_, base_account_) +
               sizeof(Impl_::end_time_));
}
BaseVestingAccount::~BaseVestingAccount() {
  // @@protoc_insertion_point(destructor:cosmos.vesting.v1beta1.BaseVestingAccount)
  SharedDtor(*this);
}
inline void BaseVestingAccount::SharedDtor(MessageLite& self) {
  BaseVestingAccount& this_ = static_cast<BaseVestingAccount&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.base_account_;
  this_._impl_.~Impl_();
}

inline void* BaseVestingAccount::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) BaseVestingAccount(arena);
}
constexpr auto BaseVestingAccount::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(BaseVestingAccount, _impl_.original_vesting_) +
          decltype(BaseVestingAccount::_impl_.original_vesting_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(BaseVestingAccount, _impl_.delegated_free_) +
          decltype(BaseVestingAccount::_impl_.delegated_free_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(BaseVestingAccount, _impl_.delegated_vesting_) +
          decltype(BaseVestingAccount::_impl_.delegated_vesting_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(BaseVestingAccount), alignof(BaseVestingAccount), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&BaseVestingAccount::PlacementNew_,
                                 sizeof(BaseVestingAccount),
                                 alignof(BaseVestingAccount));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull BaseVestingAccount::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_BaseVestingAccount_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &BaseVestingAccount::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<BaseVestingAccount>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &BaseVestingAccount::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<BaseVestingAccount>(), &BaseVestingAccount::ByteSizeLong,
            &BaseVestingAccount::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(BaseVestingAccount, _impl_._cached_size_),
        false,
    },
    &BaseVestingAccount::kDescriptorMethods,
    &descriptor_table_cosmos_2fvesting_2fv1beta1_2fvesting_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* BaseVestingAccount::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 4, 0, 2> BaseVestingAccount::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(BaseVestingAccount, _impl_._has_bits_),
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    4,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::cosmos::vesting::v1beta1::BaseVestingAccount>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .cosmos.auth.v1beta1.BaseAccount base_account = 1 [json_name = "baseAccount", (.gogoproto.embed) = true];
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(BaseVestingAccount, _impl_.base_account_)}},
    // repeated .cosmos.base.v1beta1.Coin original_vesting = 2 [json_name = "originalVesting", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.encoding) = "legacy_coins", (.amino.dont_omitempty) = true];
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 1, PROTOBUF_FIELD_OFFSET(BaseVestingAccount, _impl_.original_vesting_)}},
    // repeated .cosmos.base.v1beta1.Coin delegated_free = 3 [json_name = "delegatedFree", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.encoding) = "legacy_coins", (.amino.dont_omitempty) = true];
    {::_pbi::TcParser::FastMtR1,
     {26, 63, 2, PROTOBUF_FIELD_OFFSET(BaseVestingAccount, _impl_.delegated_free_)}},
    // repeated .cosmos.base.v1beta1.Coin delegated_vesting = 4 [json_name = "delegatedVesting", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.encoding) = "legacy_coins", (.amino.dont_omitempty) = true];
    {::_pbi::TcParser::FastMtR1,
     {34, 63, 3, PROTOBUF_FIELD_OFFSET(BaseVestingAccount, _impl_.delegated_vesting_)}},
    // int64 end_time = 5 [json_name = "endTime"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(BaseVestingAccount, _impl_.end_time_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(BaseVestingAccount, _impl_.end_time_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .cosmos.auth.v1beta1.BaseAccount base_account = 1 [json_name = "baseAccount", (.gogoproto.embed) = true];
    {PROTOBUF_FIELD_OFFSET(BaseVestingAccount, _impl_.base_account_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .cosmos.base.v1beta1.Coin original_vesting = 2 [json_name = "originalVesting", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.encoding) = "legacy_coins", (.amino.dont_omitempty) = true];
    {PROTOBUF_FIELD_OFFSET(BaseVestingAccount, _impl_.original_vesting_), -1, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .cosmos.base.v1beta1.Coin delegated_free = 3 [json_name = "delegatedFree", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.encoding) = "legacy_coins", (.amino.dont_omitempty) = true];
    {PROTOBUF_FIELD_OFFSET(BaseVestingAccount, _impl_.delegated_free_), -1, 2,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .cosmos.base.v1beta1.Coin delegated_vesting = 4 [json_name = "delegatedVesting", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.encoding) = "legacy_coins", (.amino.dont_omitempty) = true];
    {PROTOBUF_FIELD_OFFSET(BaseVestingAccount, _impl_.delegated_vesting_), -1, 3,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // int64 end_time = 5 [json_name = "endTime"];
    {PROTOBUF_FIELD_OFFSET(BaseVestingAccount, _impl_.end_time_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
  }}, {{
    {::_pbi::TcParser::GetTable<::cosmos::auth::v1beta1::BaseAccount>()},
    {::_pbi::TcParser::GetTable<::cosmos::base::v1beta1::Coin>()},
    {::_pbi::TcParser::GetTable<::cosmos::base::v1beta1::Coin>()},
    {::_pbi::TcParser::GetTable<::cosmos::base::v1beta1::Coin>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void BaseVestingAccount::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.vesting.v1beta1.BaseVestingAccount)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.original_vesting_.Clear();
  _impl_.delegated_free_.Clear();
  _impl_.delegated_vesting_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.base_account_ != nullptr);
    _impl_.base_account_->Clear();
  }
  _impl_.end_time_ = ::int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* BaseVestingAccount::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const BaseVestingAccount& this_ = static_cast<const BaseVestingAccount&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* BaseVestingAccount::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const BaseVestingAccount& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:cosmos.vesting.v1beta1.BaseVestingAccount)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .cosmos.auth.v1beta1.BaseAccount base_account = 1 [json_name = "baseAccount", (.gogoproto.embed) = true];
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.base_account_, this_._impl_.base_account_->GetCachedSize(), target,
                stream);
          }

          // repeated .cosmos.base.v1beta1.Coin original_vesting = 2 [json_name = "originalVesting", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.encoding) = "legacy_coins", (.amino.dont_omitempty) = true];
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_original_vesting_size());
               i < n; i++) {
            const auto& repfield = this_._internal_original_vesting().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    2, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          // repeated .cosmos.base.v1beta1.Coin delegated_free = 3 [json_name = "delegatedFree", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.encoding) = "legacy_coins", (.amino.dont_omitempty) = true];
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_delegated_free_size());
               i < n; i++) {
            const auto& repfield = this_._internal_delegated_free().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    3, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          // repeated .cosmos.base.v1beta1.Coin delegated_vesting = 4 [json_name = "delegatedVesting", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.encoding) = "legacy_coins", (.amino.dont_omitempty) = true];
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_delegated_vesting_size());
               i < n; i++) {
            const auto& repfield = this_._internal_delegated_vesting().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    4, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          // int64 end_time = 5 [json_name = "endTime"];
          if (this_._internal_end_time() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt64ToArrayWithField<5>(
                    stream, this_._internal_end_time(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:cosmos.vesting.v1beta1.BaseVestingAccount)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t BaseVestingAccount::ByteSizeLong(const MessageLite& base) {
          const BaseVestingAccount& this_ = static_cast<const BaseVestingAccount&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t BaseVestingAccount::ByteSizeLong() const {
          const BaseVestingAccount& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:cosmos.vesting.v1beta1.BaseVestingAccount)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .cosmos.base.v1beta1.Coin original_vesting = 2 [json_name = "originalVesting", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.encoding) = "legacy_coins", (.amino.dont_omitempty) = true];
            {
              total_size += 1UL * this_._internal_original_vesting_size();
              for (const auto& msg : this_._internal_original_vesting()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
            // repeated .cosmos.base.v1beta1.Coin delegated_free = 3 [json_name = "delegatedFree", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.encoding) = "legacy_coins", (.amino.dont_omitempty) = true];
            {
              total_size += 1UL * this_._internal_delegated_free_size();
              for (const auto& msg : this_._internal_delegated_free()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
            // repeated .cosmos.base.v1beta1.Coin delegated_vesting = 4 [json_name = "delegatedVesting", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.encoding) = "legacy_coins", (.amino.dont_omitempty) = true];
            {
              total_size += 1UL * this_._internal_delegated_vesting_size();
              for (const auto& msg : this_._internal_delegated_vesting()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
           {
            // .cosmos.auth.v1beta1.BaseAccount base_account = 1 [json_name = "baseAccount", (.gogoproto.embed) = true];
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.base_account_);
            }
          }
           {
            // int64 end_time = 5 [json_name = "endTime"];
            if (this_._internal_end_time() != 0) {
              total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
                  this_._internal_end_time());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void BaseVestingAccount::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<BaseVestingAccount*>(&to_msg);
  auto& from = static_cast<const BaseVestingAccount&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.vesting.v1beta1.BaseVestingAccount)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_original_vesting()->MergeFrom(
      from._internal_original_vesting());
  _this->_internal_mutable_delegated_free()->MergeFrom(
      from._internal_delegated_free());
  _this->_internal_mutable_delegated_vesting()->MergeFrom(
      from._internal_delegated_vesting());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.base_account_ != nullptr);
    if (_this->_impl_.base_account_ == nullptr) {
      _this->_impl_.base_account_ =
          ::google::protobuf::Message::CopyConstruct<::cosmos::auth::v1beta1::BaseAccount>(arena, *from._impl_.base_account_);
    } else {
      _this->_impl_.base_account_->MergeFrom(*from._impl_.base_account_);
    }
  }
  if (from._internal_end_time() != 0) {
    _this->_impl_.end_time_ = from._impl_.end_time_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void BaseVestingAccount::CopyFrom(const BaseVestingAccount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.vesting.v1beta1.BaseVestingAccount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void BaseVestingAccount::InternalSwap(BaseVestingAccount* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.original_vesting_.InternalSwap(&other->_impl_.original_vesting_);
  _impl_.delegated_free_.InternalSwap(&other->_impl_.delegated_free_);
  _impl_.delegated_vesting_.InternalSwap(&other->_impl_.delegated_vesting_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BaseVestingAccount, _impl_.end_time_)
      + sizeof(BaseVestingAccount::_impl_.end_time_)
      - PROTOBUF_FIELD_OFFSET(BaseVestingAccount, _impl_.base_account_)>(
          reinterpret_cast<char*>(&_impl_.base_account_),
          reinterpret_cast<char*>(&other->_impl_.base_account_));
}

::google::protobuf::Metadata BaseVestingAccount::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ContinuousVestingAccount::_Internal {
 public:
  using HasBits =
      decltype(std::declval<ContinuousVestingAccount>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(ContinuousVestingAccount, _impl_._has_bits_);
};

ContinuousVestingAccount::ContinuousVestingAccount(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.vesting.v1beta1.ContinuousVestingAccount)
}
inline PROTOBUF_NDEBUG_INLINE ContinuousVestingAccount::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::cosmos::vesting::v1beta1::ContinuousVestingAccount& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

ContinuousVestingAccount::ContinuousVestingAccount(
    ::google::protobuf::Arena* arena,
    const ContinuousVestingAccount& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ContinuousVestingAccount* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.base_vesting_account_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::cosmos::vesting::v1beta1::BaseVestingAccount>(
                              arena, *from._impl_.base_vesting_account_)
                        : nullptr;
  _impl_.start_time_ = from._impl_.start_time_;

  // @@protoc_insertion_point(copy_constructor:cosmos.vesting.v1beta1.ContinuousVestingAccount)
}
inline PROTOBUF_NDEBUG_INLINE ContinuousVestingAccount::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void ContinuousVestingAccount::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, base_vesting_account_),
           0,
           offsetof(Impl_, start_time_) -
               offsetof(Impl_, base_vesting_account_) +
               sizeof(Impl_::start_time_));
}
ContinuousVestingAccount::~ContinuousVestingAccount() {
  // @@protoc_insertion_point(destructor:cosmos.vesting.v1beta1.ContinuousVestingAccount)
  SharedDtor(*this);
}
inline void ContinuousVestingAccount::SharedDtor(MessageLite& self) {
  ContinuousVestingAccount& this_ = static_cast<ContinuousVestingAccount&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.base_vesting_account_;
  this_._impl_.~Impl_();
}

inline void* ContinuousVestingAccount::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) ContinuousVestingAccount(arena);
}
constexpr auto ContinuousVestingAccount::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(ContinuousVestingAccount),
                                            alignof(ContinuousVestingAccount));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull ContinuousVestingAccount::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_ContinuousVestingAccount_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &ContinuousVestingAccount::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<ContinuousVestingAccount>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &ContinuousVestingAccount::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<ContinuousVestingAccount>(), &ContinuousVestingAccount::ByteSizeLong,
            &ContinuousVestingAccount::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(ContinuousVestingAccount, _impl_._cached_size_),
        false,
    },
    &ContinuousVestingAccount::kDescriptorMethods,
    &descriptor_table_cosmos_2fvesting_2fv1beta1_2fvesting_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* ContinuousVestingAccount::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2> ContinuousVestingAccount::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ContinuousVestingAccount, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::cosmos::vesting::v1beta1::ContinuousVestingAccount>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // int64 start_time = 2 [json_name = "startTime"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(ContinuousVestingAccount, _impl_.start_time_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(ContinuousVestingAccount, _impl_.start_time_)}},
    // .cosmos.vesting.v1beta1.BaseVestingAccount base_vesting_account = 1 [json_name = "baseVestingAccount", (.gogoproto.embed) = true];
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(ContinuousVestingAccount, _impl_.base_vesting_account_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .cosmos.vesting.v1beta1.BaseVestingAccount base_vesting_account = 1 [json_name = "baseVestingAccount", (.gogoproto.embed) = true];
    {PROTOBUF_FIELD_OFFSET(ContinuousVestingAccount, _impl_.base_vesting_account_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // int64 start_time = 2 [json_name = "startTime"];
    {PROTOBUF_FIELD_OFFSET(ContinuousVestingAccount, _impl_.start_time_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
  }}, {{
    {::_pbi::TcParser::GetTable<::cosmos::vesting::v1beta1::BaseVestingAccount>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void ContinuousVestingAccount::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.vesting.v1beta1.ContinuousVestingAccount)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.base_vesting_account_ != nullptr);
    _impl_.base_vesting_account_->Clear();
  }
  _impl_.start_time_ = ::int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* ContinuousVestingAccount::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const ContinuousVestingAccount& this_ = static_cast<const ContinuousVestingAccount&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* ContinuousVestingAccount::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const ContinuousVestingAccount& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:cosmos.vesting.v1beta1.ContinuousVestingAccount)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .cosmos.vesting.v1beta1.BaseVestingAccount base_vesting_account = 1 [json_name = "baseVestingAccount", (.gogoproto.embed) = true];
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.base_vesting_account_, this_._impl_.base_vesting_account_->GetCachedSize(), target,
                stream);
          }

          // int64 start_time = 2 [json_name = "startTime"];
          if (this_._internal_start_time() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt64ToArrayWithField<2>(
                    stream, this_._internal_start_time(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:cosmos.vesting.v1beta1.ContinuousVestingAccount)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t ContinuousVestingAccount::ByteSizeLong(const MessageLite& base) {
          const ContinuousVestingAccount& this_ = static_cast<const ContinuousVestingAccount&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t ContinuousVestingAccount::ByteSizeLong() const {
          const ContinuousVestingAccount& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:cosmos.vesting.v1beta1.ContinuousVestingAccount)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // .cosmos.vesting.v1beta1.BaseVestingAccount base_vesting_account = 1 [json_name = "baseVestingAccount", (.gogoproto.embed) = true];
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.base_vesting_account_);
            }
          }
           {
            // int64 start_time = 2 [json_name = "startTime"];
            if (this_._internal_start_time() != 0) {
              total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
                  this_._internal_start_time());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void ContinuousVestingAccount::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ContinuousVestingAccount*>(&to_msg);
  auto& from = static_cast<const ContinuousVestingAccount&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.vesting.v1beta1.ContinuousVestingAccount)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.base_vesting_account_ != nullptr);
    if (_this->_impl_.base_vesting_account_ == nullptr) {
      _this->_impl_.base_vesting_account_ =
          ::google::protobuf::Message::CopyConstruct<::cosmos::vesting::v1beta1::BaseVestingAccount>(arena, *from._impl_.base_vesting_account_);
    } else {
      _this->_impl_.base_vesting_account_->MergeFrom(*from._impl_.base_vesting_account_);
    }
  }
  if (from._internal_start_time() != 0) {
    _this->_impl_.start_time_ = from._impl_.start_time_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ContinuousVestingAccount::CopyFrom(const ContinuousVestingAccount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.vesting.v1beta1.ContinuousVestingAccount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ContinuousVestingAccount::InternalSwap(ContinuousVestingAccount* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ContinuousVestingAccount, _impl_.start_time_)
      + sizeof(ContinuousVestingAccount::_impl_.start_time_)
      - PROTOBUF_FIELD_OFFSET(ContinuousVestingAccount, _impl_.base_vesting_account_)>(
          reinterpret_cast<char*>(&_impl_.base_vesting_account_),
          reinterpret_cast<char*>(&other->_impl_.base_vesting_account_));
}

::google::protobuf::Metadata ContinuousVestingAccount::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class DelayedVestingAccount::_Internal {
 public:
  using HasBits =
      decltype(std::declval<DelayedVestingAccount>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(DelayedVestingAccount, _impl_._has_bits_);
};

DelayedVestingAccount::DelayedVestingAccount(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.vesting.v1beta1.DelayedVestingAccount)
}
inline PROTOBUF_NDEBUG_INLINE DelayedVestingAccount::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::cosmos::vesting::v1beta1::DelayedVestingAccount& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

DelayedVestingAccount::DelayedVestingAccount(
    ::google::protobuf::Arena* arena,
    const DelayedVestingAccount& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  DelayedVestingAccount* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.base_vesting_account_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::cosmos::vesting::v1beta1::BaseVestingAccount>(
                              arena, *from._impl_.base_vesting_account_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:cosmos.vesting.v1beta1.DelayedVestingAccount)
}
inline PROTOBUF_NDEBUG_INLINE DelayedVestingAccount::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void DelayedVestingAccount::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.base_vesting_account_ = {};
}
DelayedVestingAccount::~DelayedVestingAccount() {
  // @@protoc_insertion_point(destructor:cosmos.vesting.v1beta1.DelayedVestingAccount)
  SharedDtor(*this);
}
inline void DelayedVestingAccount::SharedDtor(MessageLite& self) {
  DelayedVestingAccount& this_ = static_cast<DelayedVestingAccount&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.base_vesting_account_;
  this_._impl_.~Impl_();
}

inline void* DelayedVestingAccount::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) DelayedVestingAccount(arena);
}
constexpr auto DelayedVestingAccount::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(DelayedVestingAccount),
                                            alignof(DelayedVestingAccount));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull DelayedVestingAccount::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_DelayedVestingAccount_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &DelayedVestingAccount::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<DelayedVestingAccount>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &DelayedVestingAccount::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<DelayedVestingAccount>(), &DelayedVestingAccount::ByteSizeLong,
            &DelayedVestingAccount::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(DelayedVestingAccount, _impl_._cached_size_),
        false,
    },
    &DelayedVestingAccount::kDescriptorMethods,
    &descriptor_table_cosmos_2fvesting_2fv1beta1_2fvesting_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* DelayedVestingAccount::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> DelayedVestingAccount::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(DelayedVestingAccount, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::cosmos::vesting::v1beta1::DelayedVestingAccount>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .cosmos.vesting.v1beta1.BaseVestingAccount base_vesting_account = 1 [json_name = "baseVestingAccount", (.gogoproto.embed) = true];
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(DelayedVestingAccount, _impl_.base_vesting_account_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .cosmos.vesting.v1beta1.BaseVestingAccount base_vesting_account = 1 [json_name = "baseVestingAccount", (.gogoproto.embed) = true];
    {PROTOBUF_FIELD_OFFSET(DelayedVestingAccount, _impl_.base_vesting_account_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::cosmos::vesting::v1beta1::BaseVestingAccount>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void DelayedVestingAccount::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.vesting.v1beta1.DelayedVestingAccount)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.base_vesting_account_ != nullptr);
    _impl_.base_vesting_account_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* DelayedVestingAccount::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const DelayedVestingAccount& this_ = static_cast<const DelayedVestingAccount&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* DelayedVestingAccount::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const DelayedVestingAccount& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:cosmos.vesting.v1beta1.DelayedVestingAccount)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .cosmos.vesting.v1beta1.BaseVestingAccount base_vesting_account = 1 [json_name = "baseVestingAccount", (.gogoproto.embed) = true];
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.base_vesting_account_, this_._impl_.base_vesting_account_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:cosmos.vesting.v1beta1.DelayedVestingAccount)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t DelayedVestingAccount::ByteSizeLong(const MessageLite& base) {
          const DelayedVestingAccount& this_ = static_cast<const DelayedVestingAccount&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t DelayedVestingAccount::ByteSizeLong() const {
          const DelayedVestingAccount& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:cosmos.vesting.v1beta1.DelayedVestingAccount)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // .cosmos.vesting.v1beta1.BaseVestingAccount base_vesting_account = 1 [json_name = "baseVestingAccount", (.gogoproto.embed) = true];
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.base_vesting_account_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void DelayedVestingAccount::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<DelayedVestingAccount*>(&to_msg);
  auto& from = static_cast<const DelayedVestingAccount&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.vesting.v1beta1.DelayedVestingAccount)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.base_vesting_account_ != nullptr);
    if (_this->_impl_.base_vesting_account_ == nullptr) {
      _this->_impl_.base_vesting_account_ =
          ::google::protobuf::Message::CopyConstruct<::cosmos::vesting::v1beta1::BaseVestingAccount>(arena, *from._impl_.base_vesting_account_);
    } else {
      _this->_impl_.base_vesting_account_->MergeFrom(*from._impl_.base_vesting_account_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void DelayedVestingAccount::CopyFrom(const DelayedVestingAccount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.vesting.v1beta1.DelayedVestingAccount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void DelayedVestingAccount::InternalSwap(DelayedVestingAccount* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.base_vesting_account_, other->_impl_.base_vesting_account_);
}

::google::protobuf::Metadata DelayedVestingAccount::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Period::_Internal {
 public:
};

void Period::clear_amount() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.amount_.Clear();
}
Period::Period(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.vesting.v1beta1.Period)
}
inline PROTOBUF_NDEBUG_INLINE Period::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::cosmos::vesting::v1beta1::Period& from_msg)
      : amount_{visibility, arena, from.amount_},
        _cached_size_{0} {}

Period::Period(
    ::google::protobuf::Arena* arena,
    const Period& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Period* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.length_ = from._impl_.length_;

  // @@protoc_insertion_point(copy_constructor:cosmos.vesting.v1beta1.Period)
}
inline PROTOBUF_NDEBUG_INLINE Period::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : amount_{visibility, arena},
        _cached_size_{0} {}

inline void Period::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.length_ = {};
}
Period::~Period() {
  // @@protoc_insertion_point(destructor:cosmos.vesting.v1beta1.Period)
  SharedDtor(*this);
}
inline void Period::SharedDtor(MessageLite& self) {
  Period& this_ = static_cast<Period&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* Period::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) Period(arena);
}
constexpr auto Period::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(Period, _impl_.amount_) +
          decltype(Period::_impl_.amount_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(Period), alignof(Period), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&Period::PlacementNew_,
                                 sizeof(Period),
                                 alignof(Period));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull Period::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_Period_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &Period::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<Period>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &Period::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<Period>(), &Period::ByteSizeLong,
            &Period::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(Period, _impl_._cached_size_),
        false,
    },
    &Period::kDescriptorMethods,
    &descriptor_table_cosmos_2fvesting_2fv1beta1_2fvesting_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* Period::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2> Period::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::cosmos::vesting::v1beta1::Period>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .cosmos.base.v1beta1.Coin amount = 2 [json_name = "amount", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.encoding) = "legacy_coins", (.amino.dont_omitempty) = true];
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(Period, _impl_.amount_)}},
    // int64 length = 1 [json_name = "length"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(Period, _impl_.length_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(Period, _impl_.length_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int64 length = 1 [json_name = "length"];
    {PROTOBUF_FIELD_OFFSET(Period, _impl_.length_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // repeated .cosmos.base.v1beta1.Coin amount = 2 [json_name = "amount", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.encoding) = "legacy_coins", (.amino.dont_omitempty) = true];
    {PROTOBUF_FIELD_OFFSET(Period, _impl_.amount_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::cosmos::base::v1beta1::Coin>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void Period::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.vesting.v1beta1.Period)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.amount_.Clear();
  _impl_.length_ = ::int64_t{0};
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Period::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Period& this_ = static_cast<const Period&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Period::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Period& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:cosmos.vesting.v1beta1.Period)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // int64 length = 1 [json_name = "length"];
          if (this_._internal_length() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt64ToArrayWithField<1>(
                    stream, this_._internal_length(), target);
          }

          // repeated .cosmos.base.v1beta1.Coin amount = 2 [json_name = "amount", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.encoding) = "legacy_coins", (.amino.dont_omitempty) = true];
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_amount_size());
               i < n; i++) {
            const auto& repfield = this_._internal_amount().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    2, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:cosmos.vesting.v1beta1.Period)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Period::ByteSizeLong(const MessageLite& base) {
          const Period& this_ = static_cast<const Period&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Period::ByteSizeLong() const {
          const Period& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:cosmos.vesting.v1beta1.Period)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .cosmos.base.v1beta1.Coin amount = 2 [json_name = "amount", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.encoding) = "legacy_coins", (.amino.dont_omitempty) = true];
            {
              total_size += 1UL * this_._internal_amount_size();
              for (const auto& msg : this_._internal_amount()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
           {
            // int64 length = 1 [json_name = "length"];
            if (this_._internal_length() != 0) {
              total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
                  this_._internal_length());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Period::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Period*>(&to_msg);
  auto& from = static_cast<const Period&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.vesting.v1beta1.Period)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_amount()->MergeFrom(
      from._internal_amount());
  if (from._internal_length() != 0) {
    _this->_impl_.length_ = from._impl_.length_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Period::CopyFrom(const Period& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.vesting.v1beta1.Period)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Period::InternalSwap(Period* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.amount_.InternalSwap(&other->_impl_.amount_);
        swap(_impl_.length_, other->_impl_.length_);
}

::google::protobuf::Metadata Period::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class PeriodicVestingAccount::_Internal {
 public:
  using HasBits =
      decltype(std::declval<PeriodicVestingAccount>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(PeriodicVestingAccount, _impl_._has_bits_);
};

PeriodicVestingAccount::PeriodicVestingAccount(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.vesting.v1beta1.PeriodicVestingAccount)
}
inline PROTOBUF_NDEBUG_INLINE PeriodicVestingAccount::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::cosmos::vesting::v1beta1::PeriodicVestingAccount& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        vesting_periods_{visibility, arena, from.vesting_periods_} {}

PeriodicVestingAccount::PeriodicVestingAccount(
    ::google::protobuf::Arena* arena,
    const PeriodicVestingAccount& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  PeriodicVestingAccount* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.base_vesting_account_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::cosmos::vesting::v1beta1::BaseVestingAccount>(
                              arena, *from._impl_.base_vesting_account_)
                        : nullptr;
  _impl_.start_time_ = from._impl_.start_time_;

  // @@protoc_insertion_point(copy_constructor:cosmos.vesting.v1beta1.PeriodicVestingAccount)
}
inline PROTOBUF_NDEBUG_INLINE PeriodicVestingAccount::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        vesting_periods_{visibility, arena} {}

inline void PeriodicVestingAccount::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, base_vesting_account_),
           0,
           offsetof(Impl_, start_time_) -
               offsetof(Impl_, base_vesting_account_) +
               sizeof(Impl_::start_time_));
}
PeriodicVestingAccount::~PeriodicVestingAccount() {
  // @@protoc_insertion_point(destructor:cosmos.vesting.v1beta1.PeriodicVestingAccount)
  SharedDtor(*this);
}
inline void PeriodicVestingAccount::SharedDtor(MessageLite& self) {
  PeriodicVestingAccount& this_ = static_cast<PeriodicVestingAccount&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.base_vesting_account_;
  this_._impl_.~Impl_();
}

inline void* PeriodicVestingAccount::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) PeriodicVestingAccount(arena);
}
constexpr auto PeriodicVestingAccount::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(PeriodicVestingAccount, _impl_.vesting_periods_) +
          decltype(PeriodicVestingAccount::_impl_.vesting_periods_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(PeriodicVestingAccount), alignof(PeriodicVestingAccount), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&PeriodicVestingAccount::PlacementNew_,
                                 sizeof(PeriodicVestingAccount),
                                 alignof(PeriodicVestingAccount));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull PeriodicVestingAccount::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_PeriodicVestingAccount_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &PeriodicVestingAccount::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<PeriodicVestingAccount>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &PeriodicVestingAccount::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<PeriodicVestingAccount>(), &PeriodicVestingAccount::ByteSizeLong,
            &PeriodicVestingAccount::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(PeriodicVestingAccount, _impl_._cached_size_),
        false,
    },
    &PeriodicVestingAccount::kDescriptorMethods,
    &descriptor_table_cosmos_2fvesting_2fv1beta1_2fvesting_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* PeriodicVestingAccount::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 2, 0, 2> PeriodicVestingAccount::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(PeriodicVestingAccount, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::cosmos::vesting::v1beta1::PeriodicVestingAccount>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .cosmos.vesting.v1beta1.BaseVestingAccount base_vesting_account = 1 [json_name = "baseVestingAccount", (.gogoproto.embed) = true];
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(PeriodicVestingAccount, _impl_.base_vesting_account_)}},
    // int64 start_time = 2 [json_name = "startTime"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(PeriodicVestingAccount, _impl_.start_time_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(PeriodicVestingAccount, _impl_.start_time_)}},
    // repeated .cosmos.vesting.v1beta1.Period vesting_periods = 3 [json_name = "vestingPeriods", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
    {::_pbi::TcParser::FastMtR1,
     {26, 63, 1, PROTOBUF_FIELD_OFFSET(PeriodicVestingAccount, _impl_.vesting_periods_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .cosmos.vesting.v1beta1.BaseVestingAccount base_vesting_account = 1 [json_name = "baseVestingAccount", (.gogoproto.embed) = true];
    {PROTOBUF_FIELD_OFFSET(PeriodicVestingAccount, _impl_.base_vesting_account_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // int64 start_time = 2 [json_name = "startTime"];
    {PROTOBUF_FIELD_OFFSET(PeriodicVestingAccount, _impl_.start_time_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // repeated .cosmos.vesting.v1beta1.Period vesting_periods = 3 [json_name = "vestingPeriods", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
    {PROTOBUF_FIELD_OFFSET(PeriodicVestingAccount, _impl_.vesting_periods_), -1, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::cosmos::vesting::v1beta1::BaseVestingAccount>()},
    {::_pbi::TcParser::GetTable<::cosmos::vesting::v1beta1::Period>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void PeriodicVestingAccount::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.vesting.v1beta1.PeriodicVestingAccount)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.vesting_periods_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.base_vesting_account_ != nullptr);
    _impl_.base_vesting_account_->Clear();
  }
  _impl_.start_time_ = ::int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* PeriodicVestingAccount::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const PeriodicVestingAccount& this_ = static_cast<const PeriodicVestingAccount&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* PeriodicVestingAccount::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const PeriodicVestingAccount& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:cosmos.vesting.v1beta1.PeriodicVestingAccount)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .cosmos.vesting.v1beta1.BaseVestingAccount base_vesting_account = 1 [json_name = "baseVestingAccount", (.gogoproto.embed) = true];
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.base_vesting_account_, this_._impl_.base_vesting_account_->GetCachedSize(), target,
                stream);
          }

          // int64 start_time = 2 [json_name = "startTime"];
          if (this_._internal_start_time() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt64ToArrayWithField<2>(
                    stream, this_._internal_start_time(), target);
          }

          // repeated .cosmos.vesting.v1beta1.Period vesting_periods = 3 [json_name = "vestingPeriods", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_vesting_periods_size());
               i < n; i++) {
            const auto& repfield = this_._internal_vesting_periods().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    3, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:cosmos.vesting.v1beta1.PeriodicVestingAccount)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t PeriodicVestingAccount::ByteSizeLong(const MessageLite& base) {
          const PeriodicVestingAccount& this_ = static_cast<const PeriodicVestingAccount&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t PeriodicVestingAccount::ByteSizeLong() const {
          const PeriodicVestingAccount& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:cosmos.vesting.v1beta1.PeriodicVestingAccount)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .cosmos.vesting.v1beta1.Period vesting_periods = 3 [json_name = "vestingPeriods", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
            {
              total_size += 1UL * this_._internal_vesting_periods_size();
              for (const auto& msg : this_._internal_vesting_periods()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
           {
            // .cosmos.vesting.v1beta1.BaseVestingAccount base_vesting_account = 1 [json_name = "baseVestingAccount", (.gogoproto.embed) = true];
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.base_vesting_account_);
            }
          }
           {
            // int64 start_time = 2 [json_name = "startTime"];
            if (this_._internal_start_time() != 0) {
              total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
                  this_._internal_start_time());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void PeriodicVestingAccount::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<PeriodicVestingAccount*>(&to_msg);
  auto& from = static_cast<const PeriodicVestingAccount&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.vesting.v1beta1.PeriodicVestingAccount)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_vesting_periods()->MergeFrom(
      from._internal_vesting_periods());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.base_vesting_account_ != nullptr);
    if (_this->_impl_.base_vesting_account_ == nullptr) {
      _this->_impl_.base_vesting_account_ =
          ::google::protobuf::Message::CopyConstruct<::cosmos::vesting::v1beta1::BaseVestingAccount>(arena, *from._impl_.base_vesting_account_);
    } else {
      _this->_impl_.base_vesting_account_->MergeFrom(*from._impl_.base_vesting_account_);
    }
  }
  if (from._internal_start_time() != 0) {
    _this->_impl_.start_time_ = from._impl_.start_time_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PeriodicVestingAccount::CopyFrom(const PeriodicVestingAccount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.vesting.v1beta1.PeriodicVestingAccount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void PeriodicVestingAccount::InternalSwap(PeriodicVestingAccount* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.vesting_periods_.InternalSwap(&other->_impl_.vesting_periods_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PeriodicVestingAccount, _impl_.start_time_)
      + sizeof(PeriodicVestingAccount::_impl_.start_time_)
      - PROTOBUF_FIELD_OFFSET(PeriodicVestingAccount, _impl_.base_vesting_account_)>(
          reinterpret_cast<char*>(&_impl_.base_vesting_account_),
          reinterpret_cast<char*>(&other->_impl_.base_vesting_account_));
}

::google::protobuf::Metadata PeriodicVestingAccount::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class PermanentLockedAccount::_Internal {
 public:
  using HasBits =
      decltype(std::declval<PermanentLockedAccount>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(PermanentLockedAccount, _impl_._has_bits_);
};

PermanentLockedAccount::PermanentLockedAccount(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.vesting.v1beta1.PermanentLockedAccount)
}
inline PROTOBUF_NDEBUG_INLINE PermanentLockedAccount::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::cosmos::vesting::v1beta1::PermanentLockedAccount& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

PermanentLockedAccount::PermanentLockedAccount(
    ::google::protobuf::Arena* arena,
    const PermanentLockedAccount& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  PermanentLockedAccount* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.base_vesting_account_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::cosmos::vesting::v1beta1::BaseVestingAccount>(
                              arena, *from._impl_.base_vesting_account_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:cosmos.vesting.v1beta1.PermanentLockedAccount)
}
inline PROTOBUF_NDEBUG_INLINE PermanentLockedAccount::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void PermanentLockedAccount::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.base_vesting_account_ = {};
}
PermanentLockedAccount::~PermanentLockedAccount() {
  // @@protoc_insertion_point(destructor:cosmos.vesting.v1beta1.PermanentLockedAccount)
  SharedDtor(*this);
}
inline void PermanentLockedAccount::SharedDtor(MessageLite& self) {
  PermanentLockedAccount& this_ = static_cast<PermanentLockedAccount&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.base_vesting_account_;
  this_._impl_.~Impl_();
}

inline void* PermanentLockedAccount::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) PermanentLockedAccount(arena);
}
constexpr auto PermanentLockedAccount::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(PermanentLockedAccount),
                                            alignof(PermanentLockedAccount));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull PermanentLockedAccount::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_PermanentLockedAccount_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &PermanentLockedAccount::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<PermanentLockedAccount>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &PermanentLockedAccount::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<PermanentLockedAccount>(), &PermanentLockedAccount::ByteSizeLong,
            &PermanentLockedAccount::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(PermanentLockedAccount, _impl_._cached_size_),
        false,
    },
    &PermanentLockedAccount::kDescriptorMethods,
    &descriptor_table_cosmos_2fvesting_2fv1beta1_2fvesting_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* PermanentLockedAccount::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> PermanentLockedAccount::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(PermanentLockedAccount, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::cosmos::vesting::v1beta1::PermanentLockedAccount>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .cosmos.vesting.v1beta1.BaseVestingAccount base_vesting_account = 1 [json_name = "baseVestingAccount", (.gogoproto.embed) = true];
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(PermanentLockedAccount, _impl_.base_vesting_account_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .cosmos.vesting.v1beta1.BaseVestingAccount base_vesting_account = 1 [json_name = "baseVestingAccount", (.gogoproto.embed) = true];
    {PROTOBUF_FIELD_OFFSET(PermanentLockedAccount, _impl_.base_vesting_account_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::cosmos::vesting::v1beta1::BaseVestingAccount>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void PermanentLockedAccount::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.vesting.v1beta1.PermanentLockedAccount)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.base_vesting_account_ != nullptr);
    _impl_.base_vesting_account_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* PermanentLockedAccount::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const PermanentLockedAccount& this_ = static_cast<const PermanentLockedAccount&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* PermanentLockedAccount::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const PermanentLockedAccount& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:cosmos.vesting.v1beta1.PermanentLockedAccount)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .cosmos.vesting.v1beta1.BaseVestingAccount base_vesting_account = 1 [json_name = "baseVestingAccount", (.gogoproto.embed) = true];
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.base_vesting_account_, this_._impl_.base_vesting_account_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:cosmos.vesting.v1beta1.PermanentLockedAccount)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t PermanentLockedAccount::ByteSizeLong(const MessageLite& base) {
          const PermanentLockedAccount& this_ = static_cast<const PermanentLockedAccount&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t PermanentLockedAccount::ByteSizeLong() const {
          const PermanentLockedAccount& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:cosmos.vesting.v1beta1.PermanentLockedAccount)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // .cosmos.vesting.v1beta1.BaseVestingAccount base_vesting_account = 1 [json_name = "baseVestingAccount", (.gogoproto.embed) = true];
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.base_vesting_account_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void PermanentLockedAccount::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<PermanentLockedAccount*>(&to_msg);
  auto& from = static_cast<const PermanentLockedAccount&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.vesting.v1beta1.PermanentLockedAccount)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.base_vesting_account_ != nullptr);
    if (_this->_impl_.base_vesting_account_ == nullptr) {
      _this->_impl_.base_vesting_account_ =
          ::google::protobuf::Message::CopyConstruct<::cosmos::vesting::v1beta1::BaseVestingAccount>(arena, *from._impl_.base_vesting_account_);
    } else {
      _this->_impl_.base_vesting_account_->MergeFrom(*from._impl_.base_vesting_account_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PermanentLockedAccount::CopyFrom(const PermanentLockedAccount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.vesting.v1beta1.PermanentLockedAccount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void PermanentLockedAccount::InternalSwap(PermanentLockedAccount* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.base_vesting_account_, other->_impl_.base_vesting_account_);
}

::google::protobuf::Metadata PermanentLockedAccount::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace vesting
}  // namespace cosmos
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_cosmos_2fvesting_2fv1beta1_2fvesting_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
