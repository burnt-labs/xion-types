// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: cosmos/vesting/v1beta1/vesting.proto
// Protobuf C++ Version: 5.29.4

#ifndef cosmos_2fvesting_2fv1beta1_2fvesting_2eproto_2epb_2eh
#define cosmos_2fvesting_2fv1beta1_2fvesting_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029004
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "amino/amino.pb.h"
#include "gogoproto/gogo.pb.h"
#include "cosmos/base/v1beta1/coin.pb.h"
#include "cosmos_proto/cosmos.pb.h"
#include "cosmos/auth/v1beta1/auth.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_cosmos_2fvesting_2fv1beta1_2fvesting_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_cosmos_2fvesting_2fv1beta1_2fvesting_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_cosmos_2fvesting_2fv1beta1_2fvesting_2eproto;
namespace cosmos {
namespace vesting {
namespace v1beta1 {
class BaseVestingAccount;
struct BaseVestingAccountDefaultTypeInternal;
extern BaseVestingAccountDefaultTypeInternal _BaseVestingAccount_default_instance_;
class ContinuousVestingAccount;
struct ContinuousVestingAccountDefaultTypeInternal;
extern ContinuousVestingAccountDefaultTypeInternal _ContinuousVestingAccount_default_instance_;
class DelayedVestingAccount;
struct DelayedVestingAccountDefaultTypeInternal;
extern DelayedVestingAccountDefaultTypeInternal _DelayedVestingAccount_default_instance_;
class Period;
struct PeriodDefaultTypeInternal;
extern PeriodDefaultTypeInternal _Period_default_instance_;
class PeriodicVestingAccount;
struct PeriodicVestingAccountDefaultTypeInternal;
extern PeriodicVestingAccountDefaultTypeInternal _PeriodicVestingAccount_default_instance_;
class PermanentLockedAccount;
struct PermanentLockedAccountDefaultTypeInternal;
extern PermanentLockedAccountDefaultTypeInternal _PermanentLockedAccount_default_instance_;
}  // namespace v1beta1
}  // namespace vesting
}  // namespace cosmos
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace cosmos {
namespace vesting {
namespace v1beta1 {

// ===================================================================


// -------------------------------------------------------------------

class Period final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.vesting.v1beta1.Period) */ {
 public:
  inline Period() : Period(nullptr) {}
  ~Period() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Period* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Period));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Period(
      ::google::protobuf::internal::ConstantInitialized);

  inline Period(const Period& from) : Period(nullptr, from) {}
  inline Period(Period&& from) noexcept
      : Period(nullptr, std::move(from)) {}
  inline Period& operator=(const Period& from) {
    CopyFrom(from);
    return *this;
  }
  inline Period& operator=(Period&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Period& default_instance() {
    return *internal_default_instance();
  }
  static inline const Period* internal_default_instance() {
    return reinterpret_cast<const Period*>(
        &_Period_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(Period& a, Period& b) { a.Swap(&b); }
  inline void Swap(Period* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Period* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Period* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Period>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Period& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Period& from) { Period::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Period* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.vesting.v1beta1.Period"; }

 protected:
  explicit Period(::google::protobuf::Arena* arena);
  Period(::google::protobuf::Arena* arena, const Period& from);
  Period(::google::protobuf::Arena* arena, Period&& from) noexcept
      : Period(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kAmountFieldNumber = 2,
    kLengthFieldNumber = 1,
  };
  // repeated .cosmos.base.v1beta1.Coin amount = 2 [json_name = "amount", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.encoding) = "legacy_coins", (.amino.dont_omitempty) = true];
  int amount_size() const;
  private:
  int _internal_amount_size() const;

  public:
  void clear_amount() ;
  ::cosmos::base::v1beta1::Coin* mutable_amount(int index);
  ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::Coin>* mutable_amount();

  private:
  const ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::Coin>& _internal_amount() const;
  ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::Coin>* _internal_mutable_amount();
  public:
  const ::cosmos::base::v1beta1::Coin& amount(int index) const;
  ::cosmos::base::v1beta1::Coin* add_amount();
  const ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::Coin>& amount() const;
  // int64 length = 1 [json_name = "length"];
  void clear_length() ;
  ::int64_t length() const;
  void set_length(::int64_t value);

  private:
  ::int64_t _internal_length() const;
  void _internal_set_length(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.vesting.v1beta1.Period)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Period& from_msg);
    ::google::protobuf::RepeatedPtrField< ::cosmos::base::v1beta1::Coin > amount_;
    ::int64_t length_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fvesting_2fv1beta1_2fvesting_2eproto;
};
// -------------------------------------------------------------------

class BaseVestingAccount final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.vesting.v1beta1.BaseVestingAccount) */ {
 public:
  inline BaseVestingAccount() : BaseVestingAccount(nullptr) {}
  ~BaseVestingAccount() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(BaseVestingAccount* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(BaseVestingAccount));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR BaseVestingAccount(
      ::google::protobuf::internal::ConstantInitialized);

  inline BaseVestingAccount(const BaseVestingAccount& from) : BaseVestingAccount(nullptr, from) {}
  inline BaseVestingAccount(BaseVestingAccount&& from) noexcept
      : BaseVestingAccount(nullptr, std::move(from)) {}
  inline BaseVestingAccount& operator=(const BaseVestingAccount& from) {
    CopyFrom(from);
    return *this;
  }
  inline BaseVestingAccount& operator=(BaseVestingAccount&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BaseVestingAccount& default_instance() {
    return *internal_default_instance();
  }
  static inline const BaseVestingAccount* internal_default_instance() {
    return reinterpret_cast<const BaseVestingAccount*>(
        &_BaseVestingAccount_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(BaseVestingAccount& a, BaseVestingAccount& b) { a.Swap(&b); }
  inline void Swap(BaseVestingAccount* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BaseVestingAccount* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BaseVestingAccount* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<BaseVestingAccount>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const BaseVestingAccount& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const BaseVestingAccount& from) { BaseVestingAccount::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(BaseVestingAccount* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.vesting.v1beta1.BaseVestingAccount"; }

 protected:
  explicit BaseVestingAccount(::google::protobuf::Arena* arena);
  BaseVestingAccount(::google::protobuf::Arena* arena, const BaseVestingAccount& from);
  BaseVestingAccount(::google::protobuf::Arena* arena, BaseVestingAccount&& from) noexcept
      : BaseVestingAccount(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kOriginalVestingFieldNumber = 2,
    kDelegatedFreeFieldNumber = 3,
    kDelegatedVestingFieldNumber = 4,
    kBaseAccountFieldNumber = 1,
    kEndTimeFieldNumber = 5,
  };
  // repeated .cosmos.base.v1beta1.Coin original_vesting = 2 [json_name = "originalVesting", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.encoding) = "legacy_coins", (.amino.dont_omitempty) = true];
  int original_vesting_size() const;
  private:
  int _internal_original_vesting_size() const;

  public:
  void clear_original_vesting() ;
  ::cosmos::base::v1beta1::Coin* mutable_original_vesting(int index);
  ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::Coin>* mutable_original_vesting();

  private:
  const ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::Coin>& _internal_original_vesting() const;
  ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::Coin>* _internal_mutable_original_vesting();
  public:
  const ::cosmos::base::v1beta1::Coin& original_vesting(int index) const;
  ::cosmos::base::v1beta1::Coin* add_original_vesting();
  const ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::Coin>& original_vesting() const;
  // repeated .cosmos.base.v1beta1.Coin delegated_free = 3 [json_name = "delegatedFree", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.encoding) = "legacy_coins", (.amino.dont_omitempty) = true];
  int delegated_free_size() const;
  private:
  int _internal_delegated_free_size() const;

  public:
  void clear_delegated_free() ;
  ::cosmos::base::v1beta1::Coin* mutable_delegated_free(int index);
  ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::Coin>* mutable_delegated_free();

  private:
  const ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::Coin>& _internal_delegated_free() const;
  ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::Coin>* _internal_mutable_delegated_free();
  public:
  const ::cosmos::base::v1beta1::Coin& delegated_free(int index) const;
  ::cosmos::base::v1beta1::Coin* add_delegated_free();
  const ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::Coin>& delegated_free() const;
  // repeated .cosmos.base.v1beta1.Coin delegated_vesting = 4 [json_name = "delegatedVesting", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.encoding) = "legacy_coins", (.amino.dont_omitempty) = true];
  int delegated_vesting_size() const;
  private:
  int _internal_delegated_vesting_size() const;

  public:
  void clear_delegated_vesting() ;
  ::cosmos::base::v1beta1::Coin* mutable_delegated_vesting(int index);
  ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::Coin>* mutable_delegated_vesting();

  private:
  const ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::Coin>& _internal_delegated_vesting() const;
  ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::Coin>* _internal_mutable_delegated_vesting();
  public:
  const ::cosmos::base::v1beta1::Coin& delegated_vesting(int index) const;
  ::cosmos::base::v1beta1::Coin* add_delegated_vesting();
  const ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::Coin>& delegated_vesting() const;
  // .cosmos.auth.v1beta1.BaseAccount base_account = 1 [json_name = "baseAccount", (.gogoproto.embed) = true];
  bool has_base_account() const;
  void clear_base_account() ;
  const ::cosmos::auth::v1beta1::BaseAccount& base_account() const;
  PROTOBUF_NODISCARD ::cosmos::auth::v1beta1::BaseAccount* release_base_account();
  ::cosmos::auth::v1beta1::BaseAccount* mutable_base_account();
  void set_allocated_base_account(::cosmos::auth::v1beta1::BaseAccount* value);
  void unsafe_arena_set_allocated_base_account(::cosmos::auth::v1beta1::BaseAccount* value);
  ::cosmos::auth::v1beta1::BaseAccount* unsafe_arena_release_base_account();

  private:
  const ::cosmos::auth::v1beta1::BaseAccount& _internal_base_account() const;
  ::cosmos::auth::v1beta1::BaseAccount* _internal_mutable_base_account();

  public:
  // int64 end_time = 5 [json_name = "endTime"];
  void clear_end_time() ;
  ::int64_t end_time() const;
  void set_end_time(::int64_t value);

  private:
  ::int64_t _internal_end_time() const;
  void _internal_set_end_time(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.vesting.v1beta1.BaseVestingAccount)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 4,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const BaseVestingAccount& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::cosmos::base::v1beta1::Coin > original_vesting_;
    ::google::protobuf::RepeatedPtrField< ::cosmos::base::v1beta1::Coin > delegated_free_;
    ::google::protobuf::RepeatedPtrField< ::cosmos::base::v1beta1::Coin > delegated_vesting_;
    ::cosmos::auth::v1beta1::BaseAccount* base_account_;
    ::int64_t end_time_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fvesting_2fv1beta1_2fvesting_2eproto;
};
// -------------------------------------------------------------------

class PermanentLockedAccount final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.vesting.v1beta1.PermanentLockedAccount) */ {
 public:
  inline PermanentLockedAccount() : PermanentLockedAccount(nullptr) {}
  ~PermanentLockedAccount() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(PermanentLockedAccount* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(PermanentLockedAccount));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PermanentLockedAccount(
      ::google::protobuf::internal::ConstantInitialized);

  inline PermanentLockedAccount(const PermanentLockedAccount& from) : PermanentLockedAccount(nullptr, from) {}
  inline PermanentLockedAccount(PermanentLockedAccount&& from) noexcept
      : PermanentLockedAccount(nullptr, std::move(from)) {}
  inline PermanentLockedAccount& operator=(const PermanentLockedAccount& from) {
    CopyFrom(from);
    return *this;
  }
  inline PermanentLockedAccount& operator=(PermanentLockedAccount&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PermanentLockedAccount& default_instance() {
    return *internal_default_instance();
  }
  static inline const PermanentLockedAccount* internal_default_instance() {
    return reinterpret_cast<const PermanentLockedAccount*>(
        &_PermanentLockedAccount_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(PermanentLockedAccount& a, PermanentLockedAccount& b) { a.Swap(&b); }
  inline void Swap(PermanentLockedAccount* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PermanentLockedAccount* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PermanentLockedAccount* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<PermanentLockedAccount>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PermanentLockedAccount& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PermanentLockedAccount& from) { PermanentLockedAccount::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(PermanentLockedAccount* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.vesting.v1beta1.PermanentLockedAccount"; }

 protected:
  explicit PermanentLockedAccount(::google::protobuf::Arena* arena);
  PermanentLockedAccount(::google::protobuf::Arena* arena, const PermanentLockedAccount& from);
  PermanentLockedAccount(::google::protobuf::Arena* arena, PermanentLockedAccount&& from) noexcept
      : PermanentLockedAccount(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kBaseVestingAccountFieldNumber = 1,
  };
  // .cosmos.vesting.v1beta1.BaseVestingAccount base_vesting_account = 1 [json_name = "baseVestingAccount", (.gogoproto.embed) = true];
  bool has_base_vesting_account() const;
  void clear_base_vesting_account() ;
  const ::cosmos::vesting::v1beta1::BaseVestingAccount& base_vesting_account() const;
  PROTOBUF_NODISCARD ::cosmos::vesting::v1beta1::BaseVestingAccount* release_base_vesting_account();
  ::cosmos::vesting::v1beta1::BaseVestingAccount* mutable_base_vesting_account();
  void set_allocated_base_vesting_account(::cosmos::vesting::v1beta1::BaseVestingAccount* value);
  void unsafe_arena_set_allocated_base_vesting_account(::cosmos::vesting::v1beta1::BaseVestingAccount* value);
  ::cosmos::vesting::v1beta1::BaseVestingAccount* unsafe_arena_release_base_vesting_account();

  private:
  const ::cosmos::vesting::v1beta1::BaseVestingAccount& _internal_base_vesting_account() const;
  ::cosmos::vesting::v1beta1::BaseVestingAccount* _internal_mutable_base_vesting_account();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.vesting.v1beta1.PermanentLockedAccount)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PermanentLockedAccount& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::cosmos::vesting::v1beta1::BaseVestingAccount* base_vesting_account_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fvesting_2fv1beta1_2fvesting_2eproto;
};
// -------------------------------------------------------------------

class PeriodicVestingAccount final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.vesting.v1beta1.PeriodicVestingAccount) */ {
 public:
  inline PeriodicVestingAccount() : PeriodicVestingAccount(nullptr) {}
  ~PeriodicVestingAccount() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(PeriodicVestingAccount* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(PeriodicVestingAccount));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PeriodicVestingAccount(
      ::google::protobuf::internal::ConstantInitialized);

  inline PeriodicVestingAccount(const PeriodicVestingAccount& from) : PeriodicVestingAccount(nullptr, from) {}
  inline PeriodicVestingAccount(PeriodicVestingAccount&& from) noexcept
      : PeriodicVestingAccount(nullptr, std::move(from)) {}
  inline PeriodicVestingAccount& operator=(const PeriodicVestingAccount& from) {
    CopyFrom(from);
    return *this;
  }
  inline PeriodicVestingAccount& operator=(PeriodicVestingAccount&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PeriodicVestingAccount& default_instance() {
    return *internal_default_instance();
  }
  static inline const PeriodicVestingAccount* internal_default_instance() {
    return reinterpret_cast<const PeriodicVestingAccount*>(
        &_PeriodicVestingAccount_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(PeriodicVestingAccount& a, PeriodicVestingAccount& b) { a.Swap(&b); }
  inline void Swap(PeriodicVestingAccount* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PeriodicVestingAccount* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PeriodicVestingAccount* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<PeriodicVestingAccount>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PeriodicVestingAccount& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PeriodicVestingAccount& from) { PeriodicVestingAccount::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(PeriodicVestingAccount* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.vesting.v1beta1.PeriodicVestingAccount"; }

 protected:
  explicit PeriodicVestingAccount(::google::protobuf::Arena* arena);
  PeriodicVestingAccount(::google::protobuf::Arena* arena, const PeriodicVestingAccount& from);
  PeriodicVestingAccount(::google::protobuf::Arena* arena, PeriodicVestingAccount&& from) noexcept
      : PeriodicVestingAccount(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kVestingPeriodsFieldNumber = 3,
    kBaseVestingAccountFieldNumber = 1,
    kStartTimeFieldNumber = 2,
  };
  // repeated .cosmos.vesting.v1beta1.Period vesting_periods = 3 [json_name = "vestingPeriods", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  int vesting_periods_size() const;
  private:
  int _internal_vesting_periods_size() const;

  public:
  void clear_vesting_periods() ;
  ::cosmos::vesting::v1beta1::Period* mutable_vesting_periods(int index);
  ::google::protobuf::RepeatedPtrField<::cosmos::vesting::v1beta1::Period>* mutable_vesting_periods();

  private:
  const ::google::protobuf::RepeatedPtrField<::cosmos::vesting::v1beta1::Period>& _internal_vesting_periods() const;
  ::google::protobuf::RepeatedPtrField<::cosmos::vesting::v1beta1::Period>* _internal_mutable_vesting_periods();
  public:
  const ::cosmos::vesting::v1beta1::Period& vesting_periods(int index) const;
  ::cosmos::vesting::v1beta1::Period* add_vesting_periods();
  const ::google::protobuf::RepeatedPtrField<::cosmos::vesting::v1beta1::Period>& vesting_periods() const;
  // .cosmos.vesting.v1beta1.BaseVestingAccount base_vesting_account = 1 [json_name = "baseVestingAccount", (.gogoproto.embed) = true];
  bool has_base_vesting_account() const;
  void clear_base_vesting_account() ;
  const ::cosmos::vesting::v1beta1::BaseVestingAccount& base_vesting_account() const;
  PROTOBUF_NODISCARD ::cosmos::vesting::v1beta1::BaseVestingAccount* release_base_vesting_account();
  ::cosmos::vesting::v1beta1::BaseVestingAccount* mutable_base_vesting_account();
  void set_allocated_base_vesting_account(::cosmos::vesting::v1beta1::BaseVestingAccount* value);
  void unsafe_arena_set_allocated_base_vesting_account(::cosmos::vesting::v1beta1::BaseVestingAccount* value);
  ::cosmos::vesting::v1beta1::BaseVestingAccount* unsafe_arena_release_base_vesting_account();

  private:
  const ::cosmos::vesting::v1beta1::BaseVestingAccount& _internal_base_vesting_account() const;
  ::cosmos::vesting::v1beta1::BaseVestingAccount* _internal_mutable_base_vesting_account();

  public:
  // int64 start_time = 2 [json_name = "startTime"];
  void clear_start_time() ;
  ::int64_t start_time() const;
  void set_start_time(::int64_t value);

  private:
  ::int64_t _internal_start_time() const;
  void _internal_set_start_time(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.vesting.v1beta1.PeriodicVestingAccount)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 2,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PeriodicVestingAccount& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::cosmos::vesting::v1beta1::Period > vesting_periods_;
    ::cosmos::vesting::v1beta1::BaseVestingAccount* base_vesting_account_;
    ::int64_t start_time_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fvesting_2fv1beta1_2fvesting_2eproto;
};
// -------------------------------------------------------------------

class DelayedVestingAccount final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.vesting.v1beta1.DelayedVestingAccount) */ {
 public:
  inline DelayedVestingAccount() : DelayedVestingAccount(nullptr) {}
  ~DelayedVestingAccount() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(DelayedVestingAccount* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(DelayedVestingAccount));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR DelayedVestingAccount(
      ::google::protobuf::internal::ConstantInitialized);

  inline DelayedVestingAccount(const DelayedVestingAccount& from) : DelayedVestingAccount(nullptr, from) {}
  inline DelayedVestingAccount(DelayedVestingAccount&& from) noexcept
      : DelayedVestingAccount(nullptr, std::move(from)) {}
  inline DelayedVestingAccount& operator=(const DelayedVestingAccount& from) {
    CopyFrom(from);
    return *this;
  }
  inline DelayedVestingAccount& operator=(DelayedVestingAccount&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DelayedVestingAccount& default_instance() {
    return *internal_default_instance();
  }
  static inline const DelayedVestingAccount* internal_default_instance() {
    return reinterpret_cast<const DelayedVestingAccount*>(
        &_DelayedVestingAccount_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(DelayedVestingAccount& a, DelayedVestingAccount& b) { a.Swap(&b); }
  inline void Swap(DelayedVestingAccount* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DelayedVestingAccount* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DelayedVestingAccount* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<DelayedVestingAccount>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DelayedVestingAccount& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const DelayedVestingAccount& from) { DelayedVestingAccount::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(DelayedVestingAccount* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.vesting.v1beta1.DelayedVestingAccount"; }

 protected:
  explicit DelayedVestingAccount(::google::protobuf::Arena* arena);
  DelayedVestingAccount(::google::protobuf::Arena* arena, const DelayedVestingAccount& from);
  DelayedVestingAccount(::google::protobuf::Arena* arena, DelayedVestingAccount&& from) noexcept
      : DelayedVestingAccount(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kBaseVestingAccountFieldNumber = 1,
  };
  // .cosmos.vesting.v1beta1.BaseVestingAccount base_vesting_account = 1 [json_name = "baseVestingAccount", (.gogoproto.embed) = true];
  bool has_base_vesting_account() const;
  void clear_base_vesting_account() ;
  const ::cosmos::vesting::v1beta1::BaseVestingAccount& base_vesting_account() const;
  PROTOBUF_NODISCARD ::cosmos::vesting::v1beta1::BaseVestingAccount* release_base_vesting_account();
  ::cosmos::vesting::v1beta1::BaseVestingAccount* mutable_base_vesting_account();
  void set_allocated_base_vesting_account(::cosmos::vesting::v1beta1::BaseVestingAccount* value);
  void unsafe_arena_set_allocated_base_vesting_account(::cosmos::vesting::v1beta1::BaseVestingAccount* value);
  ::cosmos::vesting::v1beta1::BaseVestingAccount* unsafe_arena_release_base_vesting_account();

  private:
  const ::cosmos::vesting::v1beta1::BaseVestingAccount& _internal_base_vesting_account() const;
  ::cosmos::vesting::v1beta1::BaseVestingAccount* _internal_mutable_base_vesting_account();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.vesting.v1beta1.DelayedVestingAccount)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const DelayedVestingAccount& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::cosmos::vesting::v1beta1::BaseVestingAccount* base_vesting_account_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fvesting_2fv1beta1_2fvesting_2eproto;
};
// -------------------------------------------------------------------

class ContinuousVestingAccount final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.vesting.v1beta1.ContinuousVestingAccount) */ {
 public:
  inline ContinuousVestingAccount() : ContinuousVestingAccount(nullptr) {}
  ~ContinuousVestingAccount() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ContinuousVestingAccount* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ContinuousVestingAccount));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ContinuousVestingAccount(
      ::google::protobuf::internal::ConstantInitialized);

  inline ContinuousVestingAccount(const ContinuousVestingAccount& from) : ContinuousVestingAccount(nullptr, from) {}
  inline ContinuousVestingAccount(ContinuousVestingAccount&& from) noexcept
      : ContinuousVestingAccount(nullptr, std::move(from)) {}
  inline ContinuousVestingAccount& operator=(const ContinuousVestingAccount& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContinuousVestingAccount& operator=(ContinuousVestingAccount&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ContinuousVestingAccount& default_instance() {
    return *internal_default_instance();
  }
  static inline const ContinuousVestingAccount* internal_default_instance() {
    return reinterpret_cast<const ContinuousVestingAccount*>(
        &_ContinuousVestingAccount_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(ContinuousVestingAccount& a, ContinuousVestingAccount& b) { a.Swap(&b); }
  inline void Swap(ContinuousVestingAccount* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ContinuousVestingAccount* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ContinuousVestingAccount* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ContinuousVestingAccount>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ContinuousVestingAccount& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ContinuousVestingAccount& from) { ContinuousVestingAccount::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ContinuousVestingAccount* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.vesting.v1beta1.ContinuousVestingAccount"; }

 protected:
  explicit ContinuousVestingAccount(::google::protobuf::Arena* arena);
  ContinuousVestingAccount(::google::protobuf::Arena* arena, const ContinuousVestingAccount& from);
  ContinuousVestingAccount(::google::protobuf::Arena* arena, ContinuousVestingAccount&& from) noexcept
      : ContinuousVestingAccount(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kBaseVestingAccountFieldNumber = 1,
    kStartTimeFieldNumber = 2,
  };
  // .cosmos.vesting.v1beta1.BaseVestingAccount base_vesting_account = 1 [json_name = "baseVestingAccount", (.gogoproto.embed) = true];
  bool has_base_vesting_account() const;
  void clear_base_vesting_account() ;
  const ::cosmos::vesting::v1beta1::BaseVestingAccount& base_vesting_account() const;
  PROTOBUF_NODISCARD ::cosmos::vesting::v1beta1::BaseVestingAccount* release_base_vesting_account();
  ::cosmos::vesting::v1beta1::BaseVestingAccount* mutable_base_vesting_account();
  void set_allocated_base_vesting_account(::cosmos::vesting::v1beta1::BaseVestingAccount* value);
  void unsafe_arena_set_allocated_base_vesting_account(::cosmos::vesting::v1beta1::BaseVestingAccount* value);
  ::cosmos::vesting::v1beta1::BaseVestingAccount* unsafe_arena_release_base_vesting_account();

  private:
  const ::cosmos::vesting::v1beta1::BaseVestingAccount& _internal_base_vesting_account() const;
  ::cosmos::vesting::v1beta1::BaseVestingAccount* _internal_mutable_base_vesting_account();

  public:
  // int64 start_time = 2 [json_name = "startTime"];
  void clear_start_time() ;
  ::int64_t start_time() const;
  void set_start_time(::int64_t value);

  private:
  ::int64_t _internal_start_time() const;
  void _internal_set_start_time(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.vesting.v1beta1.ContinuousVestingAccount)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ContinuousVestingAccount& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::cosmos::vesting::v1beta1::BaseVestingAccount* base_vesting_account_;
    ::int64_t start_time_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fvesting_2fv1beta1_2fvesting_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// BaseVestingAccount

// .cosmos.auth.v1beta1.BaseAccount base_account = 1 [json_name = "baseAccount", (.gogoproto.embed) = true];
inline bool BaseVestingAccount::has_base_account() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.base_account_ != nullptr);
  return value;
}
inline const ::cosmos::auth::v1beta1::BaseAccount& BaseVestingAccount::_internal_base_account() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::cosmos::auth::v1beta1::BaseAccount* p = _impl_.base_account_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::auth::v1beta1::BaseAccount&>(::cosmos::auth::v1beta1::_BaseAccount_default_instance_);
}
inline const ::cosmos::auth::v1beta1::BaseAccount& BaseVestingAccount::base_account() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.vesting.v1beta1.BaseVestingAccount.base_account)
  return _internal_base_account();
}
inline void BaseVestingAccount::unsafe_arena_set_allocated_base_account(::cosmos::auth::v1beta1::BaseAccount* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.base_account_);
  }
  _impl_.base_account_ = reinterpret_cast<::cosmos::auth::v1beta1::BaseAccount*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.vesting.v1beta1.BaseVestingAccount.base_account)
}
inline ::cosmos::auth::v1beta1::BaseAccount* BaseVestingAccount::release_base_account() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::auth::v1beta1::BaseAccount* released = _impl_.base_account_;
  _impl_.base_account_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::cosmos::auth::v1beta1::BaseAccount* BaseVestingAccount::unsafe_arena_release_base_account() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.vesting.v1beta1.BaseVestingAccount.base_account)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::auth::v1beta1::BaseAccount* temp = _impl_.base_account_;
  _impl_.base_account_ = nullptr;
  return temp;
}
inline ::cosmos::auth::v1beta1::BaseAccount* BaseVestingAccount::_internal_mutable_base_account() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.base_account_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::cosmos::auth::v1beta1::BaseAccount>(GetArena());
    _impl_.base_account_ = reinterpret_cast<::cosmos::auth::v1beta1::BaseAccount*>(p);
  }
  return _impl_.base_account_;
}
inline ::cosmos::auth::v1beta1::BaseAccount* BaseVestingAccount::mutable_base_account() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::cosmos::auth::v1beta1::BaseAccount* _msg = _internal_mutable_base_account();
  // @@protoc_insertion_point(field_mutable:cosmos.vesting.v1beta1.BaseVestingAccount.base_account)
  return _msg;
}
inline void BaseVestingAccount::set_allocated_base_account(::cosmos::auth::v1beta1::BaseAccount* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.base_account_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.base_account_ = reinterpret_cast<::cosmos::auth::v1beta1::BaseAccount*>(value);
  // @@protoc_insertion_point(field_set_allocated:cosmos.vesting.v1beta1.BaseVestingAccount.base_account)
}

// repeated .cosmos.base.v1beta1.Coin original_vesting = 2 [json_name = "originalVesting", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.encoding) = "legacy_coins", (.amino.dont_omitempty) = true];
inline int BaseVestingAccount::_internal_original_vesting_size() const {
  return _internal_original_vesting().size();
}
inline int BaseVestingAccount::original_vesting_size() const {
  return _internal_original_vesting_size();
}
inline ::cosmos::base::v1beta1::Coin* BaseVestingAccount::mutable_original_vesting(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:cosmos.vesting.v1beta1.BaseVestingAccount.original_vesting)
  return _internal_mutable_original_vesting()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::Coin>* BaseVestingAccount::mutable_original_vesting()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:cosmos.vesting.v1beta1.BaseVestingAccount.original_vesting)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_original_vesting();
}
inline const ::cosmos::base::v1beta1::Coin& BaseVestingAccount::original_vesting(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.vesting.v1beta1.BaseVestingAccount.original_vesting)
  return _internal_original_vesting().Get(index);
}
inline ::cosmos::base::v1beta1::Coin* BaseVestingAccount::add_original_vesting() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::cosmos::base::v1beta1::Coin* _add = _internal_mutable_original_vesting()->Add();
  // @@protoc_insertion_point(field_add:cosmos.vesting.v1beta1.BaseVestingAccount.original_vesting)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::Coin>& BaseVestingAccount::original_vesting() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:cosmos.vesting.v1beta1.BaseVestingAccount.original_vesting)
  return _internal_original_vesting();
}
inline const ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::Coin>&
BaseVestingAccount::_internal_original_vesting() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.original_vesting_;
}
inline ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::Coin>*
BaseVestingAccount::_internal_mutable_original_vesting() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.original_vesting_;
}

// repeated .cosmos.base.v1beta1.Coin delegated_free = 3 [json_name = "delegatedFree", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.encoding) = "legacy_coins", (.amino.dont_omitempty) = true];
inline int BaseVestingAccount::_internal_delegated_free_size() const {
  return _internal_delegated_free().size();
}
inline int BaseVestingAccount::delegated_free_size() const {
  return _internal_delegated_free_size();
}
inline ::cosmos::base::v1beta1::Coin* BaseVestingAccount::mutable_delegated_free(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:cosmos.vesting.v1beta1.BaseVestingAccount.delegated_free)
  return _internal_mutable_delegated_free()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::Coin>* BaseVestingAccount::mutable_delegated_free()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:cosmos.vesting.v1beta1.BaseVestingAccount.delegated_free)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_delegated_free();
}
inline const ::cosmos::base::v1beta1::Coin& BaseVestingAccount::delegated_free(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.vesting.v1beta1.BaseVestingAccount.delegated_free)
  return _internal_delegated_free().Get(index);
}
inline ::cosmos::base::v1beta1::Coin* BaseVestingAccount::add_delegated_free() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::cosmos::base::v1beta1::Coin* _add = _internal_mutable_delegated_free()->Add();
  // @@protoc_insertion_point(field_add:cosmos.vesting.v1beta1.BaseVestingAccount.delegated_free)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::Coin>& BaseVestingAccount::delegated_free() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:cosmos.vesting.v1beta1.BaseVestingAccount.delegated_free)
  return _internal_delegated_free();
}
inline const ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::Coin>&
BaseVestingAccount::_internal_delegated_free() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.delegated_free_;
}
inline ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::Coin>*
BaseVestingAccount::_internal_mutable_delegated_free() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.delegated_free_;
}

// repeated .cosmos.base.v1beta1.Coin delegated_vesting = 4 [json_name = "delegatedVesting", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.encoding) = "legacy_coins", (.amino.dont_omitempty) = true];
inline int BaseVestingAccount::_internal_delegated_vesting_size() const {
  return _internal_delegated_vesting().size();
}
inline int BaseVestingAccount::delegated_vesting_size() const {
  return _internal_delegated_vesting_size();
}
inline ::cosmos::base::v1beta1::Coin* BaseVestingAccount::mutable_delegated_vesting(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:cosmos.vesting.v1beta1.BaseVestingAccount.delegated_vesting)
  return _internal_mutable_delegated_vesting()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::Coin>* BaseVestingAccount::mutable_delegated_vesting()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:cosmos.vesting.v1beta1.BaseVestingAccount.delegated_vesting)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_delegated_vesting();
}
inline const ::cosmos::base::v1beta1::Coin& BaseVestingAccount::delegated_vesting(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.vesting.v1beta1.BaseVestingAccount.delegated_vesting)
  return _internal_delegated_vesting().Get(index);
}
inline ::cosmos::base::v1beta1::Coin* BaseVestingAccount::add_delegated_vesting() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::cosmos::base::v1beta1::Coin* _add = _internal_mutable_delegated_vesting()->Add();
  // @@protoc_insertion_point(field_add:cosmos.vesting.v1beta1.BaseVestingAccount.delegated_vesting)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::Coin>& BaseVestingAccount::delegated_vesting() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:cosmos.vesting.v1beta1.BaseVestingAccount.delegated_vesting)
  return _internal_delegated_vesting();
}
inline const ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::Coin>&
BaseVestingAccount::_internal_delegated_vesting() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.delegated_vesting_;
}
inline ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::Coin>*
BaseVestingAccount::_internal_mutable_delegated_vesting() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.delegated_vesting_;
}

// int64 end_time = 5 [json_name = "endTime"];
inline void BaseVestingAccount::clear_end_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.end_time_ = ::int64_t{0};
}
inline ::int64_t BaseVestingAccount::end_time() const {
  // @@protoc_insertion_point(field_get:cosmos.vesting.v1beta1.BaseVestingAccount.end_time)
  return _internal_end_time();
}
inline void BaseVestingAccount::set_end_time(::int64_t value) {
  _internal_set_end_time(value);
  // @@protoc_insertion_point(field_set:cosmos.vesting.v1beta1.BaseVestingAccount.end_time)
}
inline ::int64_t BaseVestingAccount::_internal_end_time() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.end_time_;
}
inline void BaseVestingAccount::_internal_set_end_time(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.end_time_ = value;
}

// -------------------------------------------------------------------

// ContinuousVestingAccount

// .cosmos.vesting.v1beta1.BaseVestingAccount base_vesting_account = 1 [json_name = "baseVestingAccount", (.gogoproto.embed) = true];
inline bool ContinuousVestingAccount::has_base_vesting_account() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.base_vesting_account_ != nullptr);
  return value;
}
inline void ContinuousVestingAccount::clear_base_vesting_account() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.base_vesting_account_ != nullptr) _impl_.base_vesting_account_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::cosmos::vesting::v1beta1::BaseVestingAccount& ContinuousVestingAccount::_internal_base_vesting_account() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::cosmos::vesting::v1beta1::BaseVestingAccount* p = _impl_.base_vesting_account_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::vesting::v1beta1::BaseVestingAccount&>(::cosmos::vesting::v1beta1::_BaseVestingAccount_default_instance_);
}
inline const ::cosmos::vesting::v1beta1::BaseVestingAccount& ContinuousVestingAccount::base_vesting_account() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.vesting.v1beta1.ContinuousVestingAccount.base_vesting_account)
  return _internal_base_vesting_account();
}
inline void ContinuousVestingAccount::unsafe_arena_set_allocated_base_vesting_account(::cosmos::vesting::v1beta1::BaseVestingAccount* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.base_vesting_account_);
  }
  _impl_.base_vesting_account_ = reinterpret_cast<::cosmos::vesting::v1beta1::BaseVestingAccount*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.vesting.v1beta1.ContinuousVestingAccount.base_vesting_account)
}
inline ::cosmos::vesting::v1beta1::BaseVestingAccount* ContinuousVestingAccount::release_base_vesting_account() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::vesting::v1beta1::BaseVestingAccount* released = _impl_.base_vesting_account_;
  _impl_.base_vesting_account_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::cosmos::vesting::v1beta1::BaseVestingAccount* ContinuousVestingAccount::unsafe_arena_release_base_vesting_account() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.vesting.v1beta1.ContinuousVestingAccount.base_vesting_account)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::vesting::v1beta1::BaseVestingAccount* temp = _impl_.base_vesting_account_;
  _impl_.base_vesting_account_ = nullptr;
  return temp;
}
inline ::cosmos::vesting::v1beta1::BaseVestingAccount* ContinuousVestingAccount::_internal_mutable_base_vesting_account() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.base_vesting_account_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::cosmos::vesting::v1beta1::BaseVestingAccount>(GetArena());
    _impl_.base_vesting_account_ = reinterpret_cast<::cosmos::vesting::v1beta1::BaseVestingAccount*>(p);
  }
  return _impl_.base_vesting_account_;
}
inline ::cosmos::vesting::v1beta1::BaseVestingAccount* ContinuousVestingAccount::mutable_base_vesting_account() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::cosmos::vesting::v1beta1::BaseVestingAccount* _msg = _internal_mutable_base_vesting_account();
  // @@protoc_insertion_point(field_mutable:cosmos.vesting.v1beta1.ContinuousVestingAccount.base_vesting_account)
  return _msg;
}
inline void ContinuousVestingAccount::set_allocated_base_vesting_account(::cosmos::vesting::v1beta1::BaseVestingAccount* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.base_vesting_account_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.base_vesting_account_ = reinterpret_cast<::cosmos::vesting::v1beta1::BaseVestingAccount*>(value);
  // @@protoc_insertion_point(field_set_allocated:cosmos.vesting.v1beta1.ContinuousVestingAccount.base_vesting_account)
}

// int64 start_time = 2 [json_name = "startTime"];
inline void ContinuousVestingAccount::clear_start_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.start_time_ = ::int64_t{0};
}
inline ::int64_t ContinuousVestingAccount::start_time() const {
  // @@protoc_insertion_point(field_get:cosmos.vesting.v1beta1.ContinuousVestingAccount.start_time)
  return _internal_start_time();
}
inline void ContinuousVestingAccount::set_start_time(::int64_t value) {
  _internal_set_start_time(value);
  // @@protoc_insertion_point(field_set:cosmos.vesting.v1beta1.ContinuousVestingAccount.start_time)
}
inline ::int64_t ContinuousVestingAccount::_internal_start_time() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.start_time_;
}
inline void ContinuousVestingAccount::_internal_set_start_time(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.start_time_ = value;
}

// -------------------------------------------------------------------

// DelayedVestingAccount

// .cosmos.vesting.v1beta1.BaseVestingAccount base_vesting_account = 1 [json_name = "baseVestingAccount", (.gogoproto.embed) = true];
inline bool DelayedVestingAccount::has_base_vesting_account() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.base_vesting_account_ != nullptr);
  return value;
}
inline void DelayedVestingAccount::clear_base_vesting_account() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.base_vesting_account_ != nullptr) _impl_.base_vesting_account_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::cosmos::vesting::v1beta1::BaseVestingAccount& DelayedVestingAccount::_internal_base_vesting_account() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::cosmos::vesting::v1beta1::BaseVestingAccount* p = _impl_.base_vesting_account_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::vesting::v1beta1::BaseVestingAccount&>(::cosmos::vesting::v1beta1::_BaseVestingAccount_default_instance_);
}
inline const ::cosmos::vesting::v1beta1::BaseVestingAccount& DelayedVestingAccount::base_vesting_account() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.vesting.v1beta1.DelayedVestingAccount.base_vesting_account)
  return _internal_base_vesting_account();
}
inline void DelayedVestingAccount::unsafe_arena_set_allocated_base_vesting_account(::cosmos::vesting::v1beta1::BaseVestingAccount* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.base_vesting_account_);
  }
  _impl_.base_vesting_account_ = reinterpret_cast<::cosmos::vesting::v1beta1::BaseVestingAccount*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.vesting.v1beta1.DelayedVestingAccount.base_vesting_account)
}
inline ::cosmos::vesting::v1beta1::BaseVestingAccount* DelayedVestingAccount::release_base_vesting_account() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::vesting::v1beta1::BaseVestingAccount* released = _impl_.base_vesting_account_;
  _impl_.base_vesting_account_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::cosmos::vesting::v1beta1::BaseVestingAccount* DelayedVestingAccount::unsafe_arena_release_base_vesting_account() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.vesting.v1beta1.DelayedVestingAccount.base_vesting_account)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::vesting::v1beta1::BaseVestingAccount* temp = _impl_.base_vesting_account_;
  _impl_.base_vesting_account_ = nullptr;
  return temp;
}
inline ::cosmos::vesting::v1beta1::BaseVestingAccount* DelayedVestingAccount::_internal_mutable_base_vesting_account() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.base_vesting_account_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::cosmos::vesting::v1beta1::BaseVestingAccount>(GetArena());
    _impl_.base_vesting_account_ = reinterpret_cast<::cosmos::vesting::v1beta1::BaseVestingAccount*>(p);
  }
  return _impl_.base_vesting_account_;
}
inline ::cosmos::vesting::v1beta1::BaseVestingAccount* DelayedVestingAccount::mutable_base_vesting_account() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::cosmos::vesting::v1beta1::BaseVestingAccount* _msg = _internal_mutable_base_vesting_account();
  // @@protoc_insertion_point(field_mutable:cosmos.vesting.v1beta1.DelayedVestingAccount.base_vesting_account)
  return _msg;
}
inline void DelayedVestingAccount::set_allocated_base_vesting_account(::cosmos::vesting::v1beta1::BaseVestingAccount* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.base_vesting_account_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.base_vesting_account_ = reinterpret_cast<::cosmos::vesting::v1beta1::BaseVestingAccount*>(value);
  // @@protoc_insertion_point(field_set_allocated:cosmos.vesting.v1beta1.DelayedVestingAccount.base_vesting_account)
}

// -------------------------------------------------------------------

// Period

// int64 length = 1 [json_name = "length"];
inline void Period::clear_length() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.length_ = ::int64_t{0};
}
inline ::int64_t Period::length() const {
  // @@protoc_insertion_point(field_get:cosmos.vesting.v1beta1.Period.length)
  return _internal_length();
}
inline void Period::set_length(::int64_t value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:cosmos.vesting.v1beta1.Period.length)
}
inline ::int64_t Period::_internal_length() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.length_;
}
inline void Period::_internal_set_length(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.length_ = value;
}

// repeated .cosmos.base.v1beta1.Coin amount = 2 [json_name = "amount", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.encoding) = "legacy_coins", (.amino.dont_omitempty) = true];
inline int Period::_internal_amount_size() const {
  return _internal_amount().size();
}
inline int Period::amount_size() const {
  return _internal_amount_size();
}
inline ::cosmos::base::v1beta1::Coin* Period::mutable_amount(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:cosmos.vesting.v1beta1.Period.amount)
  return _internal_mutable_amount()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::Coin>* Period::mutable_amount()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:cosmos.vesting.v1beta1.Period.amount)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_amount();
}
inline const ::cosmos::base::v1beta1::Coin& Period::amount(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.vesting.v1beta1.Period.amount)
  return _internal_amount().Get(index);
}
inline ::cosmos::base::v1beta1::Coin* Period::add_amount() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::cosmos::base::v1beta1::Coin* _add = _internal_mutable_amount()->Add();
  // @@protoc_insertion_point(field_add:cosmos.vesting.v1beta1.Period.amount)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::Coin>& Period::amount() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:cosmos.vesting.v1beta1.Period.amount)
  return _internal_amount();
}
inline const ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::Coin>&
Period::_internal_amount() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.amount_;
}
inline ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::Coin>*
Period::_internal_mutable_amount() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.amount_;
}

// -------------------------------------------------------------------

// PeriodicVestingAccount

// .cosmos.vesting.v1beta1.BaseVestingAccount base_vesting_account = 1 [json_name = "baseVestingAccount", (.gogoproto.embed) = true];
inline bool PeriodicVestingAccount::has_base_vesting_account() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.base_vesting_account_ != nullptr);
  return value;
}
inline void PeriodicVestingAccount::clear_base_vesting_account() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.base_vesting_account_ != nullptr) _impl_.base_vesting_account_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::cosmos::vesting::v1beta1::BaseVestingAccount& PeriodicVestingAccount::_internal_base_vesting_account() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::cosmos::vesting::v1beta1::BaseVestingAccount* p = _impl_.base_vesting_account_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::vesting::v1beta1::BaseVestingAccount&>(::cosmos::vesting::v1beta1::_BaseVestingAccount_default_instance_);
}
inline const ::cosmos::vesting::v1beta1::BaseVestingAccount& PeriodicVestingAccount::base_vesting_account() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.vesting.v1beta1.PeriodicVestingAccount.base_vesting_account)
  return _internal_base_vesting_account();
}
inline void PeriodicVestingAccount::unsafe_arena_set_allocated_base_vesting_account(::cosmos::vesting::v1beta1::BaseVestingAccount* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.base_vesting_account_);
  }
  _impl_.base_vesting_account_ = reinterpret_cast<::cosmos::vesting::v1beta1::BaseVestingAccount*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.vesting.v1beta1.PeriodicVestingAccount.base_vesting_account)
}
inline ::cosmos::vesting::v1beta1::BaseVestingAccount* PeriodicVestingAccount::release_base_vesting_account() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::vesting::v1beta1::BaseVestingAccount* released = _impl_.base_vesting_account_;
  _impl_.base_vesting_account_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::cosmos::vesting::v1beta1::BaseVestingAccount* PeriodicVestingAccount::unsafe_arena_release_base_vesting_account() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.vesting.v1beta1.PeriodicVestingAccount.base_vesting_account)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::vesting::v1beta1::BaseVestingAccount* temp = _impl_.base_vesting_account_;
  _impl_.base_vesting_account_ = nullptr;
  return temp;
}
inline ::cosmos::vesting::v1beta1::BaseVestingAccount* PeriodicVestingAccount::_internal_mutable_base_vesting_account() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.base_vesting_account_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::cosmos::vesting::v1beta1::BaseVestingAccount>(GetArena());
    _impl_.base_vesting_account_ = reinterpret_cast<::cosmos::vesting::v1beta1::BaseVestingAccount*>(p);
  }
  return _impl_.base_vesting_account_;
}
inline ::cosmos::vesting::v1beta1::BaseVestingAccount* PeriodicVestingAccount::mutable_base_vesting_account() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::cosmos::vesting::v1beta1::BaseVestingAccount* _msg = _internal_mutable_base_vesting_account();
  // @@protoc_insertion_point(field_mutable:cosmos.vesting.v1beta1.PeriodicVestingAccount.base_vesting_account)
  return _msg;
}
inline void PeriodicVestingAccount::set_allocated_base_vesting_account(::cosmos::vesting::v1beta1::BaseVestingAccount* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.base_vesting_account_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.base_vesting_account_ = reinterpret_cast<::cosmos::vesting::v1beta1::BaseVestingAccount*>(value);
  // @@protoc_insertion_point(field_set_allocated:cosmos.vesting.v1beta1.PeriodicVestingAccount.base_vesting_account)
}

// int64 start_time = 2 [json_name = "startTime"];
inline void PeriodicVestingAccount::clear_start_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.start_time_ = ::int64_t{0};
}
inline ::int64_t PeriodicVestingAccount::start_time() const {
  // @@protoc_insertion_point(field_get:cosmos.vesting.v1beta1.PeriodicVestingAccount.start_time)
  return _internal_start_time();
}
inline void PeriodicVestingAccount::set_start_time(::int64_t value) {
  _internal_set_start_time(value);
  // @@protoc_insertion_point(field_set:cosmos.vesting.v1beta1.PeriodicVestingAccount.start_time)
}
inline ::int64_t PeriodicVestingAccount::_internal_start_time() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.start_time_;
}
inline void PeriodicVestingAccount::_internal_set_start_time(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.start_time_ = value;
}

// repeated .cosmos.vesting.v1beta1.Period vesting_periods = 3 [json_name = "vestingPeriods", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
inline int PeriodicVestingAccount::_internal_vesting_periods_size() const {
  return _internal_vesting_periods().size();
}
inline int PeriodicVestingAccount::vesting_periods_size() const {
  return _internal_vesting_periods_size();
}
inline void PeriodicVestingAccount::clear_vesting_periods() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.vesting_periods_.Clear();
}
inline ::cosmos::vesting::v1beta1::Period* PeriodicVestingAccount::mutable_vesting_periods(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:cosmos.vesting.v1beta1.PeriodicVestingAccount.vesting_periods)
  return _internal_mutable_vesting_periods()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::cosmos::vesting::v1beta1::Period>* PeriodicVestingAccount::mutable_vesting_periods()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:cosmos.vesting.v1beta1.PeriodicVestingAccount.vesting_periods)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_vesting_periods();
}
inline const ::cosmos::vesting::v1beta1::Period& PeriodicVestingAccount::vesting_periods(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.vesting.v1beta1.PeriodicVestingAccount.vesting_periods)
  return _internal_vesting_periods().Get(index);
}
inline ::cosmos::vesting::v1beta1::Period* PeriodicVestingAccount::add_vesting_periods() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::cosmos::vesting::v1beta1::Period* _add = _internal_mutable_vesting_periods()->Add();
  // @@protoc_insertion_point(field_add:cosmos.vesting.v1beta1.PeriodicVestingAccount.vesting_periods)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::cosmos::vesting::v1beta1::Period>& PeriodicVestingAccount::vesting_periods() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:cosmos.vesting.v1beta1.PeriodicVestingAccount.vesting_periods)
  return _internal_vesting_periods();
}
inline const ::google::protobuf::RepeatedPtrField<::cosmos::vesting::v1beta1::Period>&
PeriodicVestingAccount::_internal_vesting_periods() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.vesting_periods_;
}
inline ::google::protobuf::RepeatedPtrField<::cosmos::vesting::v1beta1::Period>*
PeriodicVestingAccount::_internal_mutable_vesting_periods() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.vesting_periods_;
}

// -------------------------------------------------------------------

// PermanentLockedAccount

// .cosmos.vesting.v1beta1.BaseVestingAccount base_vesting_account = 1 [json_name = "baseVestingAccount", (.gogoproto.embed) = true];
inline bool PermanentLockedAccount::has_base_vesting_account() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.base_vesting_account_ != nullptr);
  return value;
}
inline void PermanentLockedAccount::clear_base_vesting_account() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.base_vesting_account_ != nullptr) _impl_.base_vesting_account_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::cosmos::vesting::v1beta1::BaseVestingAccount& PermanentLockedAccount::_internal_base_vesting_account() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::cosmos::vesting::v1beta1::BaseVestingAccount* p = _impl_.base_vesting_account_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::vesting::v1beta1::BaseVestingAccount&>(::cosmos::vesting::v1beta1::_BaseVestingAccount_default_instance_);
}
inline const ::cosmos::vesting::v1beta1::BaseVestingAccount& PermanentLockedAccount::base_vesting_account() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.vesting.v1beta1.PermanentLockedAccount.base_vesting_account)
  return _internal_base_vesting_account();
}
inline void PermanentLockedAccount::unsafe_arena_set_allocated_base_vesting_account(::cosmos::vesting::v1beta1::BaseVestingAccount* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.base_vesting_account_);
  }
  _impl_.base_vesting_account_ = reinterpret_cast<::cosmos::vesting::v1beta1::BaseVestingAccount*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.vesting.v1beta1.PermanentLockedAccount.base_vesting_account)
}
inline ::cosmos::vesting::v1beta1::BaseVestingAccount* PermanentLockedAccount::release_base_vesting_account() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::vesting::v1beta1::BaseVestingAccount* released = _impl_.base_vesting_account_;
  _impl_.base_vesting_account_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::cosmos::vesting::v1beta1::BaseVestingAccount* PermanentLockedAccount::unsafe_arena_release_base_vesting_account() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.vesting.v1beta1.PermanentLockedAccount.base_vesting_account)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::vesting::v1beta1::BaseVestingAccount* temp = _impl_.base_vesting_account_;
  _impl_.base_vesting_account_ = nullptr;
  return temp;
}
inline ::cosmos::vesting::v1beta1::BaseVestingAccount* PermanentLockedAccount::_internal_mutable_base_vesting_account() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.base_vesting_account_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::cosmos::vesting::v1beta1::BaseVestingAccount>(GetArena());
    _impl_.base_vesting_account_ = reinterpret_cast<::cosmos::vesting::v1beta1::BaseVestingAccount*>(p);
  }
  return _impl_.base_vesting_account_;
}
inline ::cosmos::vesting::v1beta1::BaseVestingAccount* PermanentLockedAccount::mutable_base_vesting_account() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::cosmos::vesting::v1beta1::BaseVestingAccount* _msg = _internal_mutable_base_vesting_account();
  // @@protoc_insertion_point(field_mutable:cosmos.vesting.v1beta1.PermanentLockedAccount.base_vesting_account)
  return _msg;
}
inline void PermanentLockedAccount::set_allocated_base_vesting_account(::cosmos::vesting::v1beta1::BaseVestingAccount* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.base_vesting_account_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.base_vesting_account_ = reinterpret_cast<::cosmos::vesting::v1beta1::BaseVestingAccount*>(value);
  // @@protoc_insertion_point(field_set_allocated:cosmos.vesting.v1beta1.PermanentLockedAccount.base_vesting_account)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace vesting
}  // namespace cosmos


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // cosmos_2fvesting_2fv1beta1_2fvesting_2eproto_2epb_2eh
