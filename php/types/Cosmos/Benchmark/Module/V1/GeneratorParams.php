<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# NO CHECKED-IN PROTOBUF GENCODE
# source: cosmos/benchmark/module/v1/module.proto

namespace Cosmos\Benchmark\Module\V1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * GenesisParams defines the genesis parameters for the benchmark module.
 *
 * Generated from protobuf message <code>cosmos.benchmark.module.v1.GeneratorParams</code>
 */
class GeneratorParams extends \Google\Protobuf\Internal\Message
{
    /**
     * seed is the seed for the random number generator.
     *
     * Generated from protobuf field <code>uint64 seed = 1 [json_name = "seed"];</code>
     */
    protected $seed = 0;
    /**
     * bucket_count is the number of store keys to uniformly distribute genesis_count keys across.
     *
     * Generated from protobuf field <code>uint64 bucket_count = 2 [json_name = "bucketCount"];</code>
     */
    protected $bucket_count = 0;
    /**
     * key_mean is the mean size (in normal distribution) of keys in each bucket.
     *
     * Generated from protobuf field <code>uint64 key_mean = 3 [json_name = "keyMean"];</code>
     */
    protected $key_mean = 0;
    /**
     * key_std_dev is the standard deviation of key sizes in each bucket.
     *
     * Generated from protobuf field <code>uint64 key_std_dev = 4 [json_name = "keyStdDev"];</code>
     */
    protected $key_std_dev = 0;
    /**
     * value_mean is the mean size (in normal distribution) of values in each bucket.
     *
     * Generated from protobuf field <code>uint64 value_mean = 6 [json_name = "valueMean"];</code>
     */
    protected $value_mean = 0;
    /**
     * value_std_dev is the standard deviation of value sizes in each bucket.
     *
     * Generated from protobuf field <code>uint64 value_std_dev = 7 [json_name = "valueStdDev"];</code>
     */
    protected $value_std_dev = 0;
    /**
     * genesis_count is the number of keys to insert in the store, distributed across all buckets.
     *
     * Generated from protobuf field <code>uint64 genesis_count = 8 [json_name = "genesisCount"];</code>
     */
    protected $genesis_count = 0;
    /**
     * insert_weight is the weight of insert operations.
     *
     * Generated from protobuf field <code>float insert_weight = 9 [json_name = "insertWeight"];</code>
     */
    protected $insert_weight = 0.0;
    /**
     * update_weight is the weight of update operations.
     *
     * Generated from protobuf field <code>float update_weight = 10 [json_name = "updateWeight"];</code>
     */
    protected $update_weight = 0.0;
    /**
     * get_weight is the weight of get operations.
     *
     * Generated from protobuf field <code>float get_weight = 12 [json_name = "getWeight"];</code>
     */
    protected $get_weight = 0.0;
    /**
     * delete_weight is the weight of delete operations.
     *
     * Generated from protobuf field <code>float delete_weight = 11 [json_name = "deleteWeight"];</code>
     */
    protected $delete_weight = 0.0;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type int|string $seed
     *           seed is the seed for the random number generator.
     *     @type int|string $bucket_count
     *           bucket_count is the number of store keys to uniformly distribute genesis_count keys across.
     *     @type int|string $key_mean
     *           key_mean is the mean size (in normal distribution) of keys in each bucket.
     *     @type int|string $key_std_dev
     *           key_std_dev is the standard deviation of key sizes in each bucket.
     *     @type int|string $value_mean
     *           value_mean is the mean size (in normal distribution) of values in each bucket.
     *     @type int|string $value_std_dev
     *           value_std_dev is the standard deviation of value sizes in each bucket.
     *     @type int|string $genesis_count
     *           genesis_count is the number of keys to insert in the store, distributed across all buckets.
     *     @type float $insert_weight
     *           insert_weight is the weight of insert operations.
     *     @type float $update_weight
     *           update_weight is the weight of update operations.
     *     @type float $get_weight
     *           get_weight is the weight of get operations.
     *     @type float $delete_weight
     *           delete_weight is the weight of delete operations.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Cosmos\Benchmark\Module\V1\Module::initOnce();
        parent::__construct($data);
    }

    /**
     * seed is the seed for the random number generator.
     *
     * Generated from protobuf field <code>uint64 seed = 1 [json_name = "seed"];</code>
     * @return int|string
     */
    public function getSeed()
    {
        return $this->seed;
    }

    /**
     * seed is the seed for the random number generator.
     *
     * Generated from protobuf field <code>uint64 seed = 1 [json_name = "seed"];</code>
     * @param int|string $var
     * @return $this
     */
    public function setSeed($var)
    {
        GPBUtil::checkUint64($var);
        $this->seed = $var;

        return $this;
    }

    /**
     * bucket_count is the number of store keys to uniformly distribute genesis_count keys across.
     *
     * Generated from protobuf field <code>uint64 bucket_count = 2 [json_name = "bucketCount"];</code>
     * @return int|string
     */
    public function getBucketCount()
    {
        return $this->bucket_count;
    }

    /**
     * bucket_count is the number of store keys to uniformly distribute genesis_count keys across.
     *
     * Generated from protobuf field <code>uint64 bucket_count = 2 [json_name = "bucketCount"];</code>
     * @param int|string $var
     * @return $this
     */
    public function setBucketCount($var)
    {
        GPBUtil::checkUint64($var);
        $this->bucket_count = $var;

        return $this;
    }

    /**
     * key_mean is the mean size (in normal distribution) of keys in each bucket.
     *
     * Generated from protobuf field <code>uint64 key_mean = 3 [json_name = "keyMean"];</code>
     * @return int|string
     */
    public function getKeyMean()
    {
        return $this->key_mean;
    }

    /**
     * key_mean is the mean size (in normal distribution) of keys in each bucket.
     *
     * Generated from protobuf field <code>uint64 key_mean = 3 [json_name = "keyMean"];</code>
     * @param int|string $var
     * @return $this
     */
    public function setKeyMean($var)
    {
        GPBUtil::checkUint64($var);
        $this->key_mean = $var;

        return $this;
    }

    /**
     * key_std_dev is the standard deviation of key sizes in each bucket.
     *
     * Generated from protobuf field <code>uint64 key_std_dev = 4 [json_name = "keyStdDev"];</code>
     * @return int|string
     */
    public function getKeyStdDev()
    {
        return $this->key_std_dev;
    }

    /**
     * key_std_dev is the standard deviation of key sizes in each bucket.
     *
     * Generated from protobuf field <code>uint64 key_std_dev = 4 [json_name = "keyStdDev"];</code>
     * @param int|string $var
     * @return $this
     */
    public function setKeyStdDev($var)
    {
        GPBUtil::checkUint64($var);
        $this->key_std_dev = $var;

        return $this;
    }

    /**
     * value_mean is the mean size (in normal distribution) of values in each bucket.
     *
     * Generated from protobuf field <code>uint64 value_mean = 6 [json_name = "valueMean"];</code>
     * @return int|string
     */
    public function getValueMean()
    {
        return $this->value_mean;
    }

    /**
     * value_mean is the mean size (in normal distribution) of values in each bucket.
     *
     * Generated from protobuf field <code>uint64 value_mean = 6 [json_name = "valueMean"];</code>
     * @param int|string $var
     * @return $this
     */
    public function setValueMean($var)
    {
        GPBUtil::checkUint64($var);
        $this->value_mean = $var;

        return $this;
    }

    /**
     * value_std_dev is the standard deviation of value sizes in each bucket.
     *
     * Generated from protobuf field <code>uint64 value_std_dev = 7 [json_name = "valueStdDev"];</code>
     * @return int|string
     */
    public function getValueStdDev()
    {
        return $this->value_std_dev;
    }

    /**
     * value_std_dev is the standard deviation of value sizes in each bucket.
     *
     * Generated from protobuf field <code>uint64 value_std_dev = 7 [json_name = "valueStdDev"];</code>
     * @param int|string $var
     * @return $this
     */
    public function setValueStdDev($var)
    {
        GPBUtil::checkUint64($var);
        $this->value_std_dev = $var;

        return $this;
    }

    /**
     * genesis_count is the number of keys to insert in the store, distributed across all buckets.
     *
     * Generated from protobuf field <code>uint64 genesis_count = 8 [json_name = "genesisCount"];</code>
     * @return int|string
     */
    public function getGenesisCount()
    {
        return $this->genesis_count;
    }

    /**
     * genesis_count is the number of keys to insert in the store, distributed across all buckets.
     *
     * Generated from protobuf field <code>uint64 genesis_count = 8 [json_name = "genesisCount"];</code>
     * @param int|string $var
     * @return $this
     */
    public function setGenesisCount($var)
    {
        GPBUtil::checkUint64($var);
        $this->genesis_count = $var;

        return $this;
    }

    /**
     * insert_weight is the weight of insert operations.
     *
     * Generated from protobuf field <code>float insert_weight = 9 [json_name = "insertWeight"];</code>
     * @return float
     */
    public function getInsertWeight()
    {
        return $this->insert_weight;
    }

    /**
     * insert_weight is the weight of insert operations.
     *
     * Generated from protobuf field <code>float insert_weight = 9 [json_name = "insertWeight"];</code>
     * @param float $var
     * @return $this
     */
    public function setInsertWeight($var)
    {
        GPBUtil::checkFloat($var);
        $this->insert_weight = $var;

        return $this;
    }

    /**
     * update_weight is the weight of update operations.
     *
     * Generated from protobuf field <code>float update_weight = 10 [json_name = "updateWeight"];</code>
     * @return float
     */
    public function getUpdateWeight()
    {
        return $this->update_weight;
    }

    /**
     * update_weight is the weight of update operations.
     *
     * Generated from protobuf field <code>float update_weight = 10 [json_name = "updateWeight"];</code>
     * @param float $var
     * @return $this
     */
    public function setUpdateWeight($var)
    {
        GPBUtil::checkFloat($var);
        $this->update_weight = $var;

        return $this;
    }

    /**
     * get_weight is the weight of get operations.
     *
     * Generated from protobuf field <code>float get_weight = 12 [json_name = "getWeight"];</code>
     * @return float
     */
    public function getGetWeight()
    {
        return $this->get_weight;
    }

    /**
     * get_weight is the weight of get operations.
     *
     * Generated from protobuf field <code>float get_weight = 12 [json_name = "getWeight"];</code>
     * @param float $var
     * @return $this
     */
    public function setGetWeight($var)
    {
        GPBUtil::checkFloat($var);
        $this->get_weight = $var;

        return $this;
    }

    /**
     * delete_weight is the weight of delete operations.
     *
     * Generated from protobuf field <code>float delete_weight = 11 [json_name = "deleteWeight"];</code>
     * @return float
     */
    public function getDeleteWeight()
    {
        return $this->delete_weight;
    }

    /**
     * delete_weight is the weight of delete operations.
     *
     * Generated from protobuf field <code>float delete_weight = 11 [json_name = "deleteWeight"];</code>
     * @param float $var
     * @return $this
     */
    public function setDeleteWeight($var)
    {
        GPBUtil::checkFloat($var);
        $this->delete_weight = $var;

        return $this;
    }

}

