<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# NO CHECKED-IN PROTOBUF GENCODE
# source: cosmos/app/v1alpha1/config.proto

namespace Cosmos\App\V1alpha1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * ModuleConfig is a module configuration for an app.
 *
 * Generated from protobuf message <code>cosmos.app.v1alpha1.ModuleConfig</code>
 */
class ModuleConfig extends \Google\Protobuf\Internal\Message
{
    /**
     * name is the unique name of the module within the app. It should be a name
     * that persists between different versions of a module so that modules
     * can be smoothly upgraded to new versions.
     * For example, for the module cosmos.bank.module.v1.Module, we may chose
     * to simply name the module "bank" in the app. When we upgrade to
     * cosmos.bank.module.v2.Module, the app-specific name "bank" stays the same
     * and the framework knows that the v2 module should receive all the same state
     * that the v1 module had. Note: modules should provide info on which versions
     * they can migrate from in the ModuleDescriptor.can_migration_from field.
     *
     * Generated from protobuf field <code>string name = 1 [json_name = "name"];</code>
     */
    protected $name = '';
    /**
     * config is the config object for the module. Module config messages should
     * define a ModuleDescriptor using the cosmos.app.v1alpha1.is_module extension.
     *
     * Generated from protobuf field <code>.google.protobuf.Any config = 2 [json_name = "config"];</code>
     */
    protected $config = null;
    /**
     * golang_bindings specifies explicit interface to implementation type bindings which
     * depinject uses to resolve interface inputs to provider functions.  The scope of this
     * field's configuration is module specific.
     *
     * Generated from protobuf field <code>repeated .cosmos.app.v1alpha1.GolangBinding golang_bindings = 3 [json_name = "golangBindings"];</code>
     */
    private $golang_bindings;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $name
     *           name is the unique name of the module within the app. It should be a name
     *           that persists between different versions of a module so that modules
     *           can be smoothly upgraded to new versions.
     *           For example, for the module cosmos.bank.module.v1.Module, we may chose
     *           to simply name the module "bank" in the app. When we upgrade to
     *           cosmos.bank.module.v2.Module, the app-specific name "bank" stays the same
     *           and the framework knows that the v2 module should receive all the same state
     *           that the v1 module had. Note: modules should provide info on which versions
     *           they can migrate from in the ModuleDescriptor.can_migration_from field.
     *     @type \Google\Protobuf\Any $config
     *           config is the config object for the module. Module config messages should
     *           define a ModuleDescriptor using the cosmos.app.v1alpha1.is_module extension.
     *     @type array<\Cosmos\App\V1alpha1\GolangBinding>|\Google\Protobuf\Internal\RepeatedField $golang_bindings
     *           golang_bindings specifies explicit interface to implementation type bindings which
     *           depinject uses to resolve interface inputs to provider functions.  The scope of this
     *           field's configuration is module specific.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Cosmos\App\V1Alpha1\Config::initOnce();
        parent::__construct($data);
    }

    /**
     * name is the unique name of the module within the app. It should be a name
     * that persists between different versions of a module so that modules
     * can be smoothly upgraded to new versions.
     * For example, for the module cosmos.bank.module.v1.Module, we may chose
     * to simply name the module "bank" in the app. When we upgrade to
     * cosmos.bank.module.v2.Module, the app-specific name "bank" stays the same
     * and the framework knows that the v2 module should receive all the same state
     * that the v1 module had. Note: modules should provide info on which versions
     * they can migrate from in the ModuleDescriptor.can_migration_from field.
     *
     * Generated from protobuf field <code>string name = 1 [json_name = "name"];</code>
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }

    /**
     * name is the unique name of the module within the app. It should be a name
     * that persists between different versions of a module so that modules
     * can be smoothly upgraded to new versions.
     * For example, for the module cosmos.bank.module.v1.Module, we may chose
     * to simply name the module "bank" in the app. When we upgrade to
     * cosmos.bank.module.v2.Module, the app-specific name "bank" stays the same
     * and the framework knows that the v2 module should receive all the same state
     * that the v1 module had. Note: modules should provide info on which versions
     * they can migrate from in the ModuleDescriptor.can_migration_from field.
     *
     * Generated from protobuf field <code>string name = 1 [json_name = "name"];</code>
     * @param string $var
     * @return $this
     */
    public function setName($var)
    {
        GPBUtil::checkString($var, True);
        $this->name = $var;

        return $this;
    }

    /**
     * config is the config object for the module. Module config messages should
     * define a ModuleDescriptor using the cosmos.app.v1alpha1.is_module extension.
     *
     * Generated from protobuf field <code>.google.protobuf.Any config = 2 [json_name = "config"];</code>
     * @return \Google\Protobuf\Any|null
     */
    public function getConfig()
    {
        return $this->config;
    }

    public function hasConfig()
    {
        return isset($this->config);
    }

    public function clearConfig()
    {
        unset($this->config);
    }

    /**
     * config is the config object for the module. Module config messages should
     * define a ModuleDescriptor using the cosmos.app.v1alpha1.is_module extension.
     *
     * Generated from protobuf field <code>.google.protobuf.Any config = 2 [json_name = "config"];</code>
     * @param \Google\Protobuf\Any $var
     * @return $this
     */
    public function setConfig($var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\Any::class);
        $this->config = $var;

        return $this;
    }

    /**
     * golang_bindings specifies explicit interface to implementation type bindings which
     * depinject uses to resolve interface inputs to provider functions.  The scope of this
     * field's configuration is module specific.
     *
     * Generated from protobuf field <code>repeated .cosmos.app.v1alpha1.GolangBinding golang_bindings = 3 [json_name = "golangBindings"];</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getGolangBindings()
    {
        return $this->golang_bindings;
    }

    /**
     * golang_bindings specifies explicit interface to implementation type bindings which
     * depinject uses to resolve interface inputs to provider functions.  The scope of this
     * field's configuration is module specific.
     *
     * Generated from protobuf field <code>repeated .cosmos.app.v1alpha1.GolangBinding golang_bindings = 3 [json_name = "golangBindings"];</code>
     * @param array<\Cosmos\App\V1alpha1\GolangBinding>|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setGolangBindings($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::MESSAGE, \Cosmos\App\V1alpha1\GolangBinding::class);
        $this->golang_bindings = $arr;

        return $this;
    }

}

