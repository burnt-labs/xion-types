<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# NO CHECKED-IN PROTOBUF GENCODE
# source: cosmos/autocli/v1/options.proto

namespace Cosmos\Autocli\V1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * FlagOptions are options for flags generated from rpc request fields.
 * By default, all request fields are configured as flags based on the
 * kebab-case name of the field. Fields can be turned into positional arguments
 * instead by using RpcCommandOptions.positional_args.
 *
 * Generated from protobuf message <code>cosmos.autocli.v1.FlagOptions</code>
 */
class FlagOptions extends \Google\Protobuf\Internal\Message
{
    /**
     * name is an alternate name to use for the field flag.
     *
     * Generated from protobuf field <code>string name = 1 [json_name = "name"];</code>
     */
    protected $name = '';
    /**
     * shorthand is a one-letter abbreviated flag.
     *
     * Generated from protobuf field <code>string shorthand = 2 [json_name = "shorthand"];</code>
     */
    protected $shorthand = '';
    /**
     * usage is the help message.
     *
     * Generated from protobuf field <code>string usage = 3 [json_name = "usage"];</code>
     */
    protected $usage = '';
    /**
     * default_value is the default value as text.
     *
     * Generated from protobuf field <code>string default_value = 4 [json_name = "defaultValue"];</code>
     */
    protected $default_value = '';
    /**
     * deprecated is the usage text to show if this flag is deprecated.
     *
     * Generated from protobuf field <code>string deprecated = 6 [json_name = "deprecated"];</code>
     */
    protected $deprecated = '';
    /**
     * shorthand_deprecated is the usage text to show if the shorthand of this flag is deprecated.
     *
     * Generated from protobuf field <code>string shorthand_deprecated = 7 [json_name = "shorthandDeprecated"];</code>
     */
    protected $shorthand_deprecated = '';
    /**
     * hidden hides the flag from help/usage text
     *
     * Generated from protobuf field <code>bool hidden = 8 [json_name = "hidden"];</code>
     */
    protected $hidden = false;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $name
     *           name is an alternate name to use for the field flag.
     *     @type string $shorthand
     *           shorthand is a one-letter abbreviated flag.
     *     @type string $usage
     *           usage is the help message.
     *     @type string $default_value
     *           default_value is the default value as text.
     *     @type string $deprecated
     *           deprecated is the usage text to show if this flag is deprecated.
     *     @type string $shorthand_deprecated
     *           shorthand_deprecated is the usage text to show if the shorthand of this flag is deprecated.
     *     @type bool $hidden
     *           hidden hides the flag from help/usage text
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Cosmos\Autocli\V1\Options::initOnce();
        parent::__construct($data);
    }

    /**
     * name is an alternate name to use for the field flag.
     *
     * Generated from protobuf field <code>string name = 1 [json_name = "name"];</code>
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }

    /**
     * name is an alternate name to use for the field flag.
     *
     * Generated from protobuf field <code>string name = 1 [json_name = "name"];</code>
     * @param string $var
     * @return $this
     */
    public function setName($var)
    {
        GPBUtil::checkString($var, True);
        $this->name = $var;

        return $this;
    }

    /**
     * shorthand is a one-letter abbreviated flag.
     *
     * Generated from protobuf field <code>string shorthand = 2 [json_name = "shorthand"];</code>
     * @return string
     */
    public function getShorthand()
    {
        return $this->shorthand;
    }

    /**
     * shorthand is a one-letter abbreviated flag.
     *
     * Generated from protobuf field <code>string shorthand = 2 [json_name = "shorthand"];</code>
     * @param string $var
     * @return $this
     */
    public function setShorthand($var)
    {
        GPBUtil::checkString($var, True);
        $this->shorthand = $var;

        return $this;
    }

    /**
     * usage is the help message.
     *
     * Generated from protobuf field <code>string usage = 3 [json_name = "usage"];</code>
     * @return string
     */
    public function getUsage()
    {
        return $this->usage;
    }

    /**
     * usage is the help message.
     *
     * Generated from protobuf field <code>string usage = 3 [json_name = "usage"];</code>
     * @param string $var
     * @return $this
     */
    public function setUsage($var)
    {
        GPBUtil::checkString($var, True);
        $this->usage = $var;

        return $this;
    }

    /**
     * default_value is the default value as text.
     *
     * Generated from protobuf field <code>string default_value = 4 [json_name = "defaultValue"];</code>
     * @return string
     */
    public function getDefaultValue()
    {
        return $this->default_value;
    }

    /**
     * default_value is the default value as text.
     *
     * Generated from protobuf field <code>string default_value = 4 [json_name = "defaultValue"];</code>
     * @param string $var
     * @return $this
     */
    public function setDefaultValue($var)
    {
        GPBUtil::checkString($var, True);
        $this->default_value = $var;

        return $this;
    }

    /**
     * deprecated is the usage text to show if this flag is deprecated.
     *
     * Generated from protobuf field <code>string deprecated = 6 [json_name = "deprecated"];</code>
     * @return string
     */
    public function getDeprecated()
    {
        return $this->deprecated;
    }

    /**
     * deprecated is the usage text to show if this flag is deprecated.
     *
     * Generated from protobuf field <code>string deprecated = 6 [json_name = "deprecated"];</code>
     * @param string $var
     * @return $this
     */
    public function setDeprecated($var)
    {
        GPBUtil::checkString($var, True);
        $this->deprecated = $var;

        return $this;
    }

    /**
     * shorthand_deprecated is the usage text to show if the shorthand of this flag is deprecated.
     *
     * Generated from protobuf field <code>string shorthand_deprecated = 7 [json_name = "shorthandDeprecated"];</code>
     * @return string
     */
    public function getShorthandDeprecated()
    {
        return $this->shorthand_deprecated;
    }

    /**
     * shorthand_deprecated is the usage text to show if the shorthand of this flag is deprecated.
     *
     * Generated from protobuf field <code>string shorthand_deprecated = 7 [json_name = "shorthandDeprecated"];</code>
     * @param string $var
     * @return $this
     */
    public function setShorthandDeprecated($var)
    {
        GPBUtil::checkString($var, True);
        $this->shorthand_deprecated = $var;

        return $this;
    }

    /**
     * hidden hides the flag from help/usage text
     *
     * Generated from protobuf field <code>bool hidden = 8 [json_name = "hidden"];</code>
     * @return bool
     */
    public function getHidden()
    {
        return $this->hidden;
    }

    /**
     * hidden hides the flag from help/usage text
     *
     * Generated from protobuf field <code>bool hidden = 8 [json_name = "hidden"];</code>
     * @param bool $var
     * @return $this
     */
    public function setHidden($var)
    {
        GPBUtil::checkBool($var);
        $this->hidden = $var;

        return $this;
    }

}

