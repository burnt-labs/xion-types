<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# NO CHECKED-IN PROTOBUF GENCODE
# source: cosmos/staking/module/v1/module.proto

namespace Cosmos\Staking\Module\V1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Module is the config object of the staking module.
 *
 * Generated from protobuf message <code>cosmos.staking.module.v1.Module</code>
 */
class Module extends \Google\Protobuf\Internal\Message
{
    /**
     * hooks_order specifies the order of staking hooks and should be a list
     * of module names which provide a staking hooks instance. If no order is
     * provided, then hooks will be applied in alphabetical order of module names.
     *
     * Generated from protobuf field <code>repeated string hooks_order = 1 [json_name = "hooksOrder"];</code>
     */
    private $hooks_order;
    /**
     * authority defines the custom module authority. If not set, defaults to the governance module.
     *
     * Generated from protobuf field <code>string authority = 2 [json_name = "authority"];</code>
     */
    protected $authority = '';
    /**
     * bech32_prefix_validator is the bech32 validator prefix for the app.
     *
     * Generated from protobuf field <code>string bech32_prefix_validator = 3 [json_name = "bech32PrefixValidator"];</code>
     */
    protected $bech32_prefix_validator = '';
    /**
     * bech32_prefix_consensus is the bech32 consensus node prefix for the app.
     *
     * Generated from protobuf field <code>string bech32_prefix_consensus = 4 [json_name = "bech32PrefixConsensus"];</code>
     */
    protected $bech32_prefix_consensus = '';

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type array<string>|\Google\Protobuf\Internal\RepeatedField $hooks_order
     *           hooks_order specifies the order of staking hooks and should be a list
     *           of module names which provide a staking hooks instance. If no order is
     *           provided, then hooks will be applied in alphabetical order of module names.
     *     @type string $authority
     *           authority defines the custom module authority. If not set, defaults to the governance module.
     *     @type string $bech32_prefix_validator
     *           bech32_prefix_validator is the bech32 validator prefix for the app.
     *     @type string $bech32_prefix_consensus
     *           bech32_prefix_consensus is the bech32 consensus node prefix for the app.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Cosmos\Staking\Module\V1\Module::initOnce();
        parent::__construct($data);
    }

    /**
     * hooks_order specifies the order of staking hooks and should be a list
     * of module names which provide a staking hooks instance. If no order is
     * provided, then hooks will be applied in alphabetical order of module names.
     *
     * Generated from protobuf field <code>repeated string hooks_order = 1 [json_name = "hooksOrder"];</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getHooksOrder()
    {
        return $this->hooks_order;
    }

    /**
     * hooks_order specifies the order of staking hooks and should be a list
     * of module names which provide a staking hooks instance. If no order is
     * provided, then hooks will be applied in alphabetical order of module names.
     *
     * Generated from protobuf field <code>repeated string hooks_order = 1 [json_name = "hooksOrder"];</code>
     * @param array<string>|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setHooksOrder($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::STRING);
        $this->hooks_order = $arr;

        return $this;
    }

    /**
     * authority defines the custom module authority. If not set, defaults to the governance module.
     *
     * Generated from protobuf field <code>string authority = 2 [json_name = "authority"];</code>
     * @return string
     */
    public function getAuthority()
    {
        return $this->authority;
    }

    /**
     * authority defines the custom module authority. If not set, defaults to the governance module.
     *
     * Generated from protobuf field <code>string authority = 2 [json_name = "authority"];</code>
     * @param string $var
     * @return $this
     */
    public function setAuthority($var)
    {
        GPBUtil::checkString($var, True);
        $this->authority = $var;

        return $this;
    }

    /**
     * bech32_prefix_validator is the bech32 validator prefix for the app.
     *
     * Generated from protobuf field <code>string bech32_prefix_validator = 3 [json_name = "bech32PrefixValidator"];</code>
     * @return string
     */
    public function getBech32PrefixValidator()
    {
        return $this->bech32_prefix_validator;
    }

    /**
     * bech32_prefix_validator is the bech32 validator prefix for the app.
     *
     * Generated from protobuf field <code>string bech32_prefix_validator = 3 [json_name = "bech32PrefixValidator"];</code>
     * @param string $var
     * @return $this
     */
    public function setBech32PrefixValidator($var)
    {
        GPBUtil::checkString($var, True);
        $this->bech32_prefix_validator = $var;

        return $this;
    }

    /**
     * bech32_prefix_consensus is the bech32 consensus node prefix for the app.
     *
     * Generated from protobuf field <code>string bech32_prefix_consensus = 4 [json_name = "bech32PrefixConsensus"];</code>
     * @return string
     */
    public function getBech32PrefixConsensus()
    {
        return $this->bech32_prefix_consensus;
    }

    /**
     * bech32_prefix_consensus is the bech32 consensus node prefix for the app.
     *
     * Generated from protobuf field <code>string bech32_prefix_consensus = 4 [json_name = "bech32PrefixConsensus"];</code>
     * @param string $var
     * @return $this
     */
    public function setBech32PrefixConsensus($var)
    {
        GPBUtil::checkString($var, True);
        $this->bech32_prefix_consensus = $var;

        return $this;
    }

}

