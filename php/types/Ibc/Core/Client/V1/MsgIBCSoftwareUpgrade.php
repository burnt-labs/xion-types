<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# NO CHECKED-IN PROTOBUF GENCODE
# source: ibc/core/client/v1/tx.proto

namespace Ibc\Core\Client\V1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * MsgIBCSoftwareUpgrade defines the message used to schedule an upgrade of an IBC client using a v1 governance proposal
 *
 * Generated from protobuf message <code>ibc.core.client.v1.MsgIBCSoftwareUpgrade</code>
 */
class MsgIBCSoftwareUpgrade extends \Google\Protobuf\Internal\Message
{
    /**
     * Generated from protobuf field <code>.cosmos.upgrade.v1beta1.Plan plan = 1 [json_name = "plan", (.gogoproto.nullable) = false];</code>
     */
    protected $plan = null;
    /**
     * An UpgradedClientState must be provided to perform an IBC breaking upgrade.
     * This will make the chain commit to the correct upgraded (self) client state
     * before the upgrade occurs, so that connecting chains can verify that the
     * new upgraded client is valid by verifying a proof on the previous version
     * of the chain. This will allow IBC connections to persist smoothly across
     * planned chain upgrades. Correspondingly, the UpgradedClientState field has been
     * deprecated in the Cosmos SDK to allow for this logic to exist solely in
     * the 02-client module.
     *
     * Generated from protobuf field <code>.google.protobuf.Any upgraded_client_state = 2 [json_name = "upgradedClientState"];</code>
     */
    protected $upgraded_client_state = null;
    /**
     * signer address
     *
     * Generated from protobuf field <code>string signer = 3 [json_name = "signer"];</code>
     */
    protected $signer = '';

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Cosmos\Upgrade\V1beta1\Plan $plan
     *     @type \Google\Protobuf\Any $upgraded_client_state
     *           An UpgradedClientState must be provided to perform an IBC breaking upgrade.
     *           This will make the chain commit to the correct upgraded (self) client state
     *           before the upgrade occurs, so that connecting chains can verify that the
     *           new upgraded client is valid by verifying a proof on the previous version
     *           of the chain. This will allow IBC connections to persist smoothly across
     *           planned chain upgrades. Correspondingly, the UpgradedClientState field has been
     *           deprecated in the Cosmos SDK to allow for this logic to exist solely in
     *           the 02-client module.
     *     @type string $signer
     *           signer address
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Ibc\Core\Client\V1\Tx::initOnce();
        parent::__construct($data);
    }

    /**
     * Generated from protobuf field <code>.cosmos.upgrade.v1beta1.Plan plan = 1 [json_name = "plan", (.gogoproto.nullable) = false];</code>
     * @return \Cosmos\Upgrade\V1beta1\Plan|null
     */
    public function getPlan()
    {
        return $this->plan;
    }

    public function hasPlan()
    {
        return isset($this->plan);
    }

    public function clearPlan()
    {
        unset($this->plan);
    }

    /**
     * Generated from protobuf field <code>.cosmos.upgrade.v1beta1.Plan plan = 1 [json_name = "plan", (.gogoproto.nullable) = false];</code>
     * @param \Cosmos\Upgrade\V1beta1\Plan $var
     * @return $this
     */
    public function setPlan($var)
    {
        GPBUtil::checkMessage($var, \Cosmos\Upgrade\V1beta1\Plan::class);
        $this->plan = $var;

        return $this;
    }

    /**
     * An UpgradedClientState must be provided to perform an IBC breaking upgrade.
     * This will make the chain commit to the correct upgraded (self) client state
     * before the upgrade occurs, so that connecting chains can verify that the
     * new upgraded client is valid by verifying a proof on the previous version
     * of the chain. This will allow IBC connections to persist smoothly across
     * planned chain upgrades. Correspondingly, the UpgradedClientState field has been
     * deprecated in the Cosmos SDK to allow for this logic to exist solely in
     * the 02-client module.
     *
     * Generated from protobuf field <code>.google.protobuf.Any upgraded_client_state = 2 [json_name = "upgradedClientState"];</code>
     * @return \Google\Protobuf\Any|null
     */
    public function getUpgradedClientState()
    {
        return $this->upgraded_client_state;
    }

    public function hasUpgradedClientState()
    {
        return isset($this->upgraded_client_state);
    }

    public function clearUpgradedClientState()
    {
        unset($this->upgraded_client_state);
    }

    /**
     * An UpgradedClientState must be provided to perform an IBC breaking upgrade.
     * This will make the chain commit to the correct upgraded (self) client state
     * before the upgrade occurs, so that connecting chains can verify that the
     * new upgraded client is valid by verifying a proof on the previous version
     * of the chain. This will allow IBC connections to persist smoothly across
     * planned chain upgrades. Correspondingly, the UpgradedClientState field has been
     * deprecated in the Cosmos SDK to allow for this logic to exist solely in
     * the 02-client module.
     *
     * Generated from protobuf field <code>.google.protobuf.Any upgraded_client_state = 2 [json_name = "upgradedClientState"];</code>
     * @param \Google\Protobuf\Any $var
     * @return $this
     */
    public function setUpgradedClientState($var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\Any::class);
        $this->upgraded_client_state = $var;

        return $this;
    }

    /**
     * signer address
     *
     * Generated from protobuf field <code>string signer = 3 [json_name = "signer"];</code>
     * @return string
     */
    public function getSigner()
    {
        return $this->signer;
    }

    /**
     * signer address
     *
     * Generated from protobuf field <code>string signer = 3 [json_name = "signer"];</code>
     * @param string $var
     * @return $this
     */
    public function setSigner($var)
    {
        GPBUtil::checkString($var, True);
        $this->signer = $var;

        return $this;
    }

}

