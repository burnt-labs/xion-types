// @generated
// This file is @generated by prost-build.
/// GenesisState defines the packetforward genesis state
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GenesisState {
    /// key - information about forwarded packet: src_channel
    /// (parsedReceiver.Channel), src_port (parsedReceiver.Port), sequence value -
    /// information about original packet for refunding if necessary: retries,
    /// srcPacketSender, srcPacket.DestinationChannel, srcPacket.DestinationPort
    #[prost(map="string, message", tag="2")]
    pub in_flight_packets: ::std::collections::HashMap<::prost::alloc::string::String, InFlightPacket>,
}
/// InFlightPacket contains information about original packet for
/// writing the acknowledgement and refunding if necessary.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct InFlightPacket {
    #[prost(string, tag="1")]
    pub original_sender_address: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub refund_channel_id: ::prost::alloc::string::String,
    #[prost(string, tag="3")]
    pub refund_port_id: ::prost::alloc::string::String,
    #[prost(string, tag="4")]
    pub packet_src_channel_id: ::prost::alloc::string::String,
    #[prost(string, tag="5")]
    pub packet_src_port_id: ::prost::alloc::string::String,
    #[prost(uint64, tag="6")]
    pub packet_timeout_timestamp: u64,
    #[prost(string, tag="7")]
    pub packet_timeout_height: ::prost::alloc::string::String,
    #[prost(bytes="vec", tag="8")]
    pub packet_data: ::prost::alloc::vec::Vec<u8>,
    #[prost(uint64, tag="9")]
    pub refund_sequence: u64,
    #[prost(int32, tag="10")]
    pub retries_remaining: i32,
    #[prost(uint64, tag="11")]
    pub timeout: u64,
    #[prost(bool, tag="12")]
    pub nonrefundable: bool,
}
// @@protoc_insertion_point(module)
