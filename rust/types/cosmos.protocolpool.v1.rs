// @generated
// This file is @generated by prost-build.
/// ContinuousFund defines the fields of continuous fund proposal.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ContinuousFund {
    /// Recipient is the address string of the account receiving funds.
    #[prost(string, tag="1")]
    pub recipient: ::prost::alloc::string::String,
    /// Percentage is the percentage of funds to be allocated from Community pool.
    #[prost(string, tag="2")]
    pub percentage: ::prost::alloc::string::String,
    /// Optional, if expiry is set, removes the state object when expired.
    #[prost(message, optional, tag="3")]
    pub expiry: ::core::option::Option<::prost_types::Timestamp>,
}
/// Params defines the parameters for the protocolpool module.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Params {
    /// EnabledDistributionDenoms lists the denoms that are allowed to be distributed.
    /// This is to avoid spending time distributing undesired tokens to continuous funds and budgets.
    #[prost(string, repeated, tag="1")]
    pub enabled_distribution_denoms: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// DistributionFrequency is the frequency (in terms of blocks) that funds are distributed out from the
    /// x/protocolpool module.
    #[prost(uint64, tag="2")]
    pub distribution_frequency: u64,
}
/// QueryCommunityPoolRequest is the request type for the Query/CommunityPool RPC
/// method.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct QueryCommunityPoolRequest {
}
/// QueryCommunityPoolResponse is the response type for the Query/CommunityPool
/// RPC method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryCommunityPoolResponse {
    /// pool defines community pool's coins.
    #[prost(message, repeated, tag="1")]
    pub pool: ::prost::alloc::vec::Vec<super::super::base::v1beta1::Coin>,
}
/// QueryContinuousFundRequest is the request type for the Query/ContinuousFund
/// RPC method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryContinuousFundRequest {
    /// recipient is the recipient address to query unclaimed budget amount for.
    #[prost(string, tag="1")]
    pub recipient: ::prost::alloc::string::String,
}
/// QueryUnclaimedBudgetResponse is the response type for the Query/ContinuousFund
/// RPC method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryContinuousFundResponse {
    /// ContinuousFunds is the given continuous fund returned in the query.
    #[prost(message, optional, tag="1")]
    pub continuous_fund: ::core::option::Option<ContinuousFund>,
}
/// QueryContinuousFundRequest is the request type for the Query/ContinuousFunds
/// RPC method.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct QueryContinuousFundsRequest {
}
/// QueryUnclaimedBudgetResponse is the response type for the Query/ContinuousFunds
/// RPC method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryContinuousFundsResponse {
    /// ContinuousFunds defines all continuous funds in state.
    #[prost(message, repeated, tag="1")]
    pub continuous_funds: ::prost::alloc::vec::Vec<ContinuousFund>,
}
/// QueryParamsRequest is the response type for the Query/Params RPC method.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct QueryParamsRequest {
}
/// QueryParamsResponse is the response type for the Query/Params RPC method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryParamsResponse {
    #[prost(message, optional, tag="1")]
    pub params: ::core::option::Option<Params>,
}
// @@protoc_insertion_point(module)
