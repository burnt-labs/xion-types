// @generated
// This file is @generated by prost-build.
/// Params defines the parameters for the abstractaccount module.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Params {
    /// AllowAllCodeIDs determines whether a Wasm code ID can be used to register
    /// AbstractAccounts:
    /// - if set to true, any code ID can be used;
    /// - if set to false, only code IDs whitelisted in the AllowedCodeIDs list can
    /// be used.
    #[prost(bool, tag="1")]
    pub allow_all_code_ids: bool,
    /// AllowedCodeIDs is the whitelist of Wasm code IDs that can be used to
    /// regiseter AbstractAccounts.
    #[prost(uint64, repeated, packed="false", tag="2")]
    pub allowed_code_ids: ::prost::alloc::vec::Vec<u64>,
    /// MaxGasBefore is the maximum amount of gas that can be consumed by the
    /// contract call in the before_tx decorator.
    ///
    /// Must be greater than zero.
    #[prost(uint64, tag="3")]
    pub max_gas_before: u64,
    /// MaxGasAfter is the maximum amount of gas that can be consumed by the
    /// contract call in the after_tx decorator.
    ///
    /// Must be greater than zero.
    #[prost(uint64, tag="4")]
    pub max_gas_after: u64,
}
// ---------------------------------- Params -----------------------------------

/// QueryParamsRequest is the request type for the Query/Params RPC method.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct QueryParamsRequest {
}
/// QueryParamsResponse is the response type for the Query/Params RPC method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryParamsResponse {
    #[prost(message, optional, tag="1")]
    pub params: ::core::option::Option<Params>,
}
// @@protoc_insertion_point(module)
