// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               unknown
// source: xion/jwk/v1/query.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { grpc } from "@improbable-eng/grpc-web";
import { BrowserHeaders } from "browser-headers";
import Long from "long";
import { PageRequest, PageResponse } from "../../../cosmos/base/query/v1beta1/pagination";
import { Audience, AudienceClaim } from "./audience";
import { Params } from "./params";

export const protobufPackage = "xion.jwk.v1";

/** QueryParamsRequest is request type for the Query/Params RPC method. */
export interface QueryParamsRequest {
}

/** QueryParamsResponse is response type for the Query/Params RPC method. */
export interface QueryParamsResponse {
  /** params holds all the parameters of this module. */
  params?: Params | undefined;
}

export interface QueryGetAudienceClaimRequest {
  hash: Uint8Array;
}

export interface QueryGetAudienceClaimResponse {
  claim?: AudienceClaim | undefined;
}

export interface QueryGetAudienceRequest {
  aud: string;
}

export interface QueryGetAudienceResponse {
  audience?: Audience | undefined;
}

export interface QueryAllAudienceRequest {
  pagination?: PageRequest | undefined;
}

export interface QueryAllAudienceResponse {
  audience: Audience[];
  pagination?: PageResponse | undefined;
}

export interface QueryValidateJWTRequest {
  aud: string;
  sub: string;
  sigBytes: string;
}

export interface PrivateClaim {
  key: string;
  value: string;
}

export interface QueryValidateJWTResponse {
  privateClaims: PrivateClaim[];
}

function createBaseQueryParamsRequest(): QueryParamsRequest {
  return {};
}

export const QueryParamsRequest: MessageFns<QueryParamsRequest> = {
  encode(_: QueryParamsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryParamsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryParamsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): QueryParamsRequest {
    return {};
  },

  toJSON(_: QueryParamsRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryParamsRequest>, I>>(base?: I): QueryParamsRequest {
    return QueryParamsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryParamsRequest>, I>>(_: I): QueryParamsRequest {
    const message = createBaseQueryParamsRequest();
    return message;
  },
};

function createBaseQueryParamsResponse(): QueryParamsResponse {
  return { params: undefined };
}

export const QueryParamsResponse: MessageFns<QueryParamsResponse> = {
  encode(message: QueryParamsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.params !== undefined) {
      Params.encode(message.params, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryParamsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryParamsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.params = Params.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryParamsResponse {
    return { params: isSet(object.params) ? Params.fromJSON(object.params) : undefined };
  },

  toJSON(message: QueryParamsResponse): unknown {
    const obj: any = {};
    if (message.params !== undefined) {
      obj.params = Params.toJSON(message.params);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryParamsResponse>, I>>(base?: I): QueryParamsResponse {
    return QueryParamsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryParamsResponse>, I>>(object: I): QueryParamsResponse {
    const message = createBaseQueryParamsResponse();
    message.params = (object.params !== undefined && object.params !== null)
      ? Params.fromPartial(object.params)
      : undefined;
    return message;
  },
};

function createBaseQueryGetAudienceClaimRequest(): QueryGetAudienceClaimRequest {
  return { hash: new Uint8Array(0) };
}

export const QueryGetAudienceClaimRequest: MessageFns<QueryGetAudienceClaimRequest> = {
  encode(message: QueryGetAudienceClaimRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.hash.length !== 0) {
      writer.uint32(10).bytes(message.hash);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetAudienceClaimRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetAudienceClaimRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.hash = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetAudienceClaimRequest {
    return { hash: isSet(object.hash) ? bytesFromBase64(object.hash) : new Uint8Array(0) };
  },

  toJSON(message: QueryGetAudienceClaimRequest): unknown {
    const obj: any = {};
    if (message.hash.length !== 0) {
      obj.hash = base64FromBytes(message.hash);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetAudienceClaimRequest>, I>>(base?: I): QueryGetAudienceClaimRequest {
    return QueryGetAudienceClaimRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetAudienceClaimRequest>, I>>(object: I): QueryGetAudienceClaimRequest {
    const message = createBaseQueryGetAudienceClaimRequest();
    message.hash = object.hash ?? new Uint8Array(0);
    return message;
  },
};

function createBaseQueryGetAudienceClaimResponse(): QueryGetAudienceClaimResponse {
  return { claim: undefined };
}

export const QueryGetAudienceClaimResponse: MessageFns<QueryGetAudienceClaimResponse> = {
  encode(message: QueryGetAudienceClaimResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.claim !== undefined) {
      AudienceClaim.encode(message.claim, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetAudienceClaimResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetAudienceClaimResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.claim = AudienceClaim.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetAudienceClaimResponse {
    return { claim: isSet(object.claim) ? AudienceClaim.fromJSON(object.claim) : undefined };
  },

  toJSON(message: QueryGetAudienceClaimResponse): unknown {
    const obj: any = {};
    if (message.claim !== undefined) {
      obj.claim = AudienceClaim.toJSON(message.claim);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetAudienceClaimResponse>, I>>(base?: I): QueryGetAudienceClaimResponse {
    return QueryGetAudienceClaimResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetAudienceClaimResponse>, I>>(
    object: I,
  ): QueryGetAudienceClaimResponse {
    const message = createBaseQueryGetAudienceClaimResponse();
    message.claim = (object.claim !== undefined && object.claim !== null)
      ? AudienceClaim.fromPartial(object.claim)
      : undefined;
    return message;
  },
};

function createBaseQueryGetAudienceRequest(): QueryGetAudienceRequest {
  return { aud: "" };
}

export const QueryGetAudienceRequest: MessageFns<QueryGetAudienceRequest> = {
  encode(message: QueryGetAudienceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.aud !== "") {
      writer.uint32(10).string(message.aud);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetAudienceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetAudienceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.aud = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetAudienceRequest {
    return { aud: isSet(object.aud) ? globalThis.String(object.aud) : "" };
  },

  toJSON(message: QueryGetAudienceRequest): unknown {
    const obj: any = {};
    if (message.aud !== "") {
      obj.aud = message.aud;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetAudienceRequest>, I>>(base?: I): QueryGetAudienceRequest {
    return QueryGetAudienceRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetAudienceRequest>, I>>(object: I): QueryGetAudienceRequest {
    const message = createBaseQueryGetAudienceRequest();
    message.aud = object.aud ?? "";
    return message;
  },
};

function createBaseQueryGetAudienceResponse(): QueryGetAudienceResponse {
  return { audience: undefined };
}

export const QueryGetAudienceResponse: MessageFns<QueryGetAudienceResponse> = {
  encode(message: QueryGetAudienceResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.audience !== undefined) {
      Audience.encode(message.audience, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetAudienceResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetAudienceResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.audience = Audience.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetAudienceResponse {
    return { audience: isSet(object.audience) ? Audience.fromJSON(object.audience) : undefined };
  },

  toJSON(message: QueryGetAudienceResponse): unknown {
    const obj: any = {};
    if (message.audience !== undefined) {
      obj.audience = Audience.toJSON(message.audience);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetAudienceResponse>, I>>(base?: I): QueryGetAudienceResponse {
    return QueryGetAudienceResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetAudienceResponse>, I>>(object: I): QueryGetAudienceResponse {
    const message = createBaseQueryGetAudienceResponse();
    message.audience = (object.audience !== undefined && object.audience !== null)
      ? Audience.fromPartial(object.audience)
      : undefined;
    return message;
  },
};

function createBaseQueryAllAudienceRequest(): QueryAllAudienceRequest {
  return { pagination: undefined };
}

export const QueryAllAudienceRequest: MessageFns<QueryAllAudienceRequest> = {
  encode(message: QueryAllAudienceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAllAudienceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllAudienceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAllAudienceRequest {
    return { pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined };
  },

  toJSON(message: QueryAllAudienceRequest): unknown {
    const obj: any = {};
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAllAudienceRequest>, I>>(base?: I): QueryAllAudienceRequest {
    return QueryAllAudienceRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAllAudienceRequest>, I>>(object: I): QueryAllAudienceRequest {
    const message = createBaseQueryAllAudienceRequest();
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryAllAudienceResponse(): QueryAllAudienceResponse {
  return { audience: [], pagination: undefined };
}

export const QueryAllAudienceResponse: MessageFns<QueryAllAudienceResponse> = {
  encode(message: QueryAllAudienceResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.audience) {
      Audience.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAllAudienceResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllAudienceResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.audience.push(Audience.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAllAudienceResponse {
    return {
      audience: globalThis.Array.isArray(object?.audience) ? object.audience.map((e: any) => Audience.fromJSON(e)) : [],
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryAllAudienceResponse): unknown {
    const obj: any = {};
    if (message.audience?.length) {
      obj.audience = message.audience.map((e) => Audience.toJSON(e));
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAllAudienceResponse>, I>>(base?: I): QueryAllAudienceResponse {
    return QueryAllAudienceResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAllAudienceResponse>, I>>(object: I): QueryAllAudienceResponse {
    const message = createBaseQueryAllAudienceResponse();
    message.audience = object.audience?.map((e) => Audience.fromPartial(e)) || [];
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryValidateJWTRequest(): QueryValidateJWTRequest {
  return { aud: "", sub: "", sigBytes: "" };
}

export const QueryValidateJWTRequest: MessageFns<QueryValidateJWTRequest> = {
  encode(message: QueryValidateJWTRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.aud !== "") {
      writer.uint32(10).string(message.aud);
    }
    if (message.sub !== "") {
      writer.uint32(18).string(message.sub);
    }
    if (message.sigBytes !== "") {
      writer.uint32(26).string(message.sigBytes);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryValidateJWTRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryValidateJWTRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.aud = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.sub = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.sigBytes = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryValidateJWTRequest {
    return {
      aud: isSet(object.aud) ? globalThis.String(object.aud) : "",
      sub: isSet(object.sub) ? globalThis.String(object.sub) : "",
      sigBytes: isSet(object.sigBytes) ? globalThis.String(object.sigBytes) : "",
    };
  },

  toJSON(message: QueryValidateJWTRequest): unknown {
    const obj: any = {};
    if (message.aud !== "") {
      obj.aud = message.aud;
    }
    if (message.sub !== "") {
      obj.sub = message.sub;
    }
    if (message.sigBytes !== "") {
      obj.sigBytes = message.sigBytes;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryValidateJWTRequest>, I>>(base?: I): QueryValidateJWTRequest {
    return QueryValidateJWTRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryValidateJWTRequest>, I>>(object: I): QueryValidateJWTRequest {
    const message = createBaseQueryValidateJWTRequest();
    message.aud = object.aud ?? "";
    message.sub = object.sub ?? "";
    message.sigBytes = object.sigBytes ?? "";
    return message;
  },
};

function createBasePrivateClaim(): PrivateClaim {
  return { key: "", value: "" };
}

export const PrivateClaim: MessageFns<PrivateClaim> = {
  encode(message: PrivateClaim, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PrivateClaim {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePrivateClaim();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PrivateClaim {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: PrivateClaim): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PrivateClaim>, I>>(base?: I): PrivateClaim {
    return PrivateClaim.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PrivateClaim>, I>>(object: I): PrivateClaim {
    const message = createBasePrivateClaim();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseQueryValidateJWTResponse(): QueryValidateJWTResponse {
  return { privateClaims: [] };
}

export const QueryValidateJWTResponse: MessageFns<QueryValidateJWTResponse> = {
  encode(message: QueryValidateJWTResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.privateClaims) {
      PrivateClaim.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryValidateJWTResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryValidateJWTResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.privateClaims.push(PrivateClaim.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryValidateJWTResponse {
    return {
      privateClaims: globalThis.Array.isArray(object?.privateClaims)
        ? object.privateClaims.map((e: any) => PrivateClaim.fromJSON(e))
        : [],
    };
  },

  toJSON(message: QueryValidateJWTResponse): unknown {
    const obj: any = {};
    if (message.privateClaims?.length) {
      obj.privateClaims = message.privateClaims.map((e) => PrivateClaim.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryValidateJWTResponse>, I>>(base?: I): QueryValidateJWTResponse {
    return QueryValidateJWTResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryValidateJWTResponse>, I>>(object: I): QueryValidateJWTResponse {
    const message = createBaseQueryValidateJWTResponse();
    message.privateClaims = object.privateClaims?.map((e) => PrivateClaim.fromPartial(e)) || [];
    return message;
  },
};

/** Query defines the gRPC querier service. */
export interface Query {
  /** Parameters queries the parameters of the module. */
  Params(request: DeepPartial<QueryParamsRequest>, metadata?: grpc.Metadata): Promise<QueryParamsResponse>;
  AudienceClaim(
    request: DeepPartial<QueryGetAudienceClaimRequest>,
    metadata?: grpc.Metadata,
  ): Promise<QueryGetAudienceClaimResponse>;
  /** Queries a list of Audience items. */
  Audience(request: DeepPartial<QueryGetAudienceRequest>, metadata?: grpc.Metadata): Promise<QueryGetAudienceResponse>;
  AudienceAll(
    request: DeepPartial<QueryAllAudienceRequest>,
    metadata?: grpc.Metadata,
  ): Promise<QueryAllAudienceResponse>;
  /** Queries a list of ValidateJWT items. */
  ValidateJWT(
    request: DeepPartial<QueryValidateJWTRequest>,
    metadata?: grpc.Metadata,
  ): Promise<QueryValidateJWTResponse>;
}

export class QueryClientImpl implements Query {
  private readonly rpc: Rpc;

  constructor(rpc: Rpc) {
    this.rpc = rpc;
    this.Params = this.Params.bind(this);
    this.AudienceClaim = this.AudienceClaim.bind(this);
    this.Audience = this.Audience.bind(this);
    this.AudienceAll = this.AudienceAll.bind(this);
    this.ValidateJWT = this.ValidateJWT.bind(this);
  }

  Params(request: DeepPartial<QueryParamsRequest>, metadata?: grpc.Metadata): Promise<QueryParamsResponse> {
    return this.rpc.unary(QueryParamsDesc, QueryParamsRequest.fromPartial(request), metadata);
  }

  AudienceClaim(
    request: DeepPartial<QueryGetAudienceClaimRequest>,
    metadata?: grpc.Metadata,
  ): Promise<QueryGetAudienceClaimResponse> {
    return this.rpc.unary(QueryAudienceClaimDesc, QueryGetAudienceClaimRequest.fromPartial(request), metadata);
  }

  Audience(request: DeepPartial<QueryGetAudienceRequest>, metadata?: grpc.Metadata): Promise<QueryGetAudienceResponse> {
    return this.rpc.unary(QueryAudienceDesc, QueryGetAudienceRequest.fromPartial(request), metadata);
  }

  AudienceAll(
    request: DeepPartial<QueryAllAudienceRequest>,
    metadata?: grpc.Metadata,
  ): Promise<QueryAllAudienceResponse> {
    return this.rpc.unary(QueryAudienceAllDesc, QueryAllAudienceRequest.fromPartial(request), metadata);
  }

  ValidateJWT(
    request: DeepPartial<QueryValidateJWTRequest>,
    metadata?: grpc.Metadata,
  ): Promise<QueryValidateJWTResponse> {
    return this.rpc.unary(QueryValidateJWTDesc, QueryValidateJWTRequest.fromPartial(request), metadata);
  }
}

export const QueryDesc = { serviceName: "xion.jwk.v1.Query" };

export const QueryParamsDesc: UnaryMethodDefinitionish = {
  methodName: "Params",
  service: QueryDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return QueryParamsRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = QueryParamsResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const QueryAudienceClaimDesc: UnaryMethodDefinitionish = {
  methodName: "AudienceClaim",
  service: QueryDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return QueryGetAudienceClaimRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = QueryGetAudienceClaimResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const QueryAudienceDesc: UnaryMethodDefinitionish = {
  methodName: "Audience",
  service: QueryDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return QueryGetAudienceRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = QueryGetAudienceResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const QueryAudienceAllDesc: UnaryMethodDefinitionish = {
  methodName: "AudienceAll",
  service: QueryDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return QueryAllAudienceRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = QueryAllAudienceResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const QueryValidateJWTDesc: UnaryMethodDefinitionish = {
  methodName: "ValidateJWT",
  service: QueryDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return QueryValidateJWTRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = QueryValidateJWTResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

interface UnaryMethodDefinitionishR extends grpc.UnaryMethodDefinition<any, any> {
  requestStream: any;
  responseStream: any;
}

type UnaryMethodDefinitionish = UnaryMethodDefinitionishR;

interface Rpc {
  unary<T extends UnaryMethodDefinitionish>(
    methodDesc: T,
    request: any,
    metadata: grpc.Metadata | undefined,
  ): Promise<any>;
}

export class GrpcWebImpl {
  private host: string;
  private options: {
    transport?: grpc.TransportFactory;

    debug?: boolean;
    metadata?: grpc.Metadata;
    upStreamRetryCodes?: number[];
  };

  constructor(
    host: string,
    options: {
      transport?: grpc.TransportFactory;

      debug?: boolean;
      metadata?: grpc.Metadata;
      upStreamRetryCodes?: number[];
    },
  ) {
    this.host = host;
    this.options = options;
  }

  unary<T extends UnaryMethodDefinitionish>(
    methodDesc: T,
    _request: any,
    metadata: grpc.Metadata | undefined,
  ): Promise<any> {
    const request = { ..._request, ...methodDesc.requestType };
    const maybeCombinedMetadata = metadata && this.options.metadata
      ? new BrowserHeaders({ ...this.options?.metadata.headersMap, ...metadata?.headersMap })
      : metadata ?? this.options.metadata;
    return new Promise((resolve, reject) => {
      grpc.unary(methodDesc, {
        request,
        host: this.host,
        metadata: maybeCombinedMetadata ?? {},
        ...(this.options.transport !== undefined ? { transport: this.options.transport } : {}),
        debug: this.options.debug ?? false,
        onEnd: function (response) {
          if (response.status === grpc.Code.OK) {
            resolve(response.message!.toObject());
          } else {
            const err = new GrpcWebError(response.statusMessage, response.status, response.trailers);
            reject(err);
          }
        },
      });
    });
  }
}

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export class GrpcWebError extends globalThis.Error {
  constructor(message: string, public code: grpc.Code, public metadata: grpc.Metadata) {
    super(message);
  }
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
