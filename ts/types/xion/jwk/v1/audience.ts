// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               unknown
// source: xion/jwk/v1/audience.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "xion.jwk.v1";

export interface Audience {
  aud: string;
  key: string;
  admin: string;
}

export interface AudienceClaim {
  signer: string;
}

function createBaseAudience(): Audience {
  return { aud: "", key: "", admin: "" };
}

export const Audience: MessageFns<Audience> = {
  encode(message: Audience, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.aud !== "") {
      writer.uint32(10).string(message.aud);
    }
    if (message.key !== "") {
      writer.uint32(18).string(message.key);
    }
    if (message.admin !== "") {
      writer.uint32(26).string(message.admin);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Audience {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAudience();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.aud = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.admin = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Audience {
    return {
      aud: isSet(object.aud) ? globalThis.String(object.aud) : "",
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      admin: isSet(object.admin) ? globalThis.String(object.admin) : "",
    };
  },

  toJSON(message: Audience): unknown {
    const obj: any = {};
    if (message.aud !== "") {
      obj.aud = message.aud;
    }
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.admin !== "") {
      obj.admin = message.admin;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Audience>, I>>(base?: I): Audience {
    return Audience.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Audience>, I>>(object: I): Audience {
    const message = createBaseAudience();
    message.aud = object.aud ?? "";
    message.key = object.key ?? "";
    message.admin = object.admin ?? "";
    return message;
  },
};

function createBaseAudienceClaim(): AudienceClaim {
  return { signer: "" };
}

export const AudienceClaim: MessageFns<AudienceClaim> = {
  encode(message: AudienceClaim, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.signer !== "") {
      writer.uint32(10).string(message.signer);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AudienceClaim {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAudienceClaim();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.signer = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AudienceClaim {
    return { signer: isSet(object.signer) ? globalThis.String(object.signer) : "" };
  },

  toJSON(message: AudienceClaim): unknown {
    const obj: any = {};
    if (message.signer !== "") {
      obj.signer = message.signer;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AudienceClaim>, I>>(base?: I): AudienceClaim {
    return AudienceClaim.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AudienceClaim>, I>>(object: I): AudienceClaim {
    const message = createBaseAudienceClaim();
    message.signer = object.signer ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
