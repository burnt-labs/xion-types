// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               unknown
// source: xion/jwk/v1/tx.proto

/* eslint-disable */
import { grpc } from "@improbable-eng/grpc-web";
import { BrowserHeaders } from "browser-headers";
import Long from "long";
import _m0 from "protobufjs/minimal";
import { Audience } from "./audience";

export const protobufPackage = "xion.jwk.v1";

export interface MsgCreateAudienceClaim {
  admin: string;
  audHash: Uint8Array;
}

export interface MsgCreateAudienceClaimResponse {
}

export interface MsgDeleteAudienceClaim {
  admin: string;
  audHash: Uint8Array;
}

export interface MsgDeleteAudienceClaimResponse {
}

export interface MsgCreateAudience {
  admin: string;
  aud: string;
  key: string;
}

export interface MsgCreateAudienceResponse {
  audience?: Audience | undefined;
}

export interface MsgUpdateAudience {
  admin: string;
  newAdmin: string;
  aud: string;
  key: string;
}

export interface MsgUpdateAudienceResponse {
  audience?: Audience | undefined;
}

export interface MsgDeleteAudience {
  admin: string;
  aud: string;
}

export interface MsgDeleteAudienceResponse {
}

function createBaseMsgCreateAudienceClaim(): MsgCreateAudienceClaim {
  return { admin: "", audHash: new Uint8Array(0) };
}

export const MsgCreateAudienceClaim = {
  encode(message: MsgCreateAudienceClaim, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.admin !== "") {
      writer.uint32(10).string(message.admin);
    }
    if (message.audHash.length !== 0) {
      writer.uint32(18).bytes(message.audHash);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgCreateAudienceClaim {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCreateAudienceClaim();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.admin = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.audHash = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgCreateAudienceClaim {
    return {
      admin: isSet(object.admin) ? globalThis.String(object.admin) : "",
      audHash: isSet(object.audHash) ? bytesFromBase64(object.audHash) : new Uint8Array(0),
    };
  },

  toJSON(message: MsgCreateAudienceClaim): unknown {
    const obj: any = {};
    if (message.admin !== "") {
      obj.admin = message.admin;
    }
    if (message.audHash.length !== 0) {
      obj.audHash = base64FromBytes(message.audHash);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgCreateAudienceClaim>, I>>(base?: I): MsgCreateAudienceClaim {
    return MsgCreateAudienceClaim.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgCreateAudienceClaim>, I>>(object: I): MsgCreateAudienceClaim {
    const message = createBaseMsgCreateAudienceClaim();
    message.admin = object.admin ?? "";
    message.audHash = object.audHash ?? new Uint8Array(0);
    return message;
  },
};

function createBaseMsgCreateAudienceClaimResponse(): MsgCreateAudienceClaimResponse {
  return {};
}

export const MsgCreateAudienceClaimResponse = {
  encode(_: MsgCreateAudienceClaimResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgCreateAudienceClaimResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCreateAudienceClaimResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgCreateAudienceClaimResponse {
    return {};
  },

  toJSON(_: MsgCreateAudienceClaimResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgCreateAudienceClaimResponse>, I>>(base?: I): MsgCreateAudienceClaimResponse {
    return MsgCreateAudienceClaimResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgCreateAudienceClaimResponse>, I>>(_: I): MsgCreateAudienceClaimResponse {
    const message = createBaseMsgCreateAudienceClaimResponse();
    return message;
  },
};

function createBaseMsgDeleteAudienceClaim(): MsgDeleteAudienceClaim {
  return { admin: "", audHash: new Uint8Array(0) };
}

export const MsgDeleteAudienceClaim = {
  encode(message: MsgDeleteAudienceClaim, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.admin !== "") {
      writer.uint32(10).string(message.admin);
    }
    if (message.audHash.length !== 0) {
      writer.uint32(18).bytes(message.audHash);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgDeleteAudienceClaim {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgDeleteAudienceClaim();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.admin = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.audHash = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgDeleteAudienceClaim {
    return {
      admin: isSet(object.admin) ? globalThis.String(object.admin) : "",
      audHash: isSet(object.audHash) ? bytesFromBase64(object.audHash) : new Uint8Array(0),
    };
  },

  toJSON(message: MsgDeleteAudienceClaim): unknown {
    const obj: any = {};
    if (message.admin !== "") {
      obj.admin = message.admin;
    }
    if (message.audHash.length !== 0) {
      obj.audHash = base64FromBytes(message.audHash);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgDeleteAudienceClaim>, I>>(base?: I): MsgDeleteAudienceClaim {
    return MsgDeleteAudienceClaim.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgDeleteAudienceClaim>, I>>(object: I): MsgDeleteAudienceClaim {
    const message = createBaseMsgDeleteAudienceClaim();
    message.admin = object.admin ?? "";
    message.audHash = object.audHash ?? new Uint8Array(0);
    return message;
  },
};

function createBaseMsgDeleteAudienceClaimResponse(): MsgDeleteAudienceClaimResponse {
  return {};
}

export const MsgDeleteAudienceClaimResponse = {
  encode(_: MsgDeleteAudienceClaimResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgDeleteAudienceClaimResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgDeleteAudienceClaimResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgDeleteAudienceClaimResponse {
    return {};
  },

  toJSON(_: MsgDeleteAudienceClaimResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgDeleteAudienceClaimResponse>, I>>(base?: I): MsgDeleteAudienceClaimResponse {
    return MsgDeleteAudienceClaimResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgDeleteAudienceClaimResponse>, I>>(_: I): MsgDeleteAudienceClaimResponse {
    const message = createBaseMsgDeleteAudienceClaimResponse();
    return message;
  },
};

function createBaseMsgCreateAudience(): MsgCreateAudience {
  return { admin: "", aud: "", key: "" };
}

export const MsgCreateAudience = {
  encode(message: MsgCreateAudience, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.admin !== "") {
      writer.uint32(10).string(message.admin);
    }
    if (message.aud !== "") {
      writer.uint32(18).string(message.aud);
    }
    if (message.key !== "") {
      writer.uint32(26).string(message.key);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgCreateAudience {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCreateAudience();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.admin = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.aud = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.key = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgCreateAudience {
    return {
      admin: isSet(object.admin) ? globalThis.String(object.admin) : "",
      aud: isSet(object.aud) ? globalThis.String(object.aud) : "",
      key: isSet(object.key) ? globalThis.String(object.key) : "",
    };
  },

  toJSON(message: MsgCreateAudience): unknown {
    const obj: any = {};
    if (message.admin !== "") {
      obj.admin = message.admin;
    }
    if (message.aud !== "") {
      obj.aud = message.aud;
    }
    if (message.key !== "") {
      obj.key = message.key;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgCreateAudience>, I>>(base?: I): MsgCreateAudience {
    return MsgCreateAudience.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgCreateAudience>, I>>(object: I): MsgCreateAudience {
    const message = createBaseMsgCreateAudience();
    message.admin = object.admin ?? "";
    message.aud = object.aud ?? "";
    message.key = object.key ?? "";
    return message;
  },
};

function createBaseMsgCreateAudienceResponse(): MsgCreateAudienceResponse {
  return { audience: undefined };
}

export const MsgCreateAudienceResponse = {
  encode(message: MsgCreateAudienceResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.audience !== undefined) {
      Audience.encode(message.audience, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgCreateAudienceResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCreateAudienceResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.audience = Audience.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgCreateAudienceResponse {
    return { audience: isSet(object.audience) ? Audience.fromJSON(object.audience) : undefined };
  },

  toJSON(message: MsgCreateAudienceResponse): unknown {
    const obj: any = {};
    if (message.audience !== undefined) {
      obj.audience = Audience.toJSON(message.audience);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgCreateAudienceResponse>, I>>(base?: I): MsgCreateAudienceResponse {
    return MsgCreateAudienceResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgCreateAudienceResponse>, I>>(object: I): MsgCreateAudienceResponse {
    const message = createBaseMsgCreateAudienceResponse();
    message.audience = (object.audience !== undefined && object.audience !== null)
      ? Audience.fromPartial(object.audience)
      : undefined;
    return message;
  },
};

function createBaseMsgUpdateAudience(): MsgUpdateAudience {
  return { admin: "", newAdmin: "", aud: "", key: "" };
}

export const MsgUpdateAudience = {
  encode(message: MsgUpdateAudience, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.admin !== "") {
      writer.uint32(10).string(message.admin);
    }
    if (message.newAdmin !== "") {
      writer.uint32(18).string(message.newAdmin);
    }
    if (message.aud !== "") {
      writer.uint32(26).string(message.aud);
    }
    if (message.key !== "") {
      writer.uint32(34).string(message.key);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgUpdateAudience {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateAudience();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.admin = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.newAdmin = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.aud = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.key = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgUpdateAudience {
    return {
      admin: isSet(object.admin) ? globalThis.String(object.admin) : "",
      newAdmin: isSet(object.newAdmin) ? globalThis.String(object.newAdmin) : "",
      aud: isSet(object.aud) ? globalThis.String(object.aud) : "",
      key: isSet(object.key) ? globalThis.String(object.key) : "",
    };
  },

  toJSON(message: MsgUpdateAudience): unknown {
    const obj: any = {};
    if (message.admin !== "") {
      obj.admin = message.admin;
    }
    if (message.newAdmin !== "") {
      obj.newAdmin = message.newAdmin;
    }
    if (message.aud !== "") {
      obj.aud = message.aud;
    }
    if (message.key !== "") {
      obj.key = message.key;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateAudience>, I>>(base?: I): MsgUpdateAudience {
    return MsgUpdateAudience.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateAudience>, I>>(object: I): MsgUpdateAudience {
    const message = createBaseMsgUpdateAudience();
    message.admin = object.admin ?? "";
    message.newAdmin = object.newAdmin ?? "";
    message.aud = object.aud ?? "";
    message.key = object.key ?? "";
    return message;
  },
};

function createBaseMsgUpdateAudienceResponse(): MsgUpdateAudienceResponse {
  return { audience: undefined };
}

export const MsgUpdateAudienceResponse = {
  encode(message: MsgUpdateAudienceResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.audience !== undefined) {
      Audience.encode(message.audience, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgUpdateAudienceResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateAudienceResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.audience = Audience.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgUpdateAudienceResponse {
    return { audience: isSet(object.audience) ? Audience.fromJSON(object.audience) : undefined };
  },

  toJSON(message: MsgUpdateAudienceResponse): unknown {
    const obj: any = {};
    if (message.audience !== undefined) {
      obj.audience = Audience.toJSON(message.audience);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateAudienceResponse>, I>>(base?: I): MsgUpdateAudienceResponse {
    return MsgUpdateAudienceResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateAudienceResponse>, I>>(object: I): MsgUpdateAudienceResponse {
    const message = createBaseMsgUpdateAudienceResponse();
    message.audience = (object.audience !== undefined && object.audience !== null)
      ? Audience.fromPartial(object.audience)
      : undefined;
    return message;
  },
};

function createBaseMsgDeleteAudience(): MsgDeleteAudience {
  return { admin: "", aud: "" };
}

export const MsgDeleteAudience = {
  encode(message: MsgDeleteAudience, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.admin !== "") {
      writer.uint32(10).string(message.admin);
    }
    if (message.aud !== "") {
      writer.uint32(18).string(message.aud);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgDeleteAudience {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgDeleteAudience();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.admin = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.aud = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgDeleteAudience {
    return {
      admin: isSet(object.admin) ? globalThis.String(object.admin) : "",
      aud: isSet(object.aud) ? globalThis.String(object.aud) : "",
    };
  },

  toJSON(message: MsgDeleteAudience): unknown {
    const obj: any = {};
    if (message.admin !== "") {
      obj.admin = message.admin;
    }
    if (message.aud !== "") {
      obj.aud = message.aud;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgDeleteAudience>, I>>(base?: I): MsgDeleteAudience {
    return MsgDeleteAudience.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgDeleteAudience>, I>>(object: I): MsgDeleteAudience {
    const message = createBaseMsgDeleteAudience();
    message.admin = object.admin ?? "";
    message.aud = object.aud ?? "";
    return message;
  },
};

function createBaseMsgDeleteAudienceResponse(): MsgDeleteAudienceResponse {
  return {};
}

export const MsgDeleteAudienceResponse = {
  encode(_: MsgDeleteAudienceResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgDeleteAudienceResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgDeleteAudienceResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgDeleteAudienceResponse {
    return {};
  },

  toJSON(_: MsgDeleteAudienceResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgDeleteAudienceResponse>, I>>(base?: I): MsgDeleteAudienceResponse {
    return MsgDeleteAudienceResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgDeleteAudienceResponse>, I>>(_: I): MsgDeleteAudienceResponse {
    const message = createBaseMsgDeleteAudienceResponse();
    return message;
  },
};

/** Msg defines the Msg service. */
export interface Msg {
  CreateAudienceClaim(
    request: DeepPartial<MsgCreateAudienceClaim>,
    metadata?: grpc.Metadata,
  ): Promise<MsgCreateAudienceClaimResponse>;
  DeleteAudienceClaim(
    request: DeepPartial<MsgDeleteAudienceClaim>,
    metadata?: grpc.Metadata,
  ): Promise<MsgDeleteAudienceClaimResponse>;
  CreateAudience(request: DeepPartial<MsgCreateAudience>, metadata?: grpc.Metadata): Promise<MsgCreateAudienceResponse>;
  UpdateAudience(request: DeepPartial<MsgUpdateAudience>, metadata?: grpc.Metadata): Promise<MsgUpdateAudienceResponse>;
  DeleteAudience(request: DeepPartial<MsgDeleteAudience>, metadata?: grpc.Metadata): Promise<MsgDeleteAudienceResponse>;
}

export class MsgClientImpl implements Msg {
  private readonly rpc: Rpc;

  constructor(rpc: Rpc) {
    this.rpc = rpc;
    this.CreateAudienceClaim = this.CreateAudienceClaim.bind(this);
    this.DeleteAudienceClaim = this.DeleteAudienceClaim.bind(this);
    this.CreateAudience = this.CreateAudience.bind(this);
    this.UpdateAudience = this.UpdateAudience.bind(this);
    this.DeleteAudience = this.DeleteAudience.bind(this);
  }

  CreateAudienceClaim(
    request: DeepPartial<MsgCreateAudienceClaim>,
    metadata?: grpc.Metadata,
  ): Promise<MsgCreateAudienceClaimResponse> {
    return this.rpc.unary(MsgCreateAudienceClaimDesc, MsgCreateAudienceClaim.fromPartial(request), metadata);
  }

  DeleteAudienceClaim(
    request: DeepPartial<MsgDeleteAudienceClaim>,
    metadata?: grpc.Metadata,
  ): Promise<MsgDeleteAudienceClaimResponse> {
    return this.rpc.unary(MsgDeleteAudienceClaimDesc, MsgDeleteAudienceClaim.fromPartial(request), metadata);
  }

  CreateAudience(
    request: DeepPartial<MsgCreateAudience>,
    metadata?: grpc.Metadata,
  ): Promise<MsgCreateAudienceResponse> {
    return this.rpc.unary(MsgCreateAudienceDesc, MsgCreateAudience.fromPartial(request), metadata);
  }

  UpdateAudience(
    request: DeepPartial<MsgUpdateAudience>,
    metadata?: grpc.Metadata,
  ): Promise<MsgUpdateAudienceResponse> {
    return this.rpc.unary(MsgUpdateAudienceDesc, MsgUpdateAudience.fromPartial(request), metadata);
  }

  DeleteAudience(
    request: DeepPartial<MsgDeleteAudience>,
    metadata?: grpc.Metadata,
  ): Promise<MsgDeleteAudienceResponse> {
    return this.rpc.unary(MsgDeleteAudienceDesc, MsgDeleteAudience.fromPartial(request), metadata);
  }
}

export const MsgDesc = { serviceName: "xion.jwk.v1.Msg" };

export const MsgCreateAudienceClaimDesc: UnaryMethodDefinitionish = {
  methodName: "CreateAudienceClaim",
  service: MsgDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return MsgCreateAudienceClaim.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = MsgCreateAudienceClaimResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const MsgDeleteAudienceClaimDesc: UnaryMethodDefinitionish = {
  methodName: "DeleteAudienceClaim",
  service: MsgDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return MsgDeleteAudienceClaim.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = MsgDeleteAudienceClaimResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const MsgCreateAudienceDesc: UnaryMethodDefinitionish = {
  methodName: "CreateAudience",
  service: MsgDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return MsgCreateAudience.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = MsgCreateAudienceResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const MsgUpdateAudienceDesc: UnaryMethodDefinitionish = {
  methodName: "UpdateAudience",
  service: MsgDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return MsgUpdateAudience.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = MsgUpdateAudienceResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const MsgDeleteAudienceDesc: UnaryMethodDefinitionish = {
  methodName: "DeleteAudience",
  service: MsgDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return MsgDeleteAudience.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = MsgDeleteAudienceResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

interface UnaryMethodDefinitionishR extends grpc.UnaryMethodDefinition<any, any> {
  requestStream: any;
  responseStream: any;
}

type UnaryMethodDefinitionish = UnaryMethodDefinitionishR;

interface Rpc {
  unary<T extends UnaryMethodDefinitionish>(
    methodDesc: T,
    request: any,
    metadata: grpc.Metadata | undefined,
  ): Promise<any>;
}

export class GrpcWebImpl {
  private host: string;
  private options: {
    transport?: grpc.TransportFactory;

    debug?: boolean;
    metadata?: grpc.Metadata;
    upStreamRetryCodes?: number[];
  };

  constructor(
    host: string,
    options: {
      transport?: grpc.TransportFactory;

      debug?: boolean;
      metadata?: grpc.Metadata;
      upStreamRetryCodes?: number[];
    },
  ) {
    this.host = host;
    this.options = options;
  }

  unary<T extends UnaryMethodDefinitionish>(
    methodDesc: T,
    _request: any,
    metadata: grpc.Metadata | undefined,
  ): Promise<any> {
    const request = { ..._request, ...methodDesc.requestType };
    const maybeCombinedMetadata = metadata && this.options.metadata
      ? new BrowserHeaders({ ...this.options?.metadata.headersMap, ...metadata?.headersMap })
      : metadata ?? this.options.metadata;
    return new Promise((resolve, reject) => {
      grpc.unary(methodDesc, {
        request,
        host: this.host,
        metadata: maybeCombinedMetadata ?? {},
        ...(this.options.transport !== undefined ? { transport: this.options.transport } : {}),
        debug: this.options.debug ?? false,
        onEnd: function (response) {
          if (response.status === grpc.Code.OK) {
            resolve(response.message!.toObject());
          } else {
            const err = new GrpcWebError(response.statusMessage, response.status, response.trailers);
            reject(err);
          }
        },
      });
    });
  }
}

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export class GrpcWebError extends globalThis.Error {
  constructor(message: string, public code: grpc.Code, public metadata: grpc.Metadata) {
    super(message);
  }
}
