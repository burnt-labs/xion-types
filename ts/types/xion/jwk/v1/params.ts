// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               unknown
// source: xion/jwk/v1/params.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "xion.jwk.v1";

/** Params defines the parameters for the module. */
export interface Params {
  /** in nanoseconds */
  timeOffset: Long;
  /** gas to deploy a new project/audience */
  deploymentGas: Long;
}

function createBaseParams(): Params {
  return { timeOffset: Long.UZERO, deploymentGas: Long.UZERO };
}

export const Params: MessageFns<Params> = {
  encode(message: Params, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (!message.timeOffset.equals(Long.UZERO)) {
      writer.uint32(8).uint64(message.timeOffset.toString());
    }
    if (!message.deploymentGas.equals(Long.UZERO)) {
      writer.uint32(16).uint64(message.deploymentGas.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Params {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.timeOffset = Long.fromString(reader.uint64().toString(), true);
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.deploymentGas = Long.fromString(reader.uint64().toString(), true);
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Params {
    return {
      timeOffset: isSet(object.timeOffset) ? Long.fromValue(object.timeOffset) : Long.UZERO,
      deploymentGas: isSet(object.deploymentGas) ? Long.fromValue(object.deploymentGas) : Long.UZERO,
    };
  },

  toJSON(message: Params): unknown {
    const obj: any = {};
    if (!message.timeOffset.equals(Long.UZERO)) {
      obj.timeOffset = (message.timeOffset || Long.UZERO).toString();
    }
    if (!message.deploymentGas.equals(Long.UZERO)) {
      obj.deploymentGas = (message.deploymentGas || Long.UZERO).toString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Params>, I>>(base?: I): Params {
    return Params.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Params>, I>>(object: I): Params {
    const message = createBaseParams();
    message.timeOffset = (object.timeOffset !== undefined && object.timeOffset !== null)
      ? Long.fromValue(object.timeOffset)
      : Long.UZERO;
    message.deploymentGas = (object.deploymentGas !== undefined && object.deploymentGas !== null)
      ? Long.fromValue(object.deploymentGas)
      : Long.UZERO;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
