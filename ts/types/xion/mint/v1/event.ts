// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               unknown
// source: xion/mint/v1/event.proto

/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal";

export const protobufPackage = "xion.mint.v1";

/**
 * MintIncentiveTokens defines an event emitted on each block from the mint
 * module EndBlocker
 */
export interface MintIncentiveTokens {
  bondedRatio: string;
  inflation: string;
  annualProvisions: string;
  neededAmount: Long;
  collectedAmount: Long;
  mintedAmount: Long;
  burnedAmount: Long;
}

function createBaseMintIncentiveTokens(): MintIncentiveTokens {
  return {
    bondedRatio: "",
    inflation: "",
    annualProvisions: "",
    neededAmount: Long.UZERO,
    collectedAmount: Long.UZERO,
    mintedAmount: Long.UZERO,
    burnedAmount: Long.UZERO,
  };
}

export const MintIncentiveTokens = {
  encode(message: MintIncentiveTokens, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.bondedRatio !== "") {
      writer.uint32(10).string(message.bondedRatio);
    }
    if (message.inflation !== "") {
      writer.uint32(18).string(message.inflation);
    }
    if (message.annualProvisions !== "") {
      writer.uint32(26).string(message.annualProvisions);
    }
    if (!message.neededAmount.equals(Long.UZERO)) {
      writer.uint32(32).uint64(message.neededAmount);
    }
    if (!message.collectedAmount.equals(Long.UZERO)) {
      writer.uint32(40).uint64(message.collectedAmount);
    }
    if (!message.mintedAmount.equals(Long.UZERO)) {
      writer.uint32(48).uint64(message.mintedAmount);
    }
    if (!message.burnedAmount.equals(Long.UZERO)) {
      writer.uint32(56).uint64(message.burnedAmount);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MintIncentiveTokens {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMintIncentiveTokens();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.bondedRatio = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.inflation = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.annualProvisions = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.neededAmount = reader.uint64() as Long;
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.collectedAmount = reader.uint64() as Long;
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.mintedAmount = reader.uint64() as Long;
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.burnedAmount = reader.uint64() as Long;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MintIncentiveTokens {
    return {
      bondedRatio: isSet(object.bondedRatio) ? globalThis.String(object.bondedRatio) : "",
      inflation: isSet(object.inflation) ? globalThis.String(object.inflation) : "",
      annualProvisions: isSet(object.annualProvisions) ? globalThis.String(object.annualProvisions) : "",
      neededAmount: isSet(object.neededAmount) ? Long.fromValue(object.neededAmount) : Long.UZERO,
      collectedAmount: isSet(object.collectedAmount) ? Long.fromValue(object.collectedAmount) : Long.UZERO,
      mintedAmount: isSet(object.mintedAmount) ? Long.fromValue(object.mintedAmount) : Long.UZERO,
      burnedAmount: isSet(object.burnedAmount) ? Long.fromValue(object.burnedAmount) : Long.UZERO,
    };
  },

  toJSON(message: MintIncentiveTokens): unknown {
    const obj: any = {};
    if (message.bondedRatio !== "") {
      obj.bondedRatio = message.bondedRatio;
    }
    if (message.inflation !== "") {
      obj.inflation = message.inflation;
    }
    if (message.annualProvisions !== "") {
      obj.annualProvisions = message.annualProvisions;
    }
    if (!message.neededAmount.equals(Long.UZERO)) {
      obj.neededAmount = (message.neededAmount || Long.UZERO).toString();
    }
    if (!message.collectedAmount.equals(Long.UZERO)) {
      obj.collectedAmount = (message.collectedAmount || Long.UZERO).toString();
    }
    if (!message.mintedAmount.equals(Long.UZERO)) {
      obj.mintedAmount = (message.mintedAmount || Long.UZERO).toString();
    }
    if (!message.burnedAmount.equals(Long.UZERO)) {
      obj.burnedAmount = (message.burnedAmount || Long.UZERO).toString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MintIncentiveTokens>, I>>(base?: I): MintIncentiveTokens {
    return MintIncentiveTokens.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MintIncentiveTokens>, I>>(object: I): MintIncentiveTokens {
    const message = createBaseMintIncentiveTokens();
    message.bondedRatio = object.bondedRatio ?? "";
    message.inflation = object.inflation ?? "";
    message.annualProvisions = object.annualProvisions ?? "";
    message.neededAmount = (object.neededAmount !== undefined && object.neededAmount !== null)
      ? Long.fromValue(object.neededAmount)
      : Long.UZERO;
    message.collectedAmount = (object.collectedAmount !== undefined && object.collectedAmount !== null)
      ? Long.fromValue(object.collectedAmount)
      : Long.UZERO;
    message.mintedAmount = (object.mintedAmount !== undefined && object.mintedAmount !== null)
      ? Long.fromValue(object.mintedAmount)
      : Long.UZERO;
    message.burnedAmount = (object.burnedAmount !== undefined && object.burnedAmount !== null)
      ? Long.fromValue(object.burnedAmount)
      : Long.UZERO;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
