// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               unknown
// source: xion/v1/query.proto

/* eslint-disable */
import { grpc } from "@improbable-eng/grpc-web";
import { BrowserHeaders } from "browser-headers";
import Long from "long";
import _m0 from "protobufjs/minimal";
import { Coin } from "../../cosmos/base/v1beta1/coin";

export const protobufPackage = "xion.v1";

export interface QueryWebAuthNVerifyRegisterRequest {
  addr: string;
  challenge: string;
  rp: string;
  data: Uint8Array;
}

export interface QueryWebAuthNVerifyRegisterResponse {
  credential: Uint8Array;
}

export interface QueryWebAuthNVerifyAuthenticateRequest {
  addr: string;
  challenge: string;
  rp: string;
  credential: Uint8Array;
  data: Uint8Array;
}

export interface QueryWebAuthNVerifyAuthenticateResponse {
}

export interface QueryPlatformPercentageRequest {
}

export interface QueryPlatformPercentageResponse {
  platformPercentage: Long;
}

export interface QueryPlatformMinimumRequest {
}

export interface QueryPlatformMinimumResponse {
  minimums: Coin[];
}

function createBaseQueryWebAuthNVerifyRegisterRequest(): QueryWebAuthNVerifyRegisterRequest {
  return { addr: "", challenge: "", rp: "", data: new Uint8Array(0) };
}

export const QueryWebAuthNVerifyRegisterRequest = {
  encode(message: QueryWebAuthNVerifyRegisterRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.addr !== "") {
      writer.uint32(10).string(message.addr);
    }
    if (message.challenge !== "") {
      writer.uint32(18).string(message.challenge);
    }
    if (message.rp !== "") {
      writer.uint32(26).string(message.rp);
    }
    if (message.data.length !== 0) {
      writer.uint32(34).bytes(message.data);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryWebAuthNVerifyRegisterRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryWebAuthNVerifyRegisterRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.addr = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.challenge = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.rp = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.data = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryWebAuthNVerifyRegisterRequest {
    return {
      addr: isSet(object.addr) ? globalThis.String(object.addr) : "",
      challenge: isSet(object.challenge) ? globalThis.String(object.challenge) : "",
      rp: isSet(object.rp) ? globalThis.String(object.rp) : "",
      data: isSet(object.data) ? bytesFromBase64(object.data) : new Uint8Array(0),
    };
  },

  toJSON(message: QueryWebAuthNVerifyRegisterRequest): unknown {
    const obj: any = {};
    if (message.addr !== "") {
      obj.addr = message.addr;
    }
    if (message.challenge !== "") {
      obj.challenge = message.challenge;
    }
    if (message.rp !== "") {
      obj.rp = message.rp;
    }
    if (message.data.length !== 0) {
      obj.data = base64FromBytes(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryWebAuthNVerifyRegisterRequest>, I>>(
    base?: I,
  ): QueryWebAuthNVerifyRegisterRequest {
    return QueryWebAuthNVerifyRegisterRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryWebAuthNVerifyRegisterRequest>, I>>(
    object: I,
  ): QueryWebAuthNVerifyRegisterRequest {
    const message = createBaseQueryWebAuthNVerifyRegisterRequest();
    message.addr = object.addr ?? "";
    message.challenge = object.challenge ?? "";
    message.rp = object.rp ?? "";
    message.data = object.data ?? new Uint8Array(0);
    return message;
  },
};

function createBaseQueryWebAuthNVerifyRegisterResponse(): QueryWebAuthNVerifyRegisterResponse {
  return { credential: new Uint8Array(0) };
}

export const QueryWebAuthNVerifyRegisterResponse = {
  encode(message: QueryWebAuthNVerifyRegisterResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.credential.length !== 0) {
      writer.uint32(10).bytes(message.credential);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryWebAuthNVerifyRegisterResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryWebAuthNVerifyRegisterResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.credential = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryWebAuthNVerifyRegisterResponse {
    return { credential: isSet(object.credential) ? bytesFromBase64(object.credential) : new Uint8Array(0) };
  },

  toJSON(message: QueryWebAuthNVerifyRegisterResponse): unknown {
    const obj: any = {};
    if (message.credential.length !== 0) {
      obj.credential = base64FromBytes(message.credential);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryWebAuthNVerifyRegisterResponse>, I>>(
    base?: I,
  ): QueryWebAuthNVerifyRegisterResponse {
    return QueryWebAuthNVerifyRegisterResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryWebAuthNVerifyRegisterResponse>, I>>(
    object: I,
  ): QueryWebAuthNVerifyRegisterResponse {
    const message = createBaseQueryWebAuthNVerifyRegisterResponse();
    message.credential = object.credential ?? new Uint8Array(0);
    return message;
  },
};

function createBaseQueryWebAuthNVerifyAuthenticateRequest(): QueryWebAuthNVerifyAuthenticateRequest {
  return { addr: "", challenge: "", rp: "", credential: new Uint8Array(0), data: new Uint8Array(0) };
}

export const QueryWebAuthNVerifyAuthenticateRequest = {
  encode(message: QueryWebAuthNVerifyAuthenticateRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.addr !== "") {
      writer.uint32(10).string(message.addr);
    }
    if (message.challenge !== "") {
      writer.uint32(18).string(message.challenge);
    }
    if (message.rp !== "") {
      writer.uint32(26).string(message.rp);
    }
    if (message.credential.length !== 0) {
      writer.uint32(34).bytes(message.credential);
    }
    if (message.data.length !== 0) {
      writer.uint32(42).bytes(message.data);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryWebAuthNVerifyAuthenticateRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryWebAuthNVerifyAuthenticateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.addr = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.challenge = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.rp = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.credential = reader.bytes();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.data = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryWebAuthNVerifyAuthenticateRequest {
    return {
      addr: isSet(object.addr) ? globalThis.String(object.addr) : "",
      challenge: isSet(object.challenge) ? globalThis.String(object.challenge) : "",
      rp: isSet(object.rp) ? globalThis.String(object.rp) : "",
      credential: isSet(object.credential) ? bytesFromBase64(object.credential) : new Uint8Array(0),
      data: isSet(object.data) ? bytesFromBase64(object.data) : new Uint8Array(0),
    };
  },

  toJSON(message: QueryWebAuthNVerifyAuthenticateRequest): unknown {
    const obj: any = {};
    if (message.addr !== "") {
      obj.addr = message.addr;
    }
    if (message.challenge !== "") {
      obj.challenge = message.challenge;
    }
    if (message.rp !== "") {
      obj.rp = message.rp;
    }
    if (message.credential.length !== 0) {
      obj.credential = base64FromBytes(message.credential);
    }
    if (message.data.length !== 0) {
      obj.data = base64FromBytes(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryWebAuthNVerifyAuthenticateRequest>, I>>(
    base?: I,
  ): QueryWebAuthNVerifyAuthenticateRequest {
    return QueryWebAuthNVerifyAuthenticateRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryWebAuthNVerifyAuthenticateRequest>, I>>(
    object: I,
  ): QueryWebAuthNVerifyAuthenticateRequest {
    const message = createBaseQueryWebAuthNVerifyAuthenticateRequest();
    message.addr = object.addr ?? "";
    message.challenge = object.challenge ?? "";
    message.rp = object.rp ?? "";
    message.credential = object.credential ?? new Uint8Array(0);
    message.data = object.data ?? new Uint8Array(0);
    return message;
  },
};

function createBaseQueryWebAuthNVerifyAuthenticateResponse(): QueryWebAuthNVerifyAuthenticateResponse {
  return {};
}

export const QueryWebAuthNVerifyAuthenticateResponse = {
  encode(_: QueryWebAuthNVerifyAuthenticateResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryWebAuthNVerifyAuthenticateResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryWebAuthNVerifyAuthenticateResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): QueryWebAuthNVerifyAuthenticateResponse {
    return {};
  },

  toJSON(_: QueryWebAuthNVerifyAuthenticateResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryWebAuthNVerifyAuthenticateResponse>, I>>(
    base?: I,
  ): QueryWebAuthNVerifyAuthenticateResponse {
    return QueryWebAuthNVerifyAuthenticateResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryWebAuthNVerifyAuthenticateResponse>, I>>(
    _: I,
  ): QueryWebAuthNVerifyAuthenticateResponse {
    const message = createBaseQueryWebAuthNVerifyAuthenticateResponse();
    return message;
  },
};

function createBaseQueryPlatformPercentageRequest(): QueryPlatformPercentageRequest {
  return {};
}

export const QueryPlatformPercentageRequest = {
  encode(_: QueryPlatformPercentageRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryPlatformPercentageRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryPlatformPercentageRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): QueryPlatformPercentageRequest {
    return {};
  },

  toJSON(_: QueryPlatformPercentageRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryPlatformPercentageRequest>, I>>(base?: I): QueryPlatformPercentageRequest {
    return QueryPlatformPercentageRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryPlatformPercentageRequest>, I>>(_: I): QueryPlatformPercentageRequest {
    const message = createBaseQueryPlatformPercentageRequest();
    return message;
  },
};

function createBaseQueryPlatformPercentageResponse(): QueryPlatformPercentageResponse {
  return { platformPercentage: Long.UZERO };
}

export const QueryPlatformPercentageResponse = {
  encode(message: QueryPlatformPercentageResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (!message.platformPercentage.equals(Long.UZERO)) {
      writer.uint32(8).uint64(message.platformPercentage);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryPlatformPercentageResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryPlatformPercentageResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.platformPercentage = reader.uint64() as Long;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryPlatformPercentageResponse {
    return {
      platformPercentage: isSet(object.platformPercentage) ? Long.fromValue(object.platformPercentage) : Long.UZERO,
    };
  },

  toJSON(message: QueryPlatformPercentageResponse): unknown {
    const obj: any = {};
    if (!message.platformPercentage.equals(Long.UZERO)) {
      obj.platformPercentage = (message.platformPercentage || Long.UZERO).toString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryPlatformPercentageResponse>, I>>(base?: I): QueryPlatformPercentageResponse {
    return QueryPlatformPercentageResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryPlatformPercentageResponse>, I>>(
    object: I,
  ): QueryPlatformPercentageResponse {
    const message = createBaseQueryPlatformPercentageResponse();
    message.platformPercentage = (object.platformPercentage !== undefined && object.platformPercentage !== null)
      ? Long.fromValue(object.platformPercentage)
      : Long.UZERO;
    return message;
  },
};

function createBaseQueryPlatformMinimumRequest(): QueryPlatformMinimumRequest {
  return {};
}

export const QueryPlatformMinimumRequest = {
  encode(_: QueryPlatformMinimumRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryPlatformMinimumRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryPlatformMinimumRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): QueryPlatformMinimumRequest {
    return {};
  },

  toJSON(_: QueryPlatformMinimumRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryPlatformMinimumRequest>, I>>(base?: I): QueryPlatformMinimumRequest {
    return QueryPlatformMinimumRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryPlatformMinimumRequest>, I>>(_: I): QueryPlatformMinimumRequest {
    const message = createBaseQueryPlatformMinimumRequest();
    return message;
  },
};

function createBaseQueryPlatformMinimumResponse(): QueryPlatformMinimumResponse {
  return { minimums: [] };
}

export const QueryPlatformMinimumResponse = {
  encode(message: QueryPlatformMinimumResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.minimums) {
      Coin.encode(v!, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryPlatformMinimumResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryPlatformMinimumResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 3:
          if (tag !== 26) {
            break;
          }

          message.minimums.push(Coin.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryPlatformMinimumResponse {
    return {
      minimums: globalThis.Array.isArray(object?.minimums) ? object.minimums.map((e: any) => Coin.fromJSON(e)) : [],
    };
  },

  toJSON(message: QueryPlatformMinimumResponse): unknown {
    const obj: any = {};
    if (message.minimums?.length) {
      obj.minimums = message.minimums.map((e) => Coin.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryPlatformMinimumResponse>, I>>(base?: I): QueryPlatformMinimumResponse {
    return QueryPlatformMinimumResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryPlatformMinimumResponse>, I>>(object: I): QueryPlatformMinimumResponse {
    const message = createBaseQueryPlatformMinimumResponse();
    message.minimums = object.minimums?.map((e) => Coin.fromPartial(e)) || [];
    return message;
  },
};

export interface Query {
  WebAuthNVerifyRegister(
    request: DeepPartial<QueryWebAuthNVerifyRegisterRequest>,
    metadata?: grpc.Metadata,
  ): Promise<QueryWebAuthNVerifyRegisterResponse>;
  WebAuthNVerifyAuthenticate(
    request: DeepPartial<QueryWebAuthNVerifyAuthenticateRequest>,
    metadata?: grpc.Metadata,
  ): Promise<QueryWebAuthNVerifyAuthenticateResponse>;
  PlatformPercentage(
    request: DeepPartial<QueryPlatformPercentageRequest>,
    metadata?: grpc.Metadata,
  ): Promise<QueryPlatformPercentageResponse>;
  PlatformMinimum(
    request: DeepPartial<QueryPlatformMinimumRequest>,
    metadata?: grpc.Metadata,
  ): Promise<QueryPlatformMinimumResponse>;
}

export class QueryClientImpl implements Query {
  private readonly rpc: Rpc;

  constructor(rpc: Rpc) {
    this.rpc = rpc;
    this.WebAuthNVerifyRegister = this.WebAuthNVerifyRegister.bind(this);
    this.WebAuthNVerifyAuthenticate = this.WebAuthNVerifyAuthenticate.bind(this);
    this.PlatformPercentage = this.PlatformPercentage.bind(this);
    this.PlatformMinimum = this.PlatformMinimum.bind(this);
  }

  WebAuthNVerifyRegister(
    request: DeepPartial<QueryWebAuthNVerifyRegisterRequest>,
    metadata?: grpc.Metadata,
  ): Promise<QueryWebAuthNVerifyRegisterResponse> {
    return this.rpc.unary(
      QueryWebAuthNVerifyRegisterDesc,
      QueryWebAuthNVerifyRegisterRequest.fromPartial(request),
      metadata,
    );
  }

  WebAuthNVerifyAuthenticate(
    request: DeepPartial<QueryWebAuthNVerifyAuthenticateRequest>,
    metadata?: grpc.Metadata,
  ): Promise<QueryWebAuthNVerifyAuthenticateResponse> {
    return this.rpc.unary(
      QueryWebAuthNVerifyAuthenticateDesc,
      QueryWebAuthNVerifyAuthenticateRequest.fromPartial(request),
      metadata,
    );
  }

  PlatformPercentage(
    request: DeepPartial<QueryPlatformPercentageRequest>,
    metadata?: grpc.Metadata,
  ): Promise<QueryPlatformPercentageResponse> {
    return this.rpc.unary(QueryPlatformPercentageDesc, QueryPlatformPercentageRequest.fromPartial(request), metadata);
  }

  PlatformMinimum(
    request: DeepPartial<QueryPlatformMinimumRequest>,
    metadata?: grpc.Metadata,
  ): Promise<QueryPlatformMinimumResponse> {
    return this.rpc.unary(QueryPlatformMinimumDesc, QueryPlatformMinimumRequest.fromPartial(request), metadata);
  }
}

export const QueryDesc = { serviceName: "xion.v1.Query" };

export const QueryWebAuthNVerifyRegisterDesc: UnaryMethodDefinitionish = {
  methodName: "WebAuthNVerifyRegister",
  service: QueryDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return QueryWebAuthNVerifyRegisterRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = QueryWebAuthNVerifyRegisterResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const QueryWebAuthNVerifyAuthenticateDesc: UnaryMethodDefinitionish = {
  methodName: "WebAuthNVerifyAuthenticate",
  service: QueryDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return QueryWebAuthNVerifyAuthenticateRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = QueryWebAuthNVerifyAuthenticateResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const QueryPlatformPercentageDesc: UnaryMethodDefinitionish = {
  methodName: "PlatformPercentage",
  service: QueryDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return QueryPlatformPercentageRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = QueryPlatformPercentageResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const QueryPlatformMinimumDesc: UnaryMethodDefinitionish = {
  methodName: "PlatformMinimum",
  service: QueryDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return QueryPlatformMinimumRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = QueryPlatformMinimumResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

interface UnaryMethodDefinitionishR extends grpc.UnaryMethodDefinition<any, any> {
  requestStream: any;
  responseStream: any;
}

type UnaryMethodDefinitionish = UnaryMethodDefinitionishR;

interface Rpc {
  unary<T extends UnaryMethodDefinitionish>(
    methodDesc: T,
    request: any,
    metadata: grpc.Metadata | undefined,
  ): Promise<any>;
}

export class GrpcWebImpl {
  private host: string;
  private options: {
    transport?: grpc.TransportFactory;

    debug?: boolean;
    metadata?: grpc.Metadata;
    upStreamRetryCodes?: number[];
  };

  constructor(
    host: string,
    options: {
      transport?: grpc.TransportFactory;

      debug?: boolean;
      metadata?: grpc.Metadata;
      upStreamRetryCodes?: number[];
    },
  ) {
    this.host = host;
    this.options = options;
  }

  unary<T extends UnaryMethodDefinitionish>(
    methodDesc: T,
    _request: any,
    metadata: grpc.Metadata | undefined,
  ): Promise<any> {
    const request = { ..._request, ...methodDesc.requestType };
    const maybeCombinedMetadata = metadata && this.options.metadata
      ? new BrowserHeaders({ ...this.options?.metadata.headersMap, ...metadata?.headersMap })
      : metadata ?? this.options.metadata;
    return new Promise((resolve, reject) => {
      grpc.unary(methodDesc, {
        request,
        host: this.host,
        metadata: maybeCombinedMetadata ?? {},
        ...(this.options.transport !== undefined ? { transport: this.options.transport } : {}),
        debug: this.options.debug ?? false,
        onEnd: function (response) {
          if (response.status === grpc.Code.OK) {
            resolve(response.message!.toObject());
          } else {
            const err = new GrpcWebError(response.statusMessage, response.status, response.trailers);
            reject(err);
          }
        },
      });
    });
  }
}

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export class GrpcWebError extends globalThis.Error {
  constructor(message: string, public code: grpc.Code, public metadata: grpc.Metadata) {
    super(message);
  }
}
