// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               unknown
// source: xion/feeabs/v1beta1/query.proto

/* eslint-disable */
import { grpc } from "@improbable-eng/grpc-web";
import { BrowserHeaders } from "browser-headers";
import Long from "long";
import _m0 from "protobufjs/minimal";
import { Coin } from "../../../cosmos/base/v1beta1/coin";
import { HostChainFeeAbsConfig } from "./proposal";

export const protobufPackage = "xion.feeabs.v1beta1";

/** QueryHostChainConfigRequest */
export interface QueryHostChainConfigRequest {
  ibcDenom: string;
}

/** QueryHostChainConfigResponse */
export interface QueryHostChainConfigResponse {
  hostChainConfig?: HostChainFeeAbsConfig | undefined;
}

/**
 * QueryOsmosisArithmeticTwapRequest is the request type for the Query/Feeabs
 * RPC method.
 */
export interface QueryOsmosisArithmeticTwapRequest {
  ibcDenom: string;
}

/** QueryOsmosisArithmeticTwapResponse */
export interface QueryOsmosisArithmeticTwapResponse {
  arithmeticTwap: string;
}

/**
 * QueryFeeabsModuleBalacesRequest is the request type for the Query/Feeabs RPC
 * method.
 */
export interface QueryFeeabsModuleBalacesRequest {
}

/** QueryFeeabsModuleBalacesResponse */
export interface QueryFeeabsModuleBalacesResponse {
  balances: Coin[];
  address: string;
}

/** AllQueryHostChainConfigRequest */
export interface AllQueryHostChainConfigRequest {
}

/** AllQueryHostChainConfigResponse */
export interface AllQueryHostChainConfigResponse {
  allHostChainConfig: HostChainFeeAbsConfig[];
}

function createBaseQueryHostChainConfigRequest(): QueryHostChainConfigRequest {
  return { ibcDenom: "" };
}

export const QueryHostChainConfigRequest = {
  encode(message: QueryHostChainConfigRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.ibcDenom !== "") {
      writer.uint32(10).string(message.ibcDenom);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryHostChainConfigRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryHostChainConfigRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.ibcDenom = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryHostChainConfigRequest {
    return { ibcDenom: isSet(object.ibcDenom) ? globalThis.String(object.ibcDenom) : "" };
  },

  toJSON(message: QueryHostChainConfigRequest): unknown {
    const obj: any = {};
    if (message.ibcDenom !== "") {
      obj.ibcDenom = message.ibcDenom;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryHostChainConfigRequest>, I>>(base?: I): QueryHostChainConfigRequest {
    return QueryHostChainConfigRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryHostChainConfigRequest>, I>>(object: I): QueryHostChainConfigRequest {
    const message = createBaseQueryHostChainConfigRequest();
    message.ibcDenom = object.ibcDenom ?? "";
    return message;
  },
};

function createBaseQueryHostChainConfigResponse(): QueryHostChainConfigResponse {
  return { hostChainConfig: undefined };
}

export const QueryHostChainConfigResponse = {
  encode(message: QueryHostChainConfigResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.hostChainConfig !== undefined) {
      HostChainFeeAbsConfig.encode(message.hostChainConfig, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryHostChainConfigResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryHostChainConfigResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.hostChainConfig = HostChainFeeAbsConfig.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryHostChainConfigResponse {
    return {
      hostChainConfig: isSet(object.hostChainConfig)
        ? HostChainFeeAbsConfig.fromJSON(object.hostChainConfig)
        : undefined,
    };
  },

  toJSON(message: QueryHostChainConfigResponse): unknown {
    const obj: any = {};
    if (message.hostChainConfig !== undefined) {
      obj.hostChainConfig = HostChainFeeAbsConfig.toJSON(message.hostChainConfig);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryHostChainConfigResponse>, I>>(base?: I): QueryHostChainConfigResponse {
    return QueryHostChainConfigResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryHostChainConfigResponse>, I>>(object: I): QueryHostChainConfigResponse {
    const message = createBaseQueryHostChainConfigResponse();
    message.hostChainConfig = (object.hostChainConfig !== undefined && object.hostChainConfig !== null)
      ? HostChainFeeAbsConfig.fromPartial(object.hostChainConfig)
      : undefined;
    return message;
  },
};

function createBaseQueryOsmosisArithmeticTwapRequest(): QueryOsmosisArithmeticTwapRequest {
  return { ibcDenom: "" };
}

export const QueryOsmosisArithmeticTwapRequest = {
  encode(message: QueryOsmosisArithmeticTwapRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.ibcDenom !== "") {
      writer.uint32(10).string(message.ibcDenom);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryOsmosisArithmeticTwapRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryOsmosisArithmeticTwapRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.ibcDenom = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryOsmosisArithmeticTwapRequest {
    return { ibcDenom: isSet(object.ibcDenom) ? globalThis.String(object.ibcDenom) : "" };
  },

  toJSON(message: QueryOsmosisArithmeticTwapRequest): unknown {
    const obj: any = {};
    if (message.ibcDenom !== "") {
      obj.ibcDenom = message.ibcDenom;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryOsmosisArithmeticTwapRequest>, I>>(
    base?: I,
  ): QueryOsmosisArithmeticTwapRequest {
    return QueryOsmosisArithmeticTwapRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryOsmosisArithmeticTwapRequest>, I>>(
    object: I,
  ): QueryOsmosisArithmeticTwapRequest {
    const message = createBaseQueryOsmosisArithmeticTwapRequest();
    message.ibcDenom = object.ibcDenom ?? "";
    return message;
  },
};

function createBaseQueryOsmosisArithmeticTwapResponse(): QueryOsmosisArithmeticTwapResponse {
  return { arithmeticTwap: "" };
}

export const QueryOsmosisArithmeticTwapResponse = {
  encode(message: QueryOsmosisArithmeticTwapResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.arithmeticTwap !== "") {
      writer.uint32(10).string(message.arithmeticTwap);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryOsmosisArithmeticTwapResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryOsmosisArithmeticTwapResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.arithmeticTwap = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryOsmosisArithmeticTwapResponse {
    return { arithmeticTwap: isSet(object.arithmeticTwap) ? globalThis.String(object.arithmeticTwap) : "" };
  },

  toJSON(message: QueryOsmosisArithmeticTwapResponse): unknown {
    const obj: any = {};
    if (message.arithmeticTwap !== "") {
      obj.arithmeticTwap = message.arithmeticTwap;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryOsmosisArithmeticTwapResponse>, I>>(
    base?: I,
  ): QueryOsmosisArithmeticTwapResponse {
    return QueryOsmosisArithmeticTwapResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryOsmosisArithmeticTwapResponse>, I>>(
    object: I,
  ): QueryOsmosisArithmeticTwapResponse {
    const message = createBaseQueryOsmosisArithmeticTwapResponse();
    message.arithmeticTwap = object.arithmeticTwap ?? "";
    return message;
  },
};

function createBaseQueryFeeabsModuleBalacesRequest(): QueryFeeabsModuleBalacesRequest {
  return {};
}

export const QueryFeeabsModuleBalacesRequest = {
  encode(_: QueryFeeabsModuleBalacesRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryFeeabsModuleBalacesRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryFeeabsModuleBalacesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): QueryFeeabsModuleBalacesRequest {
    return {};
  },

  toJSON(_: QueryFeeabsModuleBalacesRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryFeeabsModuleBalacesRequest>, I>>(base?: I): QueryFeeabsModuleBalacesRequest {
    return QueryFeeabsModuleBalacesRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryFeeabsModuleBalacesRequest>, I>>(_: I): QueryFeeabsModuleBalacesRequest {
    const message = createBaseQueryFeeabsModuleBalacesRequest();
    return message;
  },
};

function createBaseQueryFeeabsModuleBalacesResponse(): QueryFeeabsModuleBalacesResponse {
  return { balances: [], address: "" };
}

export const QueryFeeabsModuleBalacesResponse = {
  encode(message: QueryFeeabsModuleBalacesResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.balances) {
      Coin.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    if (message.address !== "") {
      writer.uint32(18).string(message.address);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryFeeabsModuleBalacesResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryFeeabsModuleBalacesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.balances.push(Coin.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.address = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryFeeabsModuleBalacesResponse {
    return {
      balances: globalThis.Array.isArray(object?.balances) ? object.balances.map((e: any) => Coin.fromJSON(e)) : [],
      address: isSet(object.address) ? globalThis.String(object.address) : "",
    };
  },

  toJSON(message: QueryFeeabsModuleBalacesResponse): unknown {
    const obj: any = {};
    if (message.balances?.length) {
      obj.balances = message.balances.map((e) => Coin.toJSON(e));
    }
    if (message.address !== "") {
      obj.address = message.address;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryFeeabsModuleBalacesResponse>, I>>(
    base?: I,
  ): QueryFeeabsModuleBalacesResponse {
    return QueryFeeabsModuleBalacesResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryFeeabsModuleBalacesResponse>, I>>(
    object: I,
  ): QueryFeeabsModuleBalacesResponse {
    const message = createBaseQueryFeeabsModuleBalacesResponse();
    message.balances = object.balances?.map((e) => Coin.fromPartial(e)) || [];
    message.address = object.address ?? "";
    return message;
  },
};

function createBaseAllQueryHostChainConfigRequest(): AllQueryHostChainConfigRequest {
  return {};
}

export const AllQueryHostChainConfigRequest = {
  encode(_: AllQueryHostChainConfigRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AllQueryHostChainConfigRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAllQueryHostChainConfigRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): AllQueryHostChainConfigRequest {
    return {};
  },

  toJSON(_: AllQueryHostChainConfigRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<AllQueryHostChainConfigRequest>, I>>(base?: I): AllQueryHostChainConfigRequest {
    return AllQueryHostChainConfigRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AllQueryHostChainConfigRequest>, I>>(_: I): AllQueryHostChainConfigRequest {
    const message = createBaseAllQueryHostChainConfigRequest();
    return message;
  },
};

function createBaseAllQueryHostChainConfigResponse(): AllQueryHostChainConfigResponse {
  return { allHostChainConfig: [] };
}

export const AllQueryHostChainConfigResponse = {
  encode(message: AllQueryHostChainConfigResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.allHostChainConfig) {
      HostChainFeeAbsConfig.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AllQueryHostChainConfigResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAllQueryHostChainConfigResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.allHostChainConfig.push(HostChainFeeAbsConfig.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AllQueryHostChainConfigResponse {
    return {
      allHostChainConfig: globalThis.Array.isArray(object?.allHostChainConfig)
        ? object.allHostChainConfig.map((e: any) => HostChainFeeAbsConfig.fromJSON(e))
        : [],
    };
  },

  toJSON(message: AllQueryHostChainConfigResponse): unknown {
    const obj: any = {};
    if (message.allHostChainConfig?.length) {
      obj.allHostChainConfig = message.allHostChainConfig.map((e) => HostChainFeeAbsConfig.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AllQueryHostChainConfigResponse>, I>>(base?: I): AllQueryHostChainConfigResponse {
    return AllQueryHostChainConfigResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AllQueryHostChainConfigResponse>, I>>(
    object: I,
  ): AllQueryHostChainConfigResponse {
    const message = createBaseAllQueryHostChainConfigResponse();
    message.allHostChainConfig = object.allHostChainConfig?.map((e) => HostChainFeeAbsConfig.fromPartial(e)) || [];
    return message;
  },
};

/** Query defines the gRPC querier service. */
export interface Query {
  /** OsmosisArithmeticTwap return spot price of pair Osmo/nativeToken */
  OsmosisArithmeticTwap(
    request: DeepPartial<QueryOsmosisArithmeticTwapRequest>,
    metadata?: grpc.Metadata,
  ): Promise<QueryOsmosisArithmeticTwapResponse>;
  /** FeeabsModuleBalances return total balances of feeabs module */
  FeeabsModuleBalances(
    request: DeepPartial<QueryFeeabsModuleBalacesRequest>,
    metadata?: grpc.Metadata,
  ): Promise<QueryFeeabsModuleBalacesResponse>;
  /** HostChainConfig */
  HostChainConfig(
    request: DeepPartial<QueryHostChainConfigRequest>,
    metadata?: grpc.Metadata,
  ): Promise<QueryHostChainConfigResponse>;
  /** AllHostChainConfig */
  AllHostChainConfig(
    request: DeepPartial<AllQueryHostChainConfigRequest>,
    metadata?: grpc.Metadata,
  ): Promise<AllQueryHostChainConfigResponse>;
}

export class QueryClientImpl implements Query {
  private readonly rpc: Rpc;

  constructor(rpc: Rpc) {
    this.rpc = rpc;
    this.OsmosisArithmeticTwap = this.OsmosisArithmeticTwap.bind(this);
    this.FeeabsModuleBalances = this.FeeabsModuleBalances.bind(this);
    this.HostChainConfig = this.HostChainConfig.bind(this);
    this.AllHostChainConfig = this.AllHostChainConfig.bind(this);
  }

  OsmosisArithmeticTwap(
    request: DeepPartial<QueryOsmosisArithmeticTwapRequest>,
    metadata?: grpc.Metadata,
  ): Promise<QueryOsmosisArithmeticTwapResponse> {
    return this.rpc.unary(
      QueryOsmosisArithmeticTwapDesc,
      QueryOsmosisArithmeticTwapRequest.fromPartial(request),
      metadata,
    );
  }

  FeeabsModuleBalances(
    request: DeepPartial<QueryFeeabsModuleBalacesRequest>,
    metadata?: grpc.Metadata,
  ): Promise<QueryFeeabsModuleBalacesResponse> {
    return this.rpc.unary(
      QueryFeeabsModuleBalancesDesc,
      QueryFeeabsModuleBalacesRequest.fromPartial(request),
      metadata,
    );
  }

  HostChainConfig(
    request: DeepPartial<QueryHostChainConfigRequest>,
    metadata?: grpc.Metadata,
  ): Promise<QueryHostChainConfigResponse> {
    return this.rpc.unary(QueryHostChainConfigDesc, QueryHostChainConfigRequest.fromPartial(request), metadata);
  }

  AllHostChainConfig(
    request: DeepPartial<AllQueryHostChainConfigRequest>,
    metadata?: grpc.Metadata,
  ): Promise<AllQueryHostChainConfigResponse> {
    return this.rpc.unary(QueryAllHostChainConfigDesc, AllQueryHostChainConfigRequest.fromPartial(request), metadata);
  }
}

export const QueryDesc = { serviceName: "xion.feeabs.v1beta1.Query" };

export const QueryOsmosisArithmeticTwapDesc: UnaryMethodDefinitionish = {
  methodName: "OsmosisArithmeticTwap",
  service: QueryDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return QueryOsmosisArithmeticTwapRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = QueryOsmosisArithmeticTwapResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const QueryFeeabsModuleBalancesDesc: UnaryMethodDefinitionish = {
  methodName: "FeeabsModuleBalances",
  service: QueryDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return QueryFeeabsModuleBalacesRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = QueryFeeabsModuleBalacesResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const QueryHostChainConfigDesc: UnaryMethodDefinitionish = {
  methodName: "HostChainConfig",
  service: QueryDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return QueryHostChainConfigRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = QueryHostChainConfigResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const QueryAllHostChainConfigDesc: UnaryMethodDefinitionish = {
  methodName: "AllHostChainConfig",
  service: QueryDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return AllQueryHostChainConfigRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = AllQueryHostChainConfigResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

interface UnaryMethodDefinitionishR extends grpc.UnaryMethodDefinition<any, any> {
  requestStream: any;
  responseStream: any;
}

type UnaryMethodDefinitionish = UnaryMethodDefinitionishR;

interface Rpc {
  unary<T extends UnaryMethodDefinitionish>(
    methodDesc: T,
    request: any,
    metadata: grpc.Metadata | undefined,
  ): Promise<any>;
}

export class GrpcWebImpl {
  private host: string;
  private options: {
    transport?: grpc.TransportFactory;

    debug?: boolean;
    metadata?: grpc.Metadata;
    upStreamRetryCodes?: number[];
  };

  constructor(
    host: string,
    options: {
      transport?: grpc.TransportFactory;

      debug?: boolean;
      metadata?: grpc.Metadata;
      upStreamRetryCodes?: number[];
    },
  ) {
    this.host = host;
    this.options = options;
  }

  unary<T extends UnaryMethodDefinitionish>(
    methodDesc: T,
    _request: any,
    metadata: grpc.Metadata | undefined,
  ): Promise<any> {
    const request = { ..._request, ...methodDesc.requestType };
    const maybeCombinedMetadata = metadata && this.options.metadata
      ? new BrowserHeaders({ ...this.options?.metadata.headersMap, ...metadata?.headersMap })
      : metadata ?? this.options.metadata;
    return new Promise((resolve, reject) => {
      grpc.unary(methodDesc, {
        request,
        host: this.host,
        metadata: maybeCombinedMetadata ?? {},
        ...(this.options.transport !== undefined ? { transport: this.options.transport } : {}),
        debug: this.options.debug ?? false,
        onEnd: function (response) {
          if (response.status === grpc.Code.OK) {
            resolve(response.message!.toObject());
          } else {
            const err = new GrpcWebError(response.statusMessage, response.status, response.trailers);
            reject(err);
          }
        },
      });
    });
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export class GrpcWebError extends globalThis.Error {
  constructor(message: string, public code: grpc.Code, public metadata: grpc.Metadata) {
    super(message);
  }
}
