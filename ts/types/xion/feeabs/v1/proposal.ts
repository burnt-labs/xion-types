// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               unknown
// source: xion/feeabs/v1/proposal.proto

/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal";

export const protobufPackage = "xion.feeabs.v1";

/** HostChainFeeAbsStatus defines the status of a host chain */
export enum HostChainFeeAbsStatus {
  /** FROZEN - Frozen status */
  FROZEN = 0,
  /** ACTIVE - Active status */
  ACTIVE = 1,
  UNRECOGNIZED = -1,
}

export function hostChainFeeAbsStatusFromJSON(object: any): HostChainFeeAbsStatus {
  switch (object) {
    case 0:
    case "FROZEN":
      return HostChainFeeAbsStatus.FROZEN;
    case 1:
    case "ACTIVE":
      return HostChainFeeAbsStatus.ACTIVE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return HostChainFeeAbsStatus.UNRECOGNIZED;
  }
}

export function hostChainFeeAbsStatusToJSON(object: HostChainFeeAbsStatus): string {
  switch (object) {
    case HostChainFeeAbsStatus.FROZEN:
      return "FROZEN";
    case HostChainFeeAbsStatus.ACTIVE:
      return "ACTIVE";
    case HostChainFeeAbsStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** HostChainFeeAbsConfig defines the configuration for a host chain */
export interface HostChainFeeAbsConfig {
  /** IBC denom */
  ibcDenom: string;
  /** Native denom on the host chain */
  nativeDenom: string;
  /** Channel ID for IBC */
  channelId: string;
  /** Status of this host chain configuration */
  status: HostChainFeeAbsStatus;
}

/** AddHostZoneProposal defines a proposal to add a new host zone */
export interface AddHostZoneProposal {
  /** Title of the proposal */
  title: string;
  /** Description of the proposal */
  description: string;
  /** Host zone configuration */
  hostZoneConfig?: HostChainFeeAbsConfig | undefined;
}

/** DeleteHostZoneProposal defines a proposal to delete a host zone */
export interface DeleteHostZoneProposal {
  /** Title of the proposal */
  title: string;
  /** Description of the proposal */
  description: string;
  /** IBC denom to delete */
  ibcDenom: string;
}

/** SetHostZoneProposal defines a proposal to update a host zone */
export interface SetHostZoneProposal {
  /** Title of the proposal */
  title: string;
  /** Description of the proposal */
  description: string;
  /** Host zone configuration */
  hostZoneConfig?: HostChainFeeAbsConfig | undefined;
}

function createBaseHostChainFeeAbsConfig(): HostChainFeeAbsConfig {
  return { ibcDenom: "", nativeDenom: "", channelId: "", status: 0 };
}

export const HostChainFeeAbsConfig = {
  encode(message: HostChainFeeAbsConfig, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.ibcDenom !== "") {
      writer.uint32(10).string(message.ibcDenom);
    }
    if (message.nativeDenom !== "") {
      writer.uint32(18).string(message.nativeDenom);
    }
    if (message.channelId !== "") {
      writer.uint32(26).string(message.channelId);
    }
    if (message.status !== 0) {
      writer.uint32(32).int32(message.status);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): HostChainFeeAbsConfig {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHostChainFeeAbsConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.ibcDenom = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nativeDenom = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.channelId = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HostChainFeeAbsConfig {
    return {
      ibcDenom: isSet(object.ibcDenom) ? globalThis.String(object.ibcDenom) : "",
      nativeDenom: isSet(object.nativeDenom) ? globalThis.String(object.nativeDenom) : "",
      channelId: isSet(object.channelId) ? globalThis.String(object.channelId) : "",
      status: isSet(object.status) ? hostChainFeeAbsStatusFromJSON(object.status) : 0,
    };
  },

  toJSON(message: HostChainFeeAbsConfig): unknown {
    const obj: any = {};
    if (message.ibcDenom !== "") {
      obj.ibcDenom = message.ibcDenom;
    }
    if (message.nativeDenom !== "") {
      obj.nativeDenom = message.nativeDenom;
    }
    if (message.channelId !== "") {
      obj.channelId = message.channelId;
    }
    if (message.status !== 0) {
      obj.status = hostChainFeeAbsStatusToJSON(message.status);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<HostChainFeeAbsConfig>, I>>(base?: I): HostChainFeeAbsConfig {
    return HostChainFeeAbsConfig.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<HostChainFeeAbsConfig>, I>>(object: I): HostChainFeeAbsConfig {
    const message = createBaseHostChainFeeAbsConfig();
    message.ibcDenom = object.ibcDenom ?? "";
    message.nativeDenom = object.nativeDenom ?? "";
    message.channelId = object.channelId ?? "";
    message.status = object.status ?? 0;
    return message;
  },
};

function createBaseAddHostZoneProposal(): AddHostZoneProposal {
  return { title: "", description: "", hostZoneConfig: undefined };
}

export const AddHostZoneProposal = {
  encode(message: AddHostZoneProposal, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.title !== "") {
      writer.uint32(10).string(message.title);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    if (message.hostZoneConfig !== undefined) {
      HostChainFeeAbsConfig.encode(message.hostZoneConfig, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddHostZoneProposal {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddHostZoneProposal();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.title = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.hostZoneConfig = HostChainFeeAbsConfig.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddHostZoneProposal {
    return {
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      hostZoneConfig: isSet(object.hostZoneConfig) ? HostChainFeeAbsConfig.fromJSON(object.hostZoneConfig) : undefined,
    };
  },

  toJSON(message: AddHostZoneProposal): unknown {
    const obj: any = {};
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.hostZoneConfig !== undefined) {
      obj.hostZoneConfig = HostChainFeeAbsConfig.toJSON(message.hostZoneConfig);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddHostZoneProposal>, I>>(base?: I): AddHostZoneProposal {
    return AddHostZoneProposal.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddHostZoneProposal>, I>>(object: I): AddHostZoneProposal {
    const message = createBaseAddHostZoneProposal();
    message.title = object.title ?? "";
    message.description = object.description ?? "";
    message.hostZoneConfig = (object.hostZoneConfig !== undefined && object.hostZoneConfig !== null)
      ? HostChainFeeAbsConfig.fromPartial(object.hostZoneConfig)
      : undefined;
    return message;
  },
};

function createBaseDeleteHostZoneProposal(): DeleteHostZoneProposal {
  return { title: "", description: "", ibcDenom: "" };
}

export const DeleteHostZoneProposal = {
  encode(message: DeleteHostZoneProposal, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.title !== "") {
      writer.uint32(10).string(message.title);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    if (message.ibcDenom !== "") {
      writer.uint32(26).string(message.ibcDenom);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeleteHostZoneProposal {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteHostZoneProposal();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.title = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.ibcDenom = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteHostZoneProposal {
    return {
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      ibcDenom: isSet(object.ibcDenom) ? globalThis.String(object.ibcDenom) : "",
    };
  },

  toJSON(message: DeleteHostZoneProposal): unknown {
    const obj: any = {};
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.ibcDenom !== "") {
      obj.ibcDenom = message.ibcDenom;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteHostZoneProposal>, I>>(base?: I): DeleteHostZoneProposal {
    return DeleteHostZoneProposal.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteHostZoneProposal>, I>>(object: I): DeleteHostZoneProposal {
    const message = createBaseDeleteHostZoneProposal();
    message.title = object.title ?? "";
    message.description = object.description ?? "";
    message.ibcDenom = object.ibcDenom ?? "";
    return message;
  },
};

function createBaseSetHostZoneProposal(): SetHostZoneProposal {
  return { title: "", description: "", hostZoneConfig: undefined };
}

export const SetHostZoneProposal = {
  encode(message: SetHostZoneProposal, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.title !== "") {
      writer.uint32(10).string(message.title);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    if (message.hostZoneConfig !== undefined) {
      HostChainFeeAbsConfig.encode(message.hostZoneConfig, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetHostZoneProposal {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetHostZoneProposal();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.title = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.hostZoneConfig = HostChainFeeAbsConfig.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetHostZoneProposal {
    return {
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      hostZoneConfig: isSet(object.hostZoneConfig) ? HostChainFeeAbsConfig.fromJSON(object.hostZoneConfig) : undefined,
    };
  },

  toJSON(message: SetHostZoneProposal): unknown {
    const obj: any = {};
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.hostZoneConfig !== undefined) {
      obj.hostZoneConfig = HostChainFeeAbsConfig.toJSON(message.hostZoneConfig);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetHostZoneProposal>, I>>(base?: I): SetHostZoneProposal {
    return SetHostZoneProposal.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetHostZoneProposal>, I>>(object: I): SetHostZoneProposal {
    const message = createBaseSetHostZoneProposal();
    message.title = object.title ?? "";
    message.description = object.description ?? "";
    message.hostZoneConfig = (object.hostZoneConfig !== undefined && object.hostZoneConfig !== null)
      ? HostChainFeeAbsConfig.fromPartial(object.hostZoneConfig)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
