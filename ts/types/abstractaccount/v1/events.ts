// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               unknown
// source: abstractaccount/v1/events.proto

/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal";

export const protobufPackage = "abstractaccount.v1";

/** EventAccountRegistered is emitted when an AbstractAccount is registered. */
export interface EventAccountRegistered {
  creator: string;
  codeId: Long;
  contractAddr: string;
  accountNumber: Long;
}

function createBaseEventAccountRegistered(): EventAccountRegistered {
  return { creator: "", codeId: Long.UZERO, contractAddr: "", accountNumber: Long.UZERO };
}

export const EventAccountRegistered = {
  encode(message: EventAccountRegistered, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (!message.codeId.equals(Long.UZERO)) {
      writer.uint32(16).uint64(message.codeId);
    }
    if (message.contractAddr !== "") {
      writer.uint32(26).string(message.contractAddr);
    }
    if (!message.accountNumber.equals(Long.UZERO)) {
      writer.uint32(32).uint64(message.accountNumber);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): EventAccountRegistered {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventAccountRegistered();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.codeId = reader.uint64() as Long;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.contractAddr = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.accountNumber = reader.uint64() as Long;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventAccountRegistered {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      codeId: isSet(object.codeId) ? Long.fromValue(object.codeId) : Long.UZERO,
      contractAddr: isSet(object.contractAddr) ? globalThis.String(object.contractAddr) : "",
      accountNumber: isSet(object.accountNumber) ? Long.fromValue(object.accountNumber) : Long.UZERO,
    };
  },

  toJSON(message: EventAccountRegistered): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (!message.codeId.equals(Long.UZERO)) {
      obj.codeId = (message.codeId || Long.UZERO).toString();
    }
    if (message.contractAddr !== "") {
      obj.contractAddr = message.contractAddr;
    }
    if (!message.accountNumber.equals(Long.UZERO)) {
      obj.accountNumber = (message.accountNumber || Long.UZERO).toString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventAccountRegistered>, I>>(base?: I): EventAccountRegistered {
    return EventAccountRegistered.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventAccountRegistered>, I>>(object: I): EventAccountRegistered {
    const message = createBaseEventAccountRegistered();
    message.creator = object.creator ?? "";
    message.codeId = (object.codeId !== undefined && object.codeId !== null)
      ? Long.fromValue(object.codeId)
      : Long.UZERO;
    message.contractAddr = object.contractAddr ?? "";
    message.accountNumber = (object.accountNumber !== undefined && object.accountNumber !== null)
      ? Long.fromValue(object.accountNumber)
      : Long.UZERO;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
