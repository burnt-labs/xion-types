// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               unknown
// source: cosmos/benchmark/v1/benchmark.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "cosmos.benchmark.v1";

/** Op is a message describing a benchmark operation. */
export interface Op {
  seed: Long;
  actor: string;
  keyLength: Long;
  valueLength: Long;
  iterations: number;
  delete: boolean;
  exists: boolean;
}

function createBaseOp(): Op {
  return {
    seed: Long.UZERO,
    actor: "",
    keyLength: Long.UZERO,
    valueLength: Long.UZERO,
    iterations: 0,
    delete: false,
    exists: false,
  };
}

export const Op: MessageFns<Op> = {
  encode(message: Op, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (!message.seed.equals(Long.UZERO)) {
      writer.uint32(8).uint64(message.seed.toString());
    }
    if (message.actor !== "") {
      writer.uint32(18).string(message.actor);
    }
    if (!message.keyLength.equals(Long.UZERO)) {
      writer.uint32(24).uint64(message.keyLength.toString());
    }
    if (!message.valueLength.equals(Long.UZERO)) {
      writer.uint32(32).uint64(message.valueLength.toString());
    }
    if (message.iterations !== 0) {
      writer.uint32(40).uint32(message.iterations);
    }
    if (message.delete !== false) {
      writer.uint32(48).bool(message.delete);
    }
    if (message.exists !== false) {
      writer.uint32(56).bool(message.exists);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Op {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOp();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.seed = Long.fromString(reader.uint64().toString(), true);
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.actor = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.keyLength = Long.fromString(reader.uint64().toString(), true);
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.valueLength = Long.fromString(reader.uint64().toString(), true);
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.iterations = reader.uint32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.delete = reader.bool();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.exists = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Op {
    return {
      seed: isSet(object.seed) ? Long.fromValue(object.seed) : Long.UZERO,
      actor: isSet(object.actor) ? globalThis.String(object.actor) : "",
      keyLength: isSet(object.keyLength) ? Long.fromValue(object.keyLength) : Long.UZERO,
      valueLength: isSet(object.valueLength) ? Long.fromValue(object.valueLength) : Long.UZERO,
      iterations: isSet(object.iterations) ? globalThis.Number(object.iterations) : 0,
      delete: isSet(object.delete) ? globalThis.Boolean(object.delete) : false,
      exists: isSet(object.exists) ? globalThis.Boolean(object.exists) : false,
    };
  },

  toJSON(message: Op): unknown {
    const obj: any = {};
    if (!message.seed.equals(Long.UZERO)) {
      obj.seed = (message.seed || Long.UZERO).toString();
    }
    if (message.actor !== "") {
      obj.actor = message.actor;
    }
    if (!message.keyLength.equals(Long.UZERO)) {
      obj.keyLength = (message.keyLength || Long.UZERO).toString();
    }
    if (!message.valueLength.equals(Long.UZERO)) {
      obj.valueLength = (message.valueLength || Long.UZERO).toString();
    }
    if (message.iterations !== 0) {
      obj.iterations = Math.round(message.iterations);
    }
    if (message.delete !== false) {
      obj.delete = message.delete;
    }
    if (message.exists !== false) {
      obj.exists = message.exists;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Op>, I>>(base?: I): Op {
    return Op.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Op>, I>>(object: I): Op {
    const message = createBaseOp();
    message.seed = (object.seed !== undefined && object.seed !== null) ? Long.fromValue(object.seed) : Long.UZERO;
    message.actor = object.actor ?? "";
    message.keyLength = (object.keyLength !== undefined && object.keyLength !== null)
      ? Long.fromValue(object.keyLength)
      : Long.UZERO;
    message.valueLength = (object.valueLength !== undefined && object.valueLength !== null)
      ? Long.fromValue(object.valueLength)
      : Long.UZERO;
    message.iterations = object.iterations ?? 0;
    message.delete = object.delete ?? false;
    message.exists = object.exists ?? false;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
