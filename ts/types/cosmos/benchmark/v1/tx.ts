// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               unknown
// source: cosmos/benchmark/v1/tx.proto

/* eslint-disable */
import { grpc } from "@improbable-eng/grpc-web";
import { BrowserHeaders } from "browser-headers";
import Long from "long";
import _m0 from "protobufjs/minimal";
import { Op } from "./benchmark";

export const protobufPackage = "cosmos.benchmark.v1";

/** MsgLoadTestOps defines a message containing a sequence of load test operations. */
export interface MsgLoadTest {
  caller: Uint8Array;
  ops: Op[];
}

/** MsgLoadTestResponse defines a message containing the results of a load test operation. */
export interface MsgLoadTestResponse {
  totalTime: Long;
  totalErrors: Long;
}

function createBaseMsgLoadTest(): MsgLoadTest {
  return { caller: new Uint8Array(0), ops: [] };
}

export const MsgLoadTest = {
  encode(message: MsgLoadTest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.caller.length !== 0) {
      writer.uint32(10).bytes(message.caller);
    }
    for (const v of message.ops) {
      Op.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgLoadTest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgLoadTest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.caller = reader.bytes();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.ops.push(Op.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgLoadTest {
    return {
      caller: isSet(object.caller) ? bytesFromBase64(object.caller) : new Uint8Array(0),
      ops: globalThis.Array.isArray(object?.ops) ? object.ops.map((e: any) => Op.fromJSON(e)) : [],
    };
  },

  toJSON(message: MsgLoadTest): unknown {
    const obj: any = {};
    if (message.caller.length !== 0) {
      obj.caller = base64FromBytes(message.caller);
    }
    if (message.ops?.length) {
      obj.ops = message.ops.map((e) => Op.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgLoadTest>, I>>(base?: I): MsgLoadTest {
    return MsgLoadTest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgLoadTest>, I>>(object: I): MsgLoadTest {
    const message = createBaseMsgLoadTest();
    message.caller = object.caller ?? new Uint8Array(0);
    message.ops = object.ops?.map((e) => Op.fromPartial(e)) || [];
    return message;
  },
};

function createBaseMsgLoadTestResponse(): MsgLoadTestResponse {
  return { totalTime: Long.UZERO, totalErrors: Long.UZERO };
}

export const MsgLoadTestResponse = {
  encode(message: MsgLoadTestResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (!message.totalTime.equals(Long.UZERO)) {
      writer.uint32(8).uint64(message.totalTime);
    }
    if (!message.totalErrors.equals(Long.UZERO)) {
      writer.uint32(16).uint64(message.totalErrors);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgLoadTestResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgLoadTestResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.totalTime = reader.uint64() as Long;
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.totalErrors = reader.uint64() as Long;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgLoadTestResponse {
    return {
      totalTime: isSet(object.totalTime) ? Long.fromValue(object.totalTime) : Long.UZERO,
      totalErrors: isSet(object.totalErrors) ? Long.fromValue(object.totalErrors) : Long.UZERO,
    };
  },

  toJSON(message: MsgLoadTestResponse): unknown {
    const obj: any = {};
    if (!message.totalTime.equals(Long.UZERO)) {
      obj.totalTime = (message.totalTime || Long.UZERO).toString();
    }
    if (!message.totalErrors.equals(Long.UZERO)) {
      obj.totalErrors = (message.totalErrors || Long.UZERO).toString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgLoadTestResponse>, I>>(base?: I): MsgLoadTestResponse {
    return MsgLoadTestResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgLoadTestResponse>, I>>(object: I): MsgLoadTestResponse {
    const message = createBaseMsgLoadTestResponse();
    message.totalTime = (object.totalTime !== undefined && object.totalTime !== null)
      ? Long.fromValue(object.totalTime)
      : Long.UZERO;
    message.totalErrors = (object.totalErrors !== undefined && object.totalErrors !== null)
      ? Long.fromValue(object.totalErrors)
      : Long.UZERO;
    return message;
  },
};

/** Msg defines the benchmark Msg service. */
export interface Msg {
  /** LoadTest defines a method for executing a sequence of load test operations. */
  LoadTest(request: DeepPartial<MsgLoadTest>, metadata?: grpc.Metadata): Promise<MsgLoadTestResponse>;
}

export class MsgClientImpl implements Msg {
  private readonly rpc: Rpc;

  constructor(rpc: Rpc) {
    this.rpc = rpc;
    this.LoadTest = this.LoadTest.bind(this);
  }

  LoadTest(request: DeepPartial<MsgLoadTest>, metadata?: grpc.Metadata): Promise<MsgLoadTestResponse> {
    return this.rpc.unary(MsgLoadTestDesc, MsgLoadTest.fromPartial(request), metadata);
  }
}

export const MsgDesc = { serviceName: "cosmos.benchmark.v1.Msg" };

export const MsgLoadTestDesc: UnaryMethodDefinitionish = {
  methodName: "LoadTest",
  service: MsgDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return MsgLoadTest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = MsgLoadTestResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

interface UnaryMethodDefinitionishR extends grpc.UnaryMethodDefinition<any, any> {
  requestStream: any;
  responseStream: any;
}

type UnaryMethodDefinitionish = UnaryMethodDefinitionishR;

interface Rpc {
  unary<T extends UnaryMethodDefinitionish>(
    methodDesc: T,
    request: any,
    metadata: grpc.Metadata | undefined,
  ): Promise<any>;
}

export class GrpcWebImpl {
  private host: string;
  private options: {
    transport?: grpc.TransportFactory;

    debug?: boolean;
    metadata?: grpc.Metadata;
    upStreamRetryCodes?: number[];
  };

  constructor(
    host: string,
    options: {
      transport?: grpc.TransportFactory;

      debug?: boolean;
      metadata?: grpc.Metadata;
      upStreamRetryCodes?: number[];
    },
  ) {
    this.host = host;
    this.options = options;
  }

  unary<T extends UnaryMethodDefinitionish>(
    methodDesc: T,
    _request: any,
    metadata: grpc.Metadata | undefined,
  ): Promise<any> {
    const request = { ..._request, ...methodDesc.requestType };
    const maybeCombinedMetadata = metadata && this.options.metadata
      ? new BrowserHeaders({ ...this.options?.metadata.headersMap, ...metadata?.headersMap })
      : metadata ?? this.options.metadata;
    return new Promise((resolve, reject) => {
      grpc.unary(methodDesc, {
        request,
        host: this.host,
        metadata: maybeCombinedMetadata ?? {},
        ...(this.options.transport !== undefined ? { transport: this.options.transport } : {}),
        debug: this.options.debug ?? false,
        onEnd: function (response) {
          if (response.status === grpc.Code.OK) {
            resolve(response.message!.toObject());
          } else {
            const err = new GrpcWebError(response.statusMessage, response.status, response.trailers);
            reject(err);
          }
        },
      });
    });
  }
}

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export class GrpcWebError extends globalThis.Error {
  constructor(message: string, public code: grpc.Code, public metadata: grpc.Metadata) {
    super(message);
  }
}
