/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: ibc/core/connection/v1/connection.proto */

#ifndef PROTOBUF_C_ibc_2fcore_2fconnection_2fv1_2fconnection_2eproto__INCLUDED
#define PROTOBUF_C_ibc_2fcore_2fconnection_2fv1_2fconnection_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protobuf-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1005002 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protobuf-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protobuf-c.
#endif

#include "gogoproto/gogo.pb-c.h"
#include "ibc/core/commitment/v1/commitment.pb-c.h"

typedef struct Ibc__Core__Connection__V1__ConnectionEnd Ibc__Core__Connection__V1__ConnectionEnd;
typedef struct Ibc__Core__Connection__V1__IdentifiedConnection Ibc__Core__Connection__V1__IdentifiedConnection;
typedef struct Ibc__Core__Connection__V1__Counterparty Ibc__Core__Connection__V1__Counterparty;
typedef struct Ibc__Core__Connection__V1__ClientPaths Ibc__Core__Connection__V1__ClientPaths;
typedef struct Ibc__Core__Connection__V1__ConnectionPaths Ibc__Core__Connection__V1__ConnectionPaths;
typedef struct Ibc__Core__Connection__V1__Version Ibc__Core__Connection__V1__Version;
typedef struct Ibc__Core__Connection__V1__Params Ibc__Core__Connection__V1__Params;


/* --- enums --- */

/*
 * State defines if a connection is in one of the following states:
 * INIT, TRYOPEN, OPEN or UNINITIALIZED.
 */
typedef enum _Ibc__Core__Connection__V1__State {
  /*
   * Default State
   */
  IBC__CORE__CONNECTION__V1__STATE__STATE_UNINITIALIZED_UNSPECIFIED = 0,
  /*
   * A connection end has just started the opening handshake.
   */
  IBC__CORE__CONNECTION__V1__STATE__STATE_INIT = 1,
  /*
   * A connection end has acknowledged the handshake step on the counterparty
   * chain.
   */
  IBC__CORE__CONNECTION__V1__STATE__STATE_TRYOPEN = 2,
  /*
   * A connection end has completed the handshake.
   */
  IBC__CORE__CONNECTION__V1__STATE__STATE_OPEN = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(IBC__CORE__CONNECTION__V1__STATE)
} Ibc__Core__Connection__V1__State;

/* --- messages --- */

/*
 * ConnectionEnd defines a stateful object on a chain connected to another
 * separate one.
 * NOTE: there must only be 2 defined ConnectionEnds to establish
 * a connection between two chains.
 */
struct  Ibc__Core__Connection__V1__ConnectionEnd
{
  ProtobufCMessage base;
  /*
   * client associated with this connection.
   */
  char *client_id;
  /*
   * IBC version which can be utilised to determine encodings or protocols for
   * channels or packets utilising this connection.
   */
  size_t n_versions;
  Ibc__Core__Connection__V1__Version **versions;
  /*
   * current state of the connection end.
   */
  Ibc__Core__Connection__V1__State state;
  /*
   * counterparty chain associated with this connection.
   */
  Ibc__Core__Connection__V1__Counterparty *counterparty;
  /*
   * delay period that must pass before a consensus state can be used for
   * packet-verification NOTE: delay period logic is only implemented by some
   * clients.
   */
  uint64_t delay_period;
};
#define IBC__CORE__CONNECTION__V1__CONNECTION_END__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ibc__core__connection__v1__connection_end__descriptor) \
, (char *)protobuf_c_empty_string, 0,NULL, IBC__CORE__CONNECTION__V1__STATE__STATE_UNINITIALIZED_UNSPECIFIED, NULL, 0 }


/*
 * IdentifiedConnection defines a connection with additional connection
 * identifier field.
 */
struct  Ibc__Core__Connection__V1__IdentifiedConnection
{
  ProtobufCMessage base;
  /*
   * connection identifier.
   */
  char *id;
  /*
   * client associated with this connection.
   */
  char *client_id;
  /*
   * IBC version which can be utilised to determine encodings or protocols for
   * channels or packets utilising this connection
   */
  size_t n_versions;
  Ibc__Core__Connection__V1__Version **versions;
  /*
   * current state of the connection end.
   */
  Ibc__Core__Connection__V1__State state;
  /*
   * counterparty chain associated with this connection.
   */
  Ibc__Core__Connection__V1__Counterparty *counterparty;
  /*
   * delay period associated with this connection.
   */
  uint64_t delay_period;
};
#define IBC__CORE__CONNECTION__V1__IDENTIFIED_CONNECTION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ibc__core__connection__v1__identified_connection__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0,NULL, IBC__CORE__CONNECTION__V1__STATE__STATE_UNINITIALIZED_UNSPECIFIED, NULL, 0 }


/*
 * Counterparty defines the counterparty chain associated with a connection end.
 */
struct  Ibc__Core__Connection__V1__Counterparty
{
  ProtobufCMessage base;
  /*
   * identifies the client on the counterparty chain associated with a given
   * connection.
   */
  char *client_id;
  /*
   * identifies the connection end on the counterparty chain associated with a
   * given connection.
   */
  char *connection_id;
  /*
   * commitment merkle prefix of the counterparty chain.
   */
  Ibc__Core__Commitment__V1__MerklePrefix *prefix;
};
#define IBC__CORE__CONNECTION__V1__COUNTERPARTY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ibc__core__connection__v1__counterparty__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, NULL }


/*
 * ClientPaths define all the connection paths for a client state.
 */
struct  Ibc__Core__Connection__V1__ClientPaths
{
  ProtobufCMessage base;
  /*
   * list of connection paths
   */
  size_t n_paths;
  char **paths;
};
#define IBC__CORE__CONNECTION__V1__CLIENT_PATHS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ibc__core__connection__v1__client_paths__descriptor) \
, 0,NULL }


/*
 * ConnectionPaths define all the connection paths for a given client state.
 */
struct  Ibc__Core__Connection__V1__ConnectionPaths
{
  ProtobufCMessage base;
  /*
   * client state unique identifier
   */
  char *client_id;
  /*
   * list of connection paths
   */
  size_t n_paths;
  char **paths;
};
#define IBC__CORE__CONNECTION__V1__CONNECTION_PATHS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ibc__core__connection__v1__connection_paths__descriptor) \
, (char *)protobuf_c_empty_string, 0,NULL }


/*
 * Version defines the versioning scheme used to negotiate the IBC version in
 * the connection handshake.
 */
struct  Ibc__Core__Connection__V1__Version
{
  ProtobufCMessage base;
  /*
   * unique version identifier
   */
  char *identifier;
  /*
   * list of features compatible with the specified identifier
   */
  size_t n_features;
  char **features;
};
#define IBC__CORE__CONNECTION__V1__VERSION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ibc__core__connection__v1__version__descriptor) \
, (char *)protobuf_c_empty_string, 0,NULL }


/*
 * Params defines the set of Connection parameters.
 */
struct  Ibc__Core__Connection__V1__Params
{
  ProtobufCMessage base;
  /*
   * maximum expected time per block (in nanoseconds), used to enforce block delay. This parameter should reflect the
   * largest amount of time that the chain might reasonably take to produce the next block under normal operating
   * conditions. A safe choice is 3-5x the expected time per block.
   */
  uint64_t max_expected_time_per_block;
};
#define IBC__CORE__CONNECTION__V1__PARAMS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ibc__core__connection__v1__params__descriptor) \
, 0 }


/* Ibc__Core__Connection__V1__ConnectionEnd methods */
void   ibc__core__connection__v1__connection_end__init
                     (Ibc__Core__Connection__V1__ConnectionEnd         *message);
size_t ibc__core__connection__v1__connection_end__get_packed_size
                     (const Ibc__Core__Connection__V1__ConnectionEnd   *message);
size_t ibc__core__connection__v1__connection_end__pack
                     (const Ibc__Core__Connection__V1__ConnectionEnd   *message,
                      uint8_t             *out);
size_t ibc__core__connection__v1__connection_end__pack_to_buffer
                     (const Ibc__Core__Connection__V1__ConnectionEnd   *message,
                      ProtobufCBuffer     *buffer);
Ibc__Core__Connection__V1__ConnectionEnd *
       ibc__core__connection__v1__connection_end__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ibc__core__connection__v1__connection_end__free_unpacked
                     (Ibc__Core__Connection__V1__ConnectionEnd *message,
                      ProtobufCAllocator *allocator);
/* Ibc__Core__Connection__V1__IdentifiedConnection methods */
void   ibc__core__connection__v1__identified_connection__init
                     (Ibc__Core__Connection__V1__IdentifiedConnection         *message);
size_t ibc__core__connection__v1__identified_connection__get_packed_size
                     (const Ibc__Core__Connection__V1__IdentifiedConnection   *message);
size_t ibc__core__connection__v1__identified_connection__pack
                     (const Ibc__Core__Connection__V1__IdentifiedConnection   *message,
                      uint8_t             *out);
size_t ibc__core__connection__v1__identified_connection__pack_to_buffer
                     (const Ibc__Core__Connection__V1__IdentifiedConnection   *message,
                      ProtobufCBuffer     *buffer);
Ibc__Core__Connection__V1__IdentifiedConnection *
       ibc__core__connection__v1__identified_connection__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ibc__core__connection__v1__identified_connection__free_unpacked
                     (Ibc__Core__Connection__V1__IdentifiedConnection *message,
                      ProtobufCAllocator *allocator);
/* Ibc__Core__Connection__V1__Counterparty methods */
void   ibc__core__connection__v1__counterparty__init
                     (Ibc__Core__Connection__V1__Counterparty         *message);
size_t ibc__core__connection__v1__counterparty__get_packed_size
                     (const Ibc__Core__Connection__V1__Counterparty   *message);
size_t ibc__core__connection__v1__counterparty__pack
                     (const Ibc__Core__Connection__V1__Counterparty   *message,
                      uint8_t             *out);
size_t ibc__core__connection__v1__counterparty__pack_to_buffer
                     (const Ibc__Core__Connection__V1__Counterparty   *message,
                      ProtobufCBuffer     *buffer);
Ibc__Core__Connection__V1__Counterparty *
       ibc__core__connection__v1__counterparty__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ibc__core__connection__v1__counterparty__free_unpacked
                     (Ibc__Core__Connection__V1__Counterparty *message,
                      ProtobufCAllocator *allocator);
/* Ibc__Core__Connection__V1__ClientPaths methods */
void   ibc__core__connection__v1__client_paths__init
                     (Ibc__Core__Connection__V1__ClientPaths         *message);
size_t ibc__core__connection__v1__client_paths__get_packed_size
                     (const Ibc__Core__Connection__V1__ClientPaths   *message);
size_t ibc__core__connection__v1__client_paths__pack
                     (const Ibc__Core__Connection__V1__ClientPaths   *message,
                      uint8_t             *out);
size_t ibc__core__connection__v1__client_paths__pack_to_buffer
                     (const Ibc__Core__Connection__V1__ClientPaths   *message,
                      ProtobufCBuffer     *buffer);
Ibc__Core__Connection__V1__ClientPaths *
       ibc__core__connection__v1__client_paths__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ibc__core__connection__v1__client_paths__free_unpacked
                     (Ibc__Core__Connection__V1__ClientPaths *message,
                      ProtobufCAllocator *allocator);
/* Ibc__Core__Connection__V1__ConnectionPaths methods */
void   ibc__core__connection__v1__connection_paths__init
                     (Ibc__Core__Connection__V1__ConnectionPaths         *message);
size_t ibc__core__connection__v1__connection_paths__get_packed_size
                     (const Ibc__Core__Connection__V1__ConnectionPaths   *message);
size_t ibc__core__connection__v1__connection_paths__pack
                     (const Ibc__Core__Connection__V1__ConnectionPaths   *message,
                      uint8_t             *out);
size_t ibc__core__connection__v1__connection_paths__pack_to_buffer
                     (const Ibc__Core__Connection__V1__ConnectionPaths   *message,
                      ProtobufCBuffer     *buffer);
Ibc__Core__Connection__V1__ConnectionPaths *
       ibc__core__connection__v1__connection_paths__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ibc__core__connection__v1__connection_paths__free_unpacked
                     (Ibc__Core__Connection__V1__ConnectionPaths *message,
                      ProtobufCAllocator *allocator);
/* Ibc__Core__Connection__V1__Version methods */
void   ibc__core__connection__v1__version__init
                     (Ibc__Core__Connection__V1__Version         *message);
size_t ibc__core__connection__v1__version__get_packed_size
                     (const Ibc__Core__Connection__V1__Version   *message);
size_t ibc__core__connection__v1__version__pack
                     (const Ibc__Core__Connection__V1__Version   *message,
                      uint8_t             *out);
size_t ibc__core__connection__v1__version__pack_to_buffer
                     (const Ibc__Core__Connection__V1__Version   *message,
                      ProtobufCBuffer     *buffer);
Ibc__Core__Connection__V1__Version *
       ibc__core__connection__v1__version__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ibc__core__connection__v1__version__free_unpacked
                     (Ibc__Core__Connection__V1__Version *message,
                      ProtobufCAllocator *allocator);
/* Ibc__Core__Connection__V1__Params methods */
void   ibc__core__connection__v1__params__init
                     (Ibc__Core__Connection__V1__Params         *message);
size_t ibc__core__connection__v1__params__get_packed_size
                     (const Ibc__Core__Connection__V1__Params   *message);
size_t ibc__core__connection__v1__params__pack
                     (const Ibc__Core__Connection__V1__Params   *message,
                      uint8_t             *out);
size_t ibc__core__connection__v1__params__pack_to_buffer
                     (const Ibc__Core__Connection__V1__Params   *message,
                      ProtobufCBuffer     *buffer);
Ibc__Core__Connection__V1__Params *
       ibc__core__connection__v1__params__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ibc__core__connection__v1__params__free_unpacked
                     (Ibc__Core__Connection__V1__Params *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Ibc__Core__Connection__V1__ConnectionEnd_Closure)
                 (const Ibc__Core__Connection__V1__ConnectionEnd *message,
                  void *closure_data);
typedef void (*Ibc__Core__Connection__V1__IdentifiedConnection_Closure)
                 (const Ibc__Core__Connection__V1__IdentifiedConnection *message,
                  void *closure_data);
typedef void (*Ibc__Core__Connection__V1__Counterparty_Closure)
                 (const Ibc__Core__Connection__V1__Counterparty *message,
                  void *closure_data);
typedef void (*Ibc__Core__Connection__V1__ClientPaths_Closure)
                 (const Ibc__Core__Connection__V1__ClientPaths *message,
                  void *closure_data);
typedef void (*Ibc__Core__Connection__V1__ConnectionPaths_Closure)
                 (const Ibc__Core__Connection__V1__ConnectionPaths *message,
                  void *closure_data);
typedef void (*Ibc__Core__Connection__V1__Version_Closure)
                 (const Ibc__Core__Connection__V1__Version *message,
                  void *closure_data);
typedef void (*Ibc__Core__Connection__V1__Params_Closure)
                 (const Ibc__Core__Connection__V1__Params *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    ibc__core__connection__v1__state__descriptor;
extern const ProtobufCMessageDescriptor ibc__core__connection__v1__connection_end__descriptor;
extern const ProtobufCMessageDescriptor ibc__core__connection__v1__identified_connection__descriptor;
extern const ProtobufCMessageDescriptor ibc__core__connection__v1__counterparty__descriptor;
extern const ProtobufCMessageDescriptor ibc__core__connection__v1__client_paths__descriptor;
extern const ProtobufCMessageDescriptor ibc__core__connection__v1__connection_paths__descriptor;
extern const ProtobufCMessageDescriptor ibc__core__connection__v1__version__descriptor;
extern const ProtobufCMessageDescriptor ibc__core__connection__v1__params__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_ibc_2fcore_2fconnection_2fv1_2fconnection_2eproto__INCLUDED */
