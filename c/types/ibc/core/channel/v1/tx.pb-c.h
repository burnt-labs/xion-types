/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: ibc/core/channel/v1/tx.proto */

#ifndef PROTOBUF_C_ibc_2fcore_2fchannel_2fv1_2ftx_2eproto__INCLUDED
#define PROTOBUF_C_ibc_2fcore_2fchannel_2fv1_2ftx_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protobuf-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1005002 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protobuf-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protobuf-c.
#endif

#include "gogoproto/gogo.pb-c.h"
#include "cosmos/msg/v1/msg.pb-c.h"
#include "ibc/core/client/v1/client.pb-c.h"
#include "ibc/core/channel/v1/channel.pb-c.h"

typedef struct Ibc__Core__Channel__V1__MsgChannelOpenInit Ibc__Core__Channel__V1__MsgChannelOpenInit;
typedef struct Ibc__Core__Channel__V1__MsgChannelOpenInitResponse Ibc__Core__Channel__V1__MsgChannelOpenInitResponse;
typedef struct Ibc__Core__Channel__V1__MsgChannelOpenTry Ibc__Core__Channel__V1__MsgChannelOpenTry;
typedef struct Ibc__Core__Channel__V1__MsgChannelOpenTryResponse Ibc__Core__Channel__V1__MsgChannelOpenTryResponse;
typedef struct Ibc__Core__Channel__V1__MsgChannelOpenAck Ibc__Core__Channel__V1__MsgChannelOpenAck;
typedef struct Ibc__Core__Channel__V1__MsgChannelOpenAckResponse Ibc__Core__Channel__V1__MsgChannelOpenAckResponse;
typedef struct Ibc__Core__Channel__V1__MsgChannelOpenConfirm Ibc__Core__Channel__V1__MsgChannelOpenConfirm;
typedef struct Ibc__Core__Channel__V1__MsgChannelOpenConfirmResponse Ibc__Core__Channel__V1__MsgChannelOpenConfirmResponse;
typedef struct Ibc__Core__Channel__V1__MsgChannelCloseInit Ibc__Core__Channel__V1__MsgChannelCloseInit;
typedef struct Ibc__Core__Channel__V1__MsgChannelCloseInitResponse Ibc__Core__Channel__V1__MsgChannelCloseInitResponse;
typedef struct Ibc__Core__Channel__V1__MsgChannelCloseConfirm Ibc__Core__Channel__V1__MsgChannelCloseConfirm;
typedef struct Ibc__Core__Channel__V1__MsgChannelCloseConfirmResponse Ibc__Core__Channel__V1__MsgChannelCloseConfirmResponse;
typedef struct Ibc__Core__Channel__V1__MsgRecvPacket Ibc__Core__Channel__V1__MsgRecvPacket;
typedef struct Ibc__Core__Channel__V1__MsgRecvPacketResponse Ibc__Core__Channel__V1__MsgRecvPacketResponse;
typedef struct Ibc__Core__Channel__V1__MsgTimeout Ibc__Core__Channel__V1__MsgTimeout;
typedef struct Ibc__Core__Channel__V1__MsgTimeoutResponse Ibc__Core__Channel__V1__MsgTimeoutResponse;
typedef struct Ibc__Core__Channel__V1__MsgTimeoutOnClose Ibc__Core__Channel__V1__MsgTimeoutOnClose;
typedef struct Ibc__Core__Channel__V1__MsgTimeoutOnCloseResponse Ibc__Core__Channel__V1__MsgTimeoutOnCloseResponse;
typedef struct Ibc__Core__Channel__V1__MsgAcknowledgement Ibc__Core__Channel__V1__MsgAcknowledgement;
typedef struct Ibc__Core__Channel__V1__MsgAcknowledgementResponse Ibc__Core__Channel__V1__MsgAcknowledgementResponse;


/* --- enums --- */

/*
 * ResponseResultType defines the possible outcomes of the execution of a message
 */
typedef enum _Ibc__Core__Channel__V1__ResponseResultType {
  /*
   * Default zero value enumeration
   */
  IBC__CORE__CHANNEL__V1__RESPONSE_RESULT_TYPE__RESPONSE_RESULT_TYPE_UNSPECIFIED = 0,
  /*
   * The message did not call the IBC application callbacks (because, for example, the packet had already been relayed)
   */
  IBC__CORE__CHANNEL__V1__RESPONSE_RESULT_TYPE__RESPONSE_RESULT_TYPE_NOOP = 1,
  /*
   * The message was executed successfully
   */
  IBC__CORE__CHANNEL__V1__RESPONSE_RESULT_TYPE__RESPONSE_RESULT_TYPE_SUCCESS = 2,
  /*
   * The message was executed unsuccessfully
   */
  IBC__CORE__CHANNEL__V1__RESPONSE_RESULT_TYPE__RESPONSE_RESULT_TYPE_FAILURE = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(IBC__CORE__CHANNEL__V1__RESPONSE_RESULT_TYPE)
} Ibc__Core__Channel__V1__ResponseResultType;

/* --- messages --- */

/*
 * MsgChannelOpenInit defines an sdk.Msg to initialize a channel handshake. It
 * is called by a relayer on Chain A.
 */
struct  Ibc__Core__Channel__V1__MsgChannelOpenInit
{
  ProtobufCMessage base;
  char *port_id;
  Ibc__Core__Channel__V1__Channel *channel;
  char *signer;
};
#define IBC__CORE__CHANNEL__V1__MSG_CHANNEL_OPEN_INIT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ibc__core__channel__v1__msg_channel_open_init__descriptor) \
, (char *)protobuf_c_empty_string, NULL, (char *)protobuf_c_empty_string }


/*
 * MsgChannelOpenInitResponse defines the Msg/ChannelOpenInit response type.
 */
struct  Ibc__Core__Channel__V1__MsgChannelOpenInitResponse
{
  ProtobufCMessage base;
  char *channel_id;
  char *version;
};
#define IBC__CORE__CHANNEL__V1__MSG_CHANNEL_OPEN_INIT_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ibc__core__channel__v1__msg_channel_open_init_response__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


/*
 * MsgChannelOpenInit defines a msg sent by a Relayer to try to open a channel
 * on Chain B. The version field within the Channel field has been deprecated. Its
 * value will be ignored by core IBC.
 */
struct  Ibc__Core__Channel__V1__MsgChannelOpenTry
{
  ProtobufCMessage base;
  char *port_id;
  /*
   * Deprecated: this field is unused. Crossing hello's are no longer supported in core IBC.
   */
  char *previous_channel_id PROTOBUF_C__DEPRECATED;
  /*
   * NOTE: the version field within the channel has been deprecated. Its value will be ignored by core IBC.
   */
  Ibc__Core__Channel__V1__Channel *channel;
  char *counterparty_version;
  ProtobufCBinaryData proof_init;
  Ibc__Core__Client__V1__Height *proof_height;
  char *signer;
};
#define IBC__CORE__CHANNEL__V1__MSG_CHANNEL_OPEN_TRY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ibc__core__channel__v1__msg_channel_open_try__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, NULL, (char *)protobuf_c_empty_string, {0,NULL}, NULL, (char *)protobuf_c_empty_string }


/*
 * MsgChannelOpenTryResponse defines the Msg/ChannelOpenTry response type.
 */
struct  Ibc__Core__Channel__V1__MsgChannelOpenTryResponse
{
  ProtobufCMessage base;
  char *version;
  char *channel_id;
};
#define IBC__CORE__CHANNEL__V1__MSG_CHANNEL_OPEN_TRY_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ibc__core__channel__v1__msg_channel_open_try_response__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


/*
 * MsgChannelOpenAck defines a msg sent by a Relayer to Chain A to acknowledge
 * the change of channel state to TRYOPEN on Chain B.
 */
struct  Ibc__Core__Channel__V1__MsgChannelOpenAck
{
  ProtobufCMessage base;
  char *port_id;
  char *channel_id;
  char *counterparty_channel_id;
  char *counterparty_version;
  ProtobufCBinaryData proof_try;
  Ibc__Core__Client__V1__Height *proof_height;
  char *signer;
};
#define IBC__CORE__CHANNEL__V1__MSG_CHANNEL_OPEN_ACK__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ibc__core__channel__v1__msg_channel_open_ack__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, {0,NULL}, NULL, (char *)protobuf_c_empty_string }


/*
 * MsgChannelOpenAckResponse defines the Msg/ChannelOpenAck response type.
 */
struct  Ibc__Core__Channel__V1__MsgChannelOpenAckResponse
{
  ProtobufCMessage base;
};
#define IBC__CORE__CHANNEL__V1__MSG_CHANNEL_OPEN_ACK_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ibc__core__channel__v1__msg_channel_open_ack_response__descriptor) \
 }


/*
 * MsgChannelOpenConfirm defines a msg sent by a Relayer to Chain B to
 * acknowledge the change of channel state to OPEN on Chain A.
 */
struct  Ibc__Core__Channel__V1__MsgChannelOpenConfirm
{
  ProtobufCMessage base;
  char *port_id;
  char *channel_id;
  ProtobufCBinaryData proof_ack;
  Ibc__Core__Client__V1__Height *proof_height;
  char *signer;
};
#define IBC__CORE__CHANNEL__V1__MSG_CHANNEL_OPEN_CONFIRM__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ibc__core__channel__v1__msg_channel_open_confirm__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, {0,NULL}, NULL, (char *)protobuf_c_empty_string }


/*
 * MsgChannelOpenConfirmResponse defines the Msg/ChannelOpenConfirm response
 * type.
 */
struct  Ibc__Core__Channel__V1__MsgChannelOpenConfirmResponse
{
  ProtobufCMessage base;
};
#define IBC__CORE__CHANNEL__V1__MSG_CHANNEL_OPEN_CONFIRM_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ibc__core__channel__v1__msg_channel_open_confirm_response__descriptor) \
 }


/*
 * MsgChannelCloseInit defines a msg sent by a Relayer to Chain A
 * to close a channel with Chain B.
 */
struct  Ibc__Core__Channel__V1__MsgChannelCloseInit
{
  ProtobufCMessage base;
  char *port_id;
  char *channel_id;
  char *signer;
};
#define IBC__CORE__CHANNEL__V1__MSG_CHANNEL_CLOSE_INIT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ibc__core__channel__v1__msg_channel_close_init__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


/*
 * MsgChannelCloseInitResponse defines the Msg/ChannelCloseInit response type.
 */
struct  Ibc__Core__Channel__V1__MsgChannelCloseInitResponse
{
  ProtobufCMessage base;
};
#define IBC__CORE__CHANNEL__V1__MSG_CHANNEL_CLOSE_INIT_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ibc__core__channel__v1__msg_channel_close_init_response__descriptor) \
 }


/*
 * MsgChannelCloseConfirm defines a msg sent by a Relayer to Chain B
 * to acknowledge the change of channel state to CLOSED on Chain A.
 */
struct  Ibc__Core__Channel__V1__MsgChannelCloseConfirm
{
  ProtobufCMessage base;
  char *port_id;
  char *channel_id;
  ProtobufCBinaryData proof_init;
  Ibc__Core__Client__V1__Height *proof_height;
  char *signer;
};
#define IBC__CORE__CHANNEL__V1__MSG_CHANNEL_CLOSE_CONFIRM__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ibc__core__channel__v1__msg_channel_close_confirm__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, {0,NULL}, NULL, (char *)protobuf_c_empty_string }


/*
 * MsgChannelCloseConfirmResponse defines the Msg/ChannelCloseConfirm response
 * type.
 */
struct  Ibc__Core__Channel__V1__MsgChannelCloseConfirmResponse
{
  ProtobufCMessage base;
};
#define IBC__CORE__CHANNEL__V1__MSG_CHANNEL_CLOSE_CONFIRM_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ibc__core__channel__v1__msg_channel_close_confirm_response__descriptor) \
 }


/*
 * MsgRecvPacket receives incoming IBC packet
 */
struct  Ibc__Core__Channel__V1__MsgRecvPacket
{
  ProtobufCMessage base;
  Ibc__Core__Channel__V1__Packet *packet;
  ProtobufCBinaryData proof_commitment;
  Ibc__Core__Client__V1__Height *proof_height;
  char *signer;
};
#define IBC__CORE__CHANNEL__V1__MSG_RECV_PACKET__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ibc__core__channel__v1__msg_recv_packet__descriptor) \
, NULL, {0,NULL}, NULL, (char *)protobuf_c_empty_string }


/*
 * MsgRecvPacketResponse defines the Msg/RecvPacket response type.
 */
struct  Ibc__Core__Channel__V1__MsgRecvPacketResponse
{
  ProtobufCMessage base;
  Ibc__Core__Channel__V1__ResponseResultType result;
};
#define IBC__CORE__CHANNEL__V1__MSG_RECV_PACKET_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ibc__core__channel__v1__msg_recv_packet_response__descriptor) \
, IBC__CORE__CHANNEL__V1__RESPONSE_RESULT_TYPE__RESPONSE_RESULT_TYPE_UNSPECIFIED }


/*
 * MsgTimeout receives timed-out packet
 */
struct  Ibc__Core__Channel__V1__MsgTimeout
{
  ProtobufCMessage base;
  Ibc__Core__Channel__V1__Packet *packet;
  ProtobufCBinaryData proof_unreceived;
  Ibc__Core__Client__V1__Height *proof_height;
  uint64_t next_sequence_recv;
  char *signer;
};
#define IBC__CORE__CHANNEL__V1__MSG_TIMEOUT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ibc__core__channel__v1__msg_timeout__descriptor) \
, NULL, {0,NULL}, NULL, 0, (char *)protobuf_c_empty_string }


/*
 * MsgTimeoutResponse defines the Msg/Timeout response type.
 */
struct  Ibc__Core__Channel__V1__MsgTimeoutResponse
{
  ProtobufCMessage base;
  Ibc__Core__Channel__V1__ResponseResultType result;
};
#define IBC__CORE__CHANNEL__V1__MSG_TIMEOUT_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ibc__core__channel__v1__msg_timeout_response__descriptor) \
, IBC__CORE__CHANNEL__V1__RESPONSE_RESULT_TYPE__RESPONSE_RESULT_TYPE_UNSPECIFIED }


/*
 * MsgTimeoutOnClose timed-out packet upon counterparty channel closure.
 */
struct  Ibc__Core__Channel__V1__MsgTimeoutOnClose
{
  ProtobufCMessage base;
  Ibc__Core__Channel__V1__Packet *packet;
  ProtobufCBinaryData proof_unreceived;
  ProtobufCBinaryData proof_close;
  Ibc__Core__Client__V1__Height *proof_height;
  uint64_t next_sequence_recv;
  char *signer;
};
#define IBC__CORE__CHANNEL__V1__MSG_TIMEOUT_ON_CLOSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ibc__core__channel__v1__msg_timeout_on_close__descriptor) \
, NULL, {0,NULL}, {0,NULL}, NULL, 0, (char *)protobuf_c_empty_string }


/*
 * MsgTimeoutOnCloseResponse defines the Msg/TimeoutOnClose response type.
 */
struct  Ibc__Core__Channel__V1__MsgTimeoutOnCloseResponse
{
  ProtobufCMessage base;
  Ibc__Core__Channel__V1__ResponseResultType result;
};
#define IBC__CORE__CHANNEL__V1__MSG_TIMEOUT_ON_CLOSE_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ibc__core__channel__v1__msg_timeout_on_close_response__descriptor) \
, IBC__CORE__CHANNEL__V1__RESPONSE_RESULT_TYPE__RESPONSE_RESULT_TYPE_UNSPECIFIED }


/*
 * MsgAcknowledgement receives incoming IBC acknowledgement
 */
struct  Ibc__Core__Channel__V1__MsgAcknowledgement
{
  ProtobufCMessage base;
  Ibc__Core__Channel__V1__Packet *packet;
  ProtobufCBinaryData acknowledgement;
  ProtobufCBinaryData proof_acked;
  Ibc__Core__Client__V1__Height *proof_height;
  char *signer;
};
#define IBC__CORE__CHANNEL__V1__MSG_ACKNOWLEDGEMENT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ibc__core__channel__v1__msg_acknowledgement__descriptor) \
, NULL, {0,NULL}, {0,NULL}, NULL, (char *)protobuf_c_empty_string }


/*
 * MsgAcknowledgementResponse defines the Msg/Acknowledgement response type.
 */
struct  Ibc__Core__Channel__V1__MsgAcknowledgementResponse
{
  ProtobufCMessage base;
  Ibc__Core__Channel__V1__ResponseResultType result;
};
#define IBC__CORE__CHANNEL__V1__MSG_ACKNOWLEDGEMENT_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ibc__core__channel__v1__msg_acknowledgement_response__descriptor) \
, IBC__CORE__CHANNEL__V1__RESPONSE_RESULT_TYPE__RESPONSE_RESULT_TYPE_UNSPECIFIED }


/* Ibc__Core__Channel__V1__MsgChannelOpenInit methods */
void   ibc__core__channel__v1__msg_channel_open_init__init
                     (Ibc__Core__Channel__V1__MsgChannelOpenInit         *message);
size_t ibc__core__channel__v1__msg_channel_open_init__get_packed_size
                     (const Ibc__Core__Channel__V1__MsgChannelOpenInit   *message);
size_t ibc__core__channel__v1__msg_channel_open_init__pack
                     (const Ibc__Core__Channel__V1__MsgChannelOpenInit   *message,
                      uint8_t             *out);
size_t ibc__core__channel__v1__msg_channel_open_init__pack_to_buffer
                     (const Ibc__Core__Channel__V1__MsgChannelOpenInit   *message,
                      ProtobufCBuffer     *buffer);
Ibc__Core__Channel__V1__MsgChannelOpenInit *
       ibc__core__channel__v1__msg_channel_open_init__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ibc__core__channel__v1__msg_channel_open_init__free_unpacked
                     (Ibc__Core__Channel__V1__MsgChannelOpenInit *message,
                      ProtobufCAllocator *allocator);
/* Ibc__Core__Channel__V1__MsgChannelOpenInitResponse methods */
void   ibc__core__channel__v1__msg_channel_open_init_response__init
                     (Ibc__Core__Channel__V1__MsgChannelOpenInitResponse         *message);
size_t ibc__core__channel__v1__msg_channel_open_init_response__get_packed_size
                     (const Ibc__Core__Channel__V1__MsgChannelOpenInitResponse   *message);
size_t ibc__core__channel__v1__msg_channel_open_init_response__pack
                     (const Ibc__Core__Channel__V1__MsgChannelOpenInitResponse   *message,
                      uint8_t             *out);
size_t ibc__core__channel__v1__msg_channel_open_init_response__pack_to_buffer
                     (const Ibc__Core__Channel__V1__MsgChannelOpenInitResponse   *message,
                      ProtobufCBuffer     *buffer);
Ibc__Core__Channel__V1__MsgChannelOpenInitResponse *
       ibc__core__channel__v1__msg_channel_open_init_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ibc__core__channel__v1__msg_channel_open_init_response__free_unpacked
                     (Ibc__Core__Channel__V1__MsgChannelOpenInitResponse *message,
                      ProtobufCAllocator *allocator);
/* Ibc__Core__Channel__V1__MsgChannelOpenTry methods */
void   ibc__core__channel__v1__msg_channel_open_try__init
                     (Ibc__Core__Channel__V1__MsgChannelOpenTry         *message);
size_t ibc__core__channel__v1__msg_channel_open_try__get_packed_size
                     (const Ibc__Core__Channel__V1__MsgChannelOpenTry   *message);
size_t ibc__core__channel__v1__msg_channel_open_try__pack
                     (const Ibc__Core__Channel__V1__MsgChannelOpenTry   *message,
                      uint8_t             *out);
size_t ibc__core__channel__v1__msg_channel_open_try__pack_to_buffer
                     (const Ibc__Core__Channel__V1__MsgChannelOpenTry   *message,
                      ProtobufCBuffer     *buffer);
Ibc__Core__Channel__V1__MsgChannelOpenTry *
       ibc__core__channel__v1__msg_channel_open_try__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ibc__core__channel__v1__msg_channel_open_try__free_unpacked
                     (Ibc__Core__Channel__V1__MsgChannelOpenTry *message,
                      ProtobufCAllocator *allocator);
/* Ibc__Core__Channel__V1__MsgChannelOpenTryResponse methods */
void   ibc__core__channel__v1__msg_channel_open_try_response__init
                     (Ibc__Core__Channel__V1__MsgChannelOpenTryResponse         *message);
size_t ibc__core__channel__v1__msg_channel_open_try_response__get_packed_size
                     (const Ibc__Core__Channel__V1__MsgChannelOpenTryResponse   *message);
size_t ibc__core__channel__v1__msg_channel_open_try_response__pack
                     (const Ibc__Core__Channel__V1__MsgChannelOpenTryResponse   *message,
                      uint8_t             *out);
size_t ibc__core__channel__v1__msg_channel_open_try_response__pack_to_buffer
                     (const Ibc__Core__Channel__V1__MsgChannelOpenTryResponse   *message,
                      ProtobufCBuffer     *buffer);
Ibc__Core__Channel__V1__MsgChannelOpenTryResponse *
       ibc__core__channel__v1__msg_channel_open_try_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ibc__core__channel__v1__msg_channel_open_try_response__free_unpacked
                     (Ibc__Core__Channel__V1__MsgChannelOpenTryResponse *message,
                      ProtobufCAllocator *allocator);
/* Ibc__Core__Channel__V1__MsgChannelOpenAck methods */
void   ibc__core__channel__v1__msg_channel_open_ack__init
                     (Ibc__Core__Channel__V1__MsgChannelOpenAck         *message);
size_t ibc__core__channel__v1__msg_channel_open_ack__get_packed_size
                     (const Ibc__Core__Channel__V1__MsgChannelOpenAck   *message);
size_t ibc__core__channel__v1__msg_channel_open_ack__pack
                     (const Ibc__Core__Channel__V1__MsgChannelOpenAck   *message,
                      uint8_t             *out);
size_t ibc__core__channel__v1__msg_channel_open_ack__pack_to_buffer
                     (const Ibc__Core__Channel__V1__MsgChannelOpenAck   *message,
                      ProtobufCBuffer     *buffer);
Ibc__Core__Channel__V1__MsgChannelOpenAck *
       ibc__core__channel__v1__msg_channel_open_ack__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ibc__core__channel__v1__msg_channel_open_ack__free_unpacked
                     (Ibc__Core__Channel__V1__MsgChannelOpenAck *message,
                      ProtobufCAllocator *allocator);
/* Ibc__Core__Channel__V1__MsgChannelOpenAckResponse methods */
void   ibc__core__channel__v1__msg_channel_open_ack_response__init
                     (Ibc__Core__Channel__V1__MsgChannelOpenAckResponse         *message);
size_t ibc__core__channel__v1__msg_channel_open_ack_response__get_packed_size
                     (const Ibc__Core__Channel__V1__MsgChannelOpenAckResponse   *message);
size_t ibc__core__channel__v1__msg_channel_open_ack_response__pack
                     (const Ibc__Core__Channel__V1__MsgChannelOpenAckResponse   *message,
                      uint8_t             *out);
size_t ibc__core__channel__v1__msg_channel_open_ack_response__pack_to_buffer
                     (const Ibc__Core__Channel__V1__MsgChannelOpenAckResponse   *message,
                      ProtobufCBuffer     *buffer);
Ibc__Core__Channel__V1__MsgChannelOpenAckResponse *
       ibc__core__channel__v1__msg_channel_open_ack_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ibc__core__channel__v1__msg_channel_open_ack_response__free_unpacked
                     (Ibc__Core__Channel__V1__MsgChannelOpenAckResponse *message,
                      ProtobufCAllocator *allocator);
/* Ibc__Core__Channel__V1__MsgChannelOpenConfirm methods */
void   ibc__core__channel__v1__msg_channel_open_confirm__init
                     (Ibc__Core__Channel__V1__MsgChannelOpenConfirm         *message);
size_t ibc__core__channel__v1__msg_channel_open_confirm__get_packed_size
                     (const Ibc__Core__Channel__V1__MsgChannelOpenConfirm   *message);
size_t ibc__core__channel__v1__msg_channel_open_confirm__pack
                     (const Ibc__Core__Channel__V1__MsgChannelOpenConfirm   *message,
                      uint8_t             *out);
size_t ibc__core__channel__v1__msg_channel_open_confirm__pack_to_buffer
                     (const Ibc__Core__Channel__V1__MsgChannelOpenConfirm   *message,
                      ProtobufCBuffer     *buffer);
Ibc__Core__Channel__V1__MsgChannelOpenConfirm *
       ibc__core__channel__v1__msg_channel_open_confirm__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ibc__core__channel__v1__msg_channel_open_confirm__free_unpacked
                     (Ibc__Core__Channel__V1__MsgChannelOpenConfirm *message,
                      ProtobufCAllocator *allocator);
/* Ibc__Core__Channel__V1__MsgChannelOpenConfirmResponse methods */
void   ibc__core__channel__v1__msg_channel_open_confirm_response__init
                     (Ibc__Core__Channel__V1__MsgChannelOpenConfirmResponse         *message);
size_t ibc__core__channel__v1__msg_channel_open_confirm_response__get_packed_size
                     (const Ibc__Core__Channel__V1__MsgChannelOpenConfirmResponse   *message);
size_t ibc__core__channel__v1__msg_channel_open_confirm_response__pack
                     (const Ibc__Core__Channel__V1__MsgChannelOpenConfirmResponse   *message,
                      uint8_t             *out);
size_t ibc__core__channel__v1__msg_channel_open_confirm_response__pack_to_buffer
                     (const Ibc__Core__Channel__V1__MsgChannelOpenConfirmResponse   *message,
                      ProtobufCBuffer     *buffer);
Ibc__Core__Channel__V1__MsgChannelOpenConfirmResponse *
       ibc__core__channel__v1__msg_channel_open_confirm_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ibc__core__channel__v1__msg_channel_open_confirm_response__free_unpacked
                     (Ibc__Core__Channel__V1__MsgChannelOpenConfirmResponse *message,
                      ProtobufCAllocator *allocator);
/* Ibc__Core__Channel__V1__MsgChannelCloseInit methods */
void   ibc__core__channel__v1__msg_channel_close_init__init
                     (Ibc__Core__Channel__V1__MsgChannelCloseInit         *message);
size_t ibc__core__channel__v1__msg_channel_close_init__get_packed_size
                     (const Ibc__Core__Channel__V1__MsgChannelCloseInit   *message);
size_t ibc__core__channel__v1__msg_channel_close_init__pack
                     (const Ibc__Core__Channel__V1__MsgChannelCloseInit   *message,
                      uint8_t             *out);
size_t ibc__core__channel__v1__msg_channel_close_init__pack_to_buffer
                     (const Ibc__Core__Channel__V1__MsgChannelCloseInit   *message,
                      ProtobufCBuffer     *buffer);
Ibc__Core__Channel__V1__MsgChannelCloseInit *
       ibc__core__channel__v1__msg_channel_close_init__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ibc__core__channel__v1__msg_channel_close_init__free_unpacked
                     (Ibc__Core__Channel__V1__MsgChannelCloseInit *message,
                      ProtobufCAllocator *allocator);
/* Ibc__Core__Channel__V1__MsgChannelCloseInitResponse methods */
void   ibc__core__channel__v1__msg_channel_close_init_response__init
                     (Ibc__Core__Channel__V1__MsgChannelCloseInitResponse         *message);
size_t ibc__core__channel__v1__msg_channel_close_init_response__get_packed_size
                     (const Ibc__Core__Channel__V1__MsgChannelCloseInitResponse   *message);
size_t ibc__core__channel__v1__msg_channel_close_init_response__pack
                     (const Ibc__Core__Channel__V1__MsgChannelCloseInitResponse   *message,
                      uint8_t             *out);
size_t ibc__core__channel__v1__msg_channel_close_init_response__pack_to_buffer
                     (const Ibc__Core__Channel__V1__MsgChannelCloseInitResponse   *message,
                      ProtobufCBuffer     *buffer);
Ibc__Core__Channel__V1__MsgChannelCloseInitResponse *
       ibc__core__channel__v1__msg_channel_close_init_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ibc__core__channel__v1__msg_channel_close_init_response__free_unpacked
                     (Ibc__Core__Channel__V1__MsgChannelCloseInitResponse *message,
                      ProtobufCAllocator *allocator);
/* Ibc__Core__Channel__V1__MsgChannelCloseConfirm methods */
void   ibc__core__channel__v1__msg_channel_close_confirm__init
                     (Ibc__Core__Channel__V1__MsgChannelCloseConfirm         *message);
size_t ibc__core__channel__v1__msg_channel_close_confirm__get_packed_size
                     (const Ibc__Core__Channel__V1__MsgChannelCloseConfirm   *message);
size_t ibc__core__channel__v1__msg_channel_close_confirm__pack
                     (const Ibc__Core__Channel__V1__MsgChannelCloseConfirm   *message,
                      uint8_t             *out);
size_t ibc__core__channel__v1__msg_channel_close_confirm__pack_to_buffer
                     (const Ibc__Core__Channel__V1__MsgChannelCloseConfirm   *message,
                      ProtobufCBuffer     *buffer);
Ibc__Core__Channel__V1__MsgChannelCloseConfirm *
       ibc__core__channel__v1__msg_channel_close_confirm__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ibc__core__channel__v1__msg_channel_close_confirm__free_unpacked
                     (Ibc__Core__Channel__V1__MsgChannelCloseConfirm *message,
                      ProtobufCAllocator *allocator);
/* Ibc__Core__Channel__V1__MsgChannelCloseConfirmResponse methods */
void   ibc__core__channel__v1__msg_channel_close_confirm_response__init
                     (Ibc__Core__Channel__V1__MsgChannelCloseConfirmResponse         *message);
size_t ibc__core__channel__v1__msg_channel_close_confirm_response__get_packed_size
                     (const Ibc__Core__Channel__V1__MsgChannelCloseConfirmResponse   *message);
size_t ibc__core__channel__v1__msg_channel_close_confirm_response__pack
                     (const Ibc__Core__Channel__V1__MsgChannelCloseConfirmResponse   *message,
                      uint8_t             *out);
size_t ibc__core__channel__v1__msg_channel_close_confirm_response__pack_to_buffer
                     (const Ibc__Core__Channel__V1__MsgChannelCloseConfirmResponse   *message,
                      ProtobufCBuffer     *buffer);
Ibc__Core__Channel__V1__MsgChannelCloseConfirmResponse *
       ibc__core__channel__v1__msg_channel_close_confirm_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ibc__core__channel__v1__msg_channel_close_confirm_response__free_unpacked
                     (Ibc__Core__Channel__V1__MsgChannelCloseConfirmResponse *message,
                      ProtobufCAllocator *allocator);
/* Ibc__Core__Channel__V1__MsgRecvPacket methods */
void   ibc__core__channel__v1__msg_recv_packet__init
                     (Ibc__Core__Channel__V1__MsgRecvPacket         *message);
size_t ibc__core__channel__v1__msg_recv_packet__get_packed_size
                     (const Ibc__Core__Channel__V1__MsgRecvPacket   *message);
size_t ibc__core__channel__v1__msg_recv_packet__pack
                     (const Ibc__Core__Channel__V1__MsgRecvPacket   *message,
                      uint8_t             *out);
size_t ibc__core__channel__v1__msg_recv_packet__pack_to_buffer
                     (const Ibc__Core__Channel__V1__MsgRecvPacket   *message,
                      ProtobufCBuffer     *buffer);
Ibc__Core__Channel__V1__MsgRecvPacket *
       ibc__core__channel__v1__msg_recv_packet__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ibc__core__channel__v1__msg_recv_packet__free_unpacked
                     (Ibc__Core__Channel__V1__MsgRecvPacket *message,
                      ProtobufCAllocator *allocator);
/* Ibc__Core__Channel__V1__MsgRecvPacketResponse methods */
void   ibc__core__channel__v1__msg_recv_packet_response__init
                     (Ibc__Core__Channel__V1__MsgRecvPacketResponse         *message);
size_t ibc__core__channel__v1__msg_recv_packet_response__get_packed_size
                     (const Ibc__Core__Channel__V1__MsgRecvPacketResponse   *message);
size_t ibc__core__channel__v1__msg_recv_packet_response__pack
                     (const Ibc__Core__Channel__V1__MsgRecvPacketResponse   *message,
                      uint8_t             *out);
size_t ibc__core__channel__v1__msg_recv_packet_response__pack_to_buffer
                     (const Ibc__Core__Channel__V1__MsgRecvPacketResponse   *message,
                      ProtobufCBuffer     *buffer);
Ibc__Core__Channel__V1__MsgRecvPacketResponse *
       ibc__core__channel__v1__msg_recv_packet_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ibc__core__channel__v1__msg_recv_packet_response__free_unpacked
                     (Ibc__Core__Channel__V1__MsgRecvPacketResponse *message,
                      ProtobufCAllocator *allocator);
/* Ibc__Core__Channel__V1__MsgTimeout methods */
void   ibc__core__channel__v1__msg_timeout__init
                     (Ibc__Core__Channel__V1__MsgTimeout         *message);
size_t ibc__core__channel__v1__msg_timeout__get_packed_size
                     (const Ibc__Core__Channel__V1__MsgTimeout   *message);
size_t ibc__core__channel__v1__msg_timeout__pack
                     (const Ibc__Core__Channel__V1__MsgTimeout   *message,
                      uint8_t             *out);
size_t ibc__core__channel__v1__msg_timeout__pack_to_buffer
                     (const Ibc__Core__Channel__V1__MsgTimeout   *message,
                      ProtobufCBuffer     *buffer);
Ibc__Core__Channel__V1__MsgTimeout *
       ibc__core__channel__v1__msg_timeout__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ibc__core__channel__v1__msg_timeout__free_unpacked
                     (Ibc__Core__Channel__V1__MsgTimeout *message,
                      ProtobufCAllocator *allocator);
/* Ibc__Core__Channel__V1__MsgTimeoutResponse methods */
void   ibc__core__channel__v1__msg_timeout_response__init
                     (Ibc__Core__Channel__V1__MsgTimeoutResponse         *message);
size_t ibc__core__channel__v1__msg_timeout_response__get_packed_size
                     (const Ibc__Core__Channel__V1__MsgTimeoutResponse   *message);
size_t ibc__core__channel__v1__msg_timeout_response__pack
                     (const Ibc__Core__Channel__V1__MsgTimeoutResponse   *message,
                      uint8_t             *out);
size_t ibc__core__channel__v1__msg_timeout_response__pack_to_buffer
                     (const Ibc__Core__Channel__V1__MsgTimeoutResponse   *message,
                      ProtobufCBuffer     *buffer);
Ibc__Core__Channel__V1__MsgTimeoutResponse *
       ibc__core__channel__v1__msg_timeout_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ibc__core__channel__v1__msg_timeout_response__free_unpacked
                     (Ibc__Core__Channel__V1__MsgTimeoutResponse *message,
                      ProtobufCAllocator *allocator);
/* Ibc__Core__Channel__V1__MsgTimeoutOnClose methods */
void   ibc__core__channel__v1__msg_timeout_on_close__init
                     (Ibc__Core__Channel__V1__MsgTimeoutOnClose         *message);
size_t ibc__core__channel__v1__msg_timeout_on_close__get_packed_size
                     (const Ibc__Core__Channel__V1__MsgTimeoutOnClose   *message);
size_t ibc__core__channel__v1__msg_timeout_on_close__pack
                     (const Ibc__Core__Channel__V1__MsgTimeoutOnClose   *message,
                      uint8_t             *out);
size_t ibc__core__channel__v1__msg_timeout_on_close__pack_to_buffer
                     (const Ibc__Core__Channel__V1__MsgTimeoutOnClose   *message,
                      ProtobufCBuffer     *buffer);
Ibc__Core__Channel__V1__MsgTimeoutOnClose *
       ibc__core__channel__v1__msg_timeout_on_close__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ibc__core__channel__v1__msg_timeout_on_close__free_unpacked
                     (Ibc__Core__Channel__V1__MsgTimeoutOnClose *message,
                      ProtobufCAllocator *allocator);
/* Ibc__Core__Channel__V1__MsgTimeoutOnCloseResponse methods */
void   ibc__core__channel__v1__msg_timeout_on_close_response__init
                     (Ibc__Core__Channel__V1__MsgTimeoutOnCloseResponse         *message);
size_t ibc__core__channel__v1__msg_timeout_on_close_response__get_packed_size
                     (const Ibc__Core__Channel__V1__MsgTimeoutOnCloseResponse   *message);
size_t ibc__core__channel__v1__msg_timeout_on_close_response__pack
                     (const Ibc__Core__Channel__V1__MsgTimeoutOnCloseResponse   *message,
                      uint8_t             *out);
size_t ibc__core__channel__v1__msg_timeout_on_close_response__pack_to_buffer
                     (const Ibc__Core__Channel__V1__MsgTimeoutOnCloseResponse   *message,
                      ProtobufCBuffer     *buffer);
Ibc__Core__Channel__V1__MsgTimeoutOnCloseResponse *
       ibc__core__channel__v1__msg_timeout_on_close_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ibc__core__channel__v1__msg_timeout_on_close_response__free_unpacked
                     (Ibc__Core__Channel__V1__MsgTimeoutOnCloseResponse *message,
                      ProtobufCAllocator *allocator);
/* Ibc__Core__Channel__V1__MsgAcknowledgement methods */
void   ibc__core__channel__v1__msg_acknowledgement__init
                     (Ibc__Core__Channel__V1__MsgAcknowledgement         *message);
size_t ibc__core__channel__v1__msg_acknowledgement__get_packed_size
                     (const Ibc__Core__Channel__V1__MsgAcknowledgement   *message);
size_t ibc__core__channel__v1__msg_acknowledgement__pack
                     (const Ibc__Core__Channel__V1__MsgAcknowledgement   *message,
                      uint8_t             *out);
size_t ibc__core__channel__v1__msg_acknowledgement__pack_to_buffer
                     (const Ibc__Core__Channel__V1__MsgAcknowledgement   *message,
                      ProtobufCBuffer     *buffer);
Ibc__Core__Channel__V1__MsgAcknowledgement *
       ibc__core__channel__v1__msg_acknowledgement__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ibc__core__channel__v1__msg_acknowledgement__free_unpacked
                     (Ibc__Core__Channel__V1__MsgAcknowledgement *message,
                      ProtobufCAllocator *allocator);
/* Ibc__Core__Channel__V1__MsgAcknowledgementResponse methods */
void   ibc__core__channel__v1__msg_acknowledgement_response__init
                     (Ibc__Core__Channel__V1__MsgAcknowledgementResponse         *message);
size_t ibc__core__channel__v1__msg_acknowledgement_response__get_packed_size
                     (const Ibc__Core__Channel__V1__MsgAcknowledgementResponse   *message);
size_t ibc__core__channel__v1__msg_acknowledgement_response__pack
                     (const Ibc__Core__Channel__V1__MsgAcknowledgementResponse   *message,
                      uint8_t             *out);
size_t ibc__core__channel__v1__msg_acknowledgement_response__pack_to_buffer
                     (const Ibc__Core__Channel__V1__MsgAcknowledgementResponse   *message,
                      ProtobufCBuffer     *buffer);
Ibc__Core__Channel__V1__MsgAcknowledgementResponse *
       ibc__core__channel__v1__msg_acknowledgement_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ibc__core__channel__v1__msg_acknowledgement_response__free_unpacked
                     (Ibc__Core__Channel__V1__MsgAcknowledgementResponse *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Ibc__Core__Channel__V1__MsgChannelOpenInit_Closure)
                 (const Ibc__Core__Channel__V1__MsgChannelOpenInit *message,
                  void *closure_data);
typedef void (*Ibc__Core__Channel__V1__MsgChannelOpenInitResponse_Closure)
                 (const Ibc__Core__Channel__V1__MsgChannelOpenInitResponse *message,
                  void *closure_data);
typedef void (*Ibc__Core__Channel__V1__MsgChannelOpenTry_Closure)
                 (const Ibc__Core__Channel__V1__MsgChannelOpenTry *message,
                  void *closure_data);
typedef void (*Ibc__Core__Channel__V1__MsgChannelOpenTryResponse_Closure)
                 (const Ibc__Core__Channel__V1__MsgChannelOpenTryResponse *message,
                  void *closure_data);
typedef void (*Ibc__Core__Channel__V1__MsgChannelOpenAck_Closure)
                 (const Ibc__Core__Channel__V1__MsgChannelOpenAck *message,
                  void *closure_data);
typedef void (*Ibc__Core__Channel__V1__MsgChannelOpenAckResponse_Closure)
                 (const Ibc__Core__Channel__V1__MsgChannelOpenAckResponse *message,
                  void *closure_data);
typedef void (*Ibc__Core__Channel__V1__MsgChannelOpenConfirm_Closure)
                 (const Ibc__Core__Channel__V1__MsgChannelOpenConfirm *message,
                  void *closure_data);
typedef void (*Ibc__Core__Channel__V1__MsgChannelOpenConfirmResponse_Closure)
                 (const Ibc__Core__Channel__V1__MsgChannelOpenConfirmResponse *message,
                  void *closure_data);
typedef void (*Ibc__Core__Channel__V1__MsgChannelCloseInit_Closure)
                 (const Ibc__Core__Channel__V1__MsgChannelCloseInit *message,
                  void *closure_data);
typedef void (*Ibc__Core__Channel__V1__MsgChannelCloseInitResponse_Closure)
                 (const Ibc__Core__Channel__V1__MsgChannelCloseInitResponse *message,
                  void *closure_data);
typedef void (*Ibc__Core__Channel__V1__MsgChannelCloseConfirm_Closure)
                 (const Ibc__Core__Channel__V1__MsgChannelCloseConfirm *message,
                  void *closure_data);
typedef void (*Ibc__Core__Channel__V1__MsgChannelCloseConfirmResponse_Closure)
                 (const Ibc__Core__Channel__V1__MsgChannelCloseConfirmResponse *message,
                  void *closure_data);
typedef void (*Ibc__Core__Channel__V1__MsgRecvPacket_Closure)
                 (const Ibc__Core__Channel__V1__MsgRecvPacket *message,
                  void *closure_data);
typedef void (*Ibc__Core__Channel__V1__MsgRecvPacketResponse_Closure)
                 (const Ibc__Core__Channel__V1__MsgRecvPacketResponse *message,
                  void *closure_data);
typedef void (*Ibc__Core__Channel__V1__MsgTimeout_Closure)
                 (const Ibc__Core__Channel__V1__MsgTimeout *message,
                  void *closure_data);
typedef void (*Ibc__Core__Channel__V1__MsgTimeoutResponse_Closure)
                 (const Ibc__Core__Channel__V1__MsgTimeoutResponse *message,
                  void *closure_data);
typedef void (*Ibc__Core__Channel__V1__MsgTimeoutOnClose_Closure)
                 (const Ibc__Core__Channel__V1__MsgTimeoutOnClose *message,
                  void *closure_data);
typedef void (*Ibc__Core__Channel__V1__MsgTimeoutOnCloseResponse_Closure)
                 (const Ibc__Core__Channel__V1__MsgTimeoutOnCloseResponse *message,
                  void *closure_data);
typedef void (*Ibc__Core__Channel__V1__MsgAcknowledgement_Closure)
                 (const Ibc__Core__Channel__V1__MsgAcknowledgement *message,
                  void *closure_data);
typedef void (*Ibc__Core__Channel__V1__MsgAcknowledgementResponse_Closure)
                 (const Ibc__Core__Channel__V1__MsgAcknowledgementResponse *message,
                  void *closure_data);

/* --- services --- */

typedef struct Ibc__Core__Channel__V1__Msg_Service Ibc__Core__Channel__V1__Msg_Service;
struct Ibc__Core__Channel__V1__Msg_Service
{
  ProtobufCService base;
  void (*channel_open_init)(Ibc__Core__Channel__V1__Msg_Service *service,
                            const Ibc__Core__Channel__V1__MsgChannelOpenInit *input,
                            Ibc__Core__Channel__V1__MsgChannelOpenInitResponse_Closure closure,
                            void *closure_data);
  void (*channel_open_try)(Ibc__Core__Channel__V1__Msg_Service *service,
                           const Ibc__Core__Channel__V1__MsgChannelOpenTry *input,
                           Ibc__Core__Channel__V1__MsgChannelOpenTryResponse_Closure closure,
                           void *closure_data);
  void (*channel_open_ack)(Ibc__Core__Channel__V1__Msg_Service *service,
                           const Ibc__Core__Channel__V1__MsgChannelOpenAck *input,
                           Ibc__Core__Channel__V1__MsgChannelOpenAckResponse_Closure closure,
                           void *closure_data);
  void (*channel_open_confirm)(Ibc__Core__Channel__V1__Msg_Service *service,
                               const Ibc__Core__Channel__V1__MsgChannelOpenConfirm *input,
                               Ibc__Core__Channel__V1__MsgChannelOpenConfirmResponse_Closure closure,
                               void *closure_data);
  void (*channel_close_init)(Ibc__Core__Channel__V1__Msg_Service *service,
                             const Ibc__Core__Channel__V1__MsgChannelCloseInit *input,
                             Ibc__Core__Channel__V1__MsgChannelCloseInitResponse_Closure closure,
                             void *closure_data);
  void (*channel_close_confirm)(Ibc__Core__Channel__V1__Msg_Service *service,
                                const Ibc__Core__Channel__V1__MsgChannelCloseConfirm *input,
                                Ibc__Core__Channel__V1__MsgChannelCloseConfirmResponse_Closure closure,
                                void *closure_data);
  void (*recv_packet)(Ibc__Core__Channel__V1__Msg_Service *service,
                      const Ibc__Core__Channel__V1__MsgRecvPacket *input,
                      Ibc__Core__Channel__V1__MsgRecvPacketResponse_Closure closure,
                      void *closure_data);
  void (*timeout)(Ibc__Core__Channel__V1__Msg_Service *service,
                  const Ibc__Core__Channel__V1__MsgTimeout *input,
                  Ibc__Core__Channel__V1__MsgTimeoutResponse_Closure closure,
                  void *closure_data);
  void (*timeout_on_close)(Ibc__Core__Channel__V1__Msg_Service *service,
                           const Ibc__Core__Channel__V1__MsgTimeoutOnClose *input,
                           Ibc__Core__Channel__V1__MsgTimeoutOnCloseResponse_Closure closure,
                           void *closure_data);
  void (*acknowledgement)(Ibc__Core__Channel__V1__Msg_Service *service,
                          const Ibc__Core__Channel__V1__MsgAcknowledgement *input,
                          Ibc__Core__Channel__V1__MsgAcknowledgementResponse_Closure closure,
                          void *closure_data);
};
typedef void (*Ibc__Core__Channel__V1__Msg_ServiceDestroy)(Ibc__Core__Channel__V1__Msg_Service *);
void ibc__core__channel__v1__msg__init (Ibc__Core__Channel__V1__Msg_Service *service,
                                        Ibc__Core__Channel__V1__Msg_ServiceDestroy destroy);
#define IBC__CORE__CHANNEL__V1__MSG__BASE_INIT \
    { &ibc__core__channel__v1__msg__descriptor, protobuf_c_service_invoke_internal, NULL }
#define IBC__CORE__CHANNEL__V1__MSG__INIT(function_prefix__) \
    { IBC__CORE__CHANNEL__V1__MSG__BASE_INIT,\
      function_prefix__ ## channel_open_init,\
      function_prefix__ ## channel_open_try,\
      function_prefix__ ## channel_open_ack,\
      function_prefix__ ## channel_open_confirm,\
      function_prefix__ ## channel_close_init,\
      function_prefix__ ## channel_close_confirm,\
      function_prefix__ ## recv_packet,\
      function_prefix__ ## timeout,\
      function_prefix__ ## timeout_on_close,\
      function_prefix__ ## acknowledgement  }
void ibc__core__channel__v1__msg__channel_open_init(ProtobufCService *service,
                                                    const Ibc__Core__Channel__V1__MsgChannelOpenInit *input,
                                                    Ibc__Core__Channel__V1__MsgChannelOpenInitResponse_Closure closure,
                                                    void *closure_data);
void ibc__core__channel__v1__msg__channel_open_try(ProtobufCService *service,
                                                   const Ibc__Core__Channel__V1__MsgChannelOpenTry *input,
                                                   Ibc__Core__Channel__V1__MsgChannelOpenTryResponse_Closure closure,
                                                   void *closure_data);
void ibc__core__channel__v1__msg__channel_open_ack(ProtobufCService *service,
                                                   const Ibc__Core__Channel__V1__MsgChannelOpenAck *input,
                                                   Ibc__Core__Channel__V1__MsgChannelOpenAckResponse_Closure closure,
                                                   void *closure_data);
void ibc__core__channel__v1__msg__channel_open_confirm(ProtobufCService *service,
                                                       const Ibc__Core__Channel__V1__MsgChannelOpenConfirm *input,
                                                       Ibc__Core__Channel__V1__MsgChannelOpenConfirmResponse_Closure closure,
                                                       void *closure_data);
void ibc__core__channel__v1__msg__channel_close_init(ProtobufCService *service,
                                                     const Ibc__Core__Channel__V1__MsgChannelCloseInit *input,
                                                     Ibc__Core__Channel__V1__MsgChannelCloseInitResponse_Closure closure,
                                                     void *closure_data);
void ibc__core__channel__v1__msg__channel_close_confirm(ProtobufCService *service,
                                                        const Ibc__Core__Channel__V1__MsgChannelCloseConfirm *input,
                                                        Ibc__Core__Channel__V1__MsgChannelCloseConfirmResponse_Closure closure,
                                                        void *closure_data);
void ibc__core__channel__v1__msg__recv_packet(ProtobufCService *service,
                                              const Ibc__Core__Channel__V1__MsgRecvPacket *input,
                                              Ibc__Core__Channel__V1__MsgRecvPacketResponse_Closure closure,
                                              void *closure_data);
void ibc__core__channel__v1__msg__timeout(ProtobufCService *service,
                                          const Ibc__Core__Channel__V1__MsgTimeout *input,
                                          Ibc__Core__Channel__V1__MsgTimeoutResponse_Closure closure,
                                          void *closure_data);
void ibc__core__channel__v1__msg__timeout_on_close(ProtobufCService *service,
                                                   const Ibc__Core__Channel__V1__MsgTimeoutOnClose *input,
                                                   Ibc__Core__Channel__V1__MsgTimeoutOnCloseResponse_Closure closure,
                                                   void *closure_data);
void ibc__core__channel__v1__msg__acknowledgement(ProtobufCService *service,
                                                  const Ibc__Core__Channel__V1__MsgAcknowledgement *input,
                                                  Ibc__Core__Channel__V1__MsgAcknowledgementResponse_Closure closure,
                                                  void *closure_data);

/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    ibc__core__channel__v1__response_result_type__descriptor;
extern const ProtobufCMessageDescriptor ibc__core__channel__v1__msg_channel_open_init__descriptor;
extern const ProtobufCMessageDescriptor ibc__core__channel__v1__msg_channel_open_init_response__descriptor;
extern const ProtobufCMessageDescriptor ibc__core__channel__v1__msg_channel_open_try__descriptor;
extern const ProtobufCMessageDescriptor ibc__core__channel__v1__msg_channel_open_try_response__descriptor;
extern const ProtobufCMessageDescriptor ibc__core__channel__v1__msg_channel_open_ack__descriptor;
extern const ProtobufCMessageDescriptor ibc__core__channel__v1__msg_channel_open_ack_response__descriptor;
extern const ProtobufCMessageDescriptor ibc__core__channel__v1__msg_channel_open_confirm__descriptor;
extern const ProtobufCMessageDescriptor ibc__core__channel__v1__msg_channel_open_confirm_response__descriptor;
extern const ProtobufCMessageDescriptor ibc__core__channel__v1__msg_channel_close_init__descriptor;
extern const ProtobufCMessageDescriptor ibc__core__channel__v1__msg_channel_close_init_response__descriptor;
extern const ProtobufCMessageDescriptor ibc__core__channel__v1__msg_channel_close_confirm__descriptor;
extern const ProtobufCMessageDescriptor ibc__core__channel__v1__msg_channel_close_confirm_response__descriptor;
extern const ProtobufCMessageDescriptor ibc__core__channel__v1__msg_recv_packet__descriptor;
extern const ProtobufCMessageDescriptor ibc__core__channel__v1__msg_recv_packet_response__descriptor;
extern const ProtobufCMessageDescriptor ibc__core__channel__v1__msg_timeout__descriptor;
extern const ProtobufCMessageDescriptor ibc__core__channel__v1__msg_timeout_response__descriptor;
extern const ProtobufCMessageDescriptor ibc__core__channel__v1__msg_timeout_on_close__descriptor;
extern const ProtobufCMessageDescriptor ibc__core__channel__v1__msg_timeout_on_close_response__descriptor;
extern const ProtobufCMessageDescriptor ibc__core__channel__v1__msg_acknowledgement__descriptor;
extern const ProtobufCMessageDescriptor ibc__core__channel__v1__msg_acknowledgement_response__descriptor;
extern const ProtobufCServiceDescriptor ibc__core__channel__v1__msg__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_ibc_2fcore_2fchannel_2fv1_2ftx_2eproto__INCLUDED */
