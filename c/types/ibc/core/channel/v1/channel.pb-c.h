/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: ibc/core/channel/v1/channel.proto */

#ifndef PROTOBUF_C_ibc_2fcore_2fchannel_2fv1_2fchannel_2eproto__INCLUDED
#define PROTOBUF_C_ibc_2fcore_2fchannel_2fv1_2fchannel_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protobuf-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1005002 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protobuf-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protobuf-c.
#endif

#include "gogoproto/gogo.pb-c.h"
#include "ibc/core/client/v1/client.pb-c.h"

typedef struct Ibc__Core__Channel__V1__Channel Ibc__Core__Channel__V1__Channel;
typedef struct Ibc__Core__Channel__V1__IdentifiedChannel Ibc__Core__Channel__V1__IdentifiedChannel;
typedef struct Ibc__Core__Channel__V1__Counterparty Ibc__Core__Channel__V1__Counterparty;
typedef struct Ibc__Core__Channel__V1__Packet Ibc__Core__Channel__V1__Packet;
typedef struct Ibc__Core__Channel__V1__PacketState Ibc__Core__Channel__V1__PacketState;
typedef struct Ibc__Core__Channel__V1__PacketId Ibc__Core__Channel__V1__PacketId;
typedef struct Ibc__Core__Channel__V1__Acknowledgement Ibc__Core__Channel__V1__Acknowledgement;
typedef struct Ibc__Core__Channel__V1__Timeout Ibc__Core__Channel__V1__Timeout;


/* --- enums --- */

/*
 * State defines if a channel is in one of the following states:
 * CLOSED, INIT, TRYOPEN, OPEN, or UNINITIALIZED.
 */
typedef enum _Ibc__Core__Channel__V1__State {
  /*
   * Default State
   */
  IBC__CORE__CHANNEL__V1__STATE__STATE_UNINITIALIZED_UNSPECIFIED = 0,
  /*
   * A channel has just started the opening handshake.
   */
  IBC__CORE__CHANNEL__V1__STATE__STATE_INIT = 1,
  /*
   * A channel has acknowledged the handshake step on the counterparty chain.
   */
  IBC__CORE__CHANNEL__V1__STATE__STATE_TRYOPEN = 2,
  /*
   * A channel has completed the handshake. Open channels are
   * ready to send and receive packets.
   */
  IBC__CORE__CHANNEL__V1__STATE__STATE_OPEN = 3,
  /*
   * A channel has been closed and can no longer be used to send or receive
   * packets.
   */
  IBC__CORE__CHANNEL__V1__STATE__STATE_CLOSED = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(IBC__CORE__CHANNEL__V1__STATE)
} Ibc__Core__Channel__V1__State;
/*
 * Order defines if a channel is ORDERED or UNORDERED
 */
typedef enum _Ibc__Core__Channel__V1__Order {
  /*
   * zero-value for channel ordering
   */
  IBC__CORE__CHANNEL__V1__ORDER__ORDER_NONE_UNSPECIFIED = 0,
  /*
   * packets can be delivered in any order, which may differ from the order in
   * which they were sent.
   */
  IBC__CORE__CHANNEL__V1__ORDER__ORDER_UNORDERED = 1,
  /*
   * packets are delivered exactly in the order which they were sent
   */
  IBC__CORE__CHANNEL__V1__ORDER__ORDER_ORDERED = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(IBC__CORE__CHANNEL__V1__ORDER)
} Ibc__Core__Channel__V1__Order;

/* --- messages --- */

/*
 * Channel defines pipeline for exactly-once packet delivery between specific
 * modules on separate blockchains, which has at least one end capable of
 * sending packets and one end capable of receiving packets.
 */
struct  Ibc__Core__Channel__V1__Channel
{
  ProtobufCMessage base;
  /*
   * current state of the channel end
   */
  Ibc__Core__Channel__V1__State state;
  /*
   * whether the channel is ordered or unordered
   */
  Ibc__Core__Channel__V1__Order ordering;
  /*
   * counterparty channel end
   */
  Ibc__Core__Channel__V1__Counterparty *counterparty;
  /*
   * list of connection identifiers, in order, along which packets sent on
   * this channel will travel
   */
  size_t n_connection_hops;
  char **connection_hops;
  /*
   * opaque channel version, which is agreed upon during the handshake
   */
  char *version;
};
#define IBC__CORE__CHANNEL__V1__CHANNEL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ibc__core__channel__v1__channel__descriptor) \
, IBC__CORE__CHANNEL__V1__STATE__STATE_UNINITIALIZED_UNSPECIFIED, IBC__CORE__CHANNEL__V1__ORDER__ORDER_NONE_UNSPECIFIED, NULL, 0,NULL, (char *)protobuf_c_empty_string }


/*
 * IdentifiedChannel defines a channel with additional port and channel
 * identifier fields.
 */
struct  Ibc__Core__Channel__V1__IdentifiedChannel
{
  ProtobufCMessage base;
  /*
   * current state of the channel end
   */
  Ibc__Core__Channel__V1__State state;
  /*
   * whether the channel is ordered or unordered
   */
  Ibc__Core__Channel__V1__Order ordering;
  /*
   * counterparty channel end
   */
  Ibc__Core__Channel__V1__Counterparty *counterparty;
  /*
   * list of connection identifiers, in order, along which packets sent on
   * this channel will travel
   */
  size_t n_connection_hops;
  char **connection_hops;
  /*
   * opaque channel version, which is agreed upon during the handshake
   */
  char *version;
  /*
   * port identifier
   */
  char *port_id;
  /*
   * channel identifier
   */
  char *channel_id;
};
#define IBC__CORE__CHANNEL__V1__IDENTIFIED_CHANNEL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ibc__core__channel__v1__identified_channel__descriptor) \
, IBC__CORE__CHANNEL__V1__STATE__STATE_UNINITIALIZED_UNSPECIFIED, IBC__CORE__CHANNEL__V1__ORDER__ORDER_NONE_UNSPECIFIED, NULL, 0,NULL, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


/*
 * Counterparty defines a channel end counterparty
 */
struct  Ibc__Core__Channel__V1__Counterparty
{
  ProtobufCMessage base;
  /*
   * port on the counterparty chain which owns the other end of the channel.
   */
  char *port_id;
  /*
   * channel end on the counterparty chain
   */
  char *channel_id;
};
#define IBC__CORE__CHANNEL__V1__COUNTERPARTY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ibc__core__channel__v1__counterparty__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


/*
 * Packet defines a type that carries data across different chains through IBC
 */
struct  Ibc__Core__Channel__V1__Packet
{
  ProtobufCMessage base;
  /*
   * number corresponds to the order of sends and receives, where a Packet
   * with an earlier sequence number must be sent and received before a Packet
   * with a later sequence number.
   */
  uint64_t sequence;
  /*
   * identifies the port on the sending chain.
   */
  char *source_port;
  /*
   * identifies the channel end on the sending chain.
   */
  char *source_channel;
  /*
   * identifies the port on the receiving chain.
   */
  char *destination_port;
  /*
   * identifies the channel end on the receiving chain.
   */
  char *destination_channel;
  /*
   * actual opaque bytes transferred directly to the application module
   */
  ProtobufCBinaryData data;
  /*
   * block height after which the packet times out
   */
  Ibc__Core__Client__V1__Height *timeout_height;
  /*
   * block timestamp (in nanoseconds) after which the packet times out
   */
  uint64_t timeout_timestamp;
};
#define IBC__CORE__CHANNEL__V1__PACKET__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ibc__core__channel__v1__packet__descriptor) \
, 0, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, {0,NULL}, NULL, 0 }


/*
 * PacketState defines the generic type necessary to retrieve and store
 * packet commitments, acknowledgements, and receipts.
 * Caller is responsible for knowing the context necessary to interpret this
 * state as a commitment, acknowledgement, or a receipt.
 */
struct  Ibc__Core__Channel__V1__PacketState
{
  ProtobufCMessage base;
  /*
   * channel port identifier.
   */
  char *port_id;
  /*
   * channel unique identifier.
   */
  char *channel_id;
  /*
   * packet sequence.
   */
  uint64_t sequence;
  /*
   * embedded data that represents packet state.
   */
  ProtobufCBinaryData data;
};
#define IBC__CORE__CHANNEL__V1__PACKET_STATE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ibc__core__channel__v1__packet_state__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0, {0,NULL} }


/*
 * PacketId is an identifier for a unique Packet
 * Source chains refer to packets by source port/channel
 * Destination chains refer to packets by destination port/channel
 */
struct  Ibc__Core__Channel__V1__PacketId
{
  ProtobufCMessage base;
  /*
   * channel port identifier
   */
  char *port_id;
  /*
   * channel unique identifier
   */
  char *channel_id;
  /*
   * packet sequence
   */
  uint64_t sequence;
};
#define IBC__CORE__CHANNEL__V1__PACKET_ID__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ibc__core__channel__v1__packet_id__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0 }


typedef enum {
  IBC__CORE__CHANNEL__V1__ACKNOWLEDGEMENT__RESPONSE__NOT_SET = 0,
  IBC__CORE__CHANNEL__V1__ACKNOWLEDGEMENT__RESPONSE_RESULT = 21,
  IBC__CORE__CHANNEL__V1__ACKNOWLEDGEMENT__RESPONSE_ERROR = 22
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(IBC__CORE__CHANNEL__V1__ACKNOWLEDGEMENT__RESPONSE__CASE)
} Ibc__Core__Channel__V1__Acknowledgement__ResponseCase;

/*
 * Acknowledgement is the recommended acknowledgement format to be used by
 * app-specific protocols.
 * NOTE: The field numbers 21 and 22 were explicitly chosen to avoid accidental
 * conflicts with other protobuf message formats used for acknowledgements.
 * The first byte of any message with this format will be the non-ASCII values
 * `0xaa` (result) or `0xb2` (error). Implemented as defined by ICS:
 * https://github.com/cosmos/ibc/tree/master/spec/core/ics-004-channel-and-packet-semantics#acknowledgement-envelope
 */
struct  Ibc__Core__Channel__V1__Acknowledgement
{
  ProtobufCMessage base;
  Ibc__Core__Channel__V1__Acknowledgement__ResponseCase response_case;
  union {
    ProtobufCBinaryData result;
    char *error;
  };
};
#define IBC__CORE__CHANNEL__V1__ACKNOWLEDGEMENT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ibc__core__channel__v1__acknowledgement__descriptor) \
, IBC__CORE__CHANNEL__V1__ACKNOWLEDGEMENT__RESPONSE__NOT_SET, { {0} } }


/*
 * Timeout defines an execution deadline structure for 04-channel handlers.
 * This includes packet lifecycle handlers.
 * A valid Timeout contains either one or both of a timestamp and block height (sequence).
 */
struct  Ibc__Core__Channel__V1__Timeout
{
  ProtobufCMessage base;
  /*
   * block height after which the packet times out
   */
  Ibc__Core__Client__V1__Height *height;
  /*
   * block timestamp (in nanoseconds) after which the packet times out
   */
  uint64_t timestamp;
};
#define IBC__CORE__CHANNEL__V1__TIMEOUT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ibc__core__channel__v1__timeout__descriptor) \
, NULL, 0 }


/* Ibc__Core__Channel__V1__Channel methods */
void   ibc__core__channel__v1__channel__init
                     (Ibc__Core__Channel__V1__Channel         *message);
size_t ibc__core__channel__v1__channel__get_packed_size
                     (const Ibc__Core__Channel__V1__Channel   *message);
size_t ibc__core__channel__v1__channel__pack
                     (const Ibc__Core__Channel__V1__Channel   *message,
                      uint8_t             *out);
size_t ibc__core__channel__v1__channel__pack_to_buffer
                     (const Ibc__Core__Channel__V1__Channel   *message,
                      ProtobufCBuffer     *buffer);
Ibc__Core__Channel__V1__Channel *
       ibc__core__channel__v1__channel__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ibc__core__channel__v1__channel__free_unpacked
                     (Ibc__Core__Channel__V1__Channel *message,
                      ProtobufCAllocator *allocator);
/* Ibc__Core__Channel__V1__IdentifiedChannel methods */
void   ibc__core__channel__v1__identified_channel__init
                     (Ibc__Core__Channel__V1__IdentifiedChannel         *message);
size_t ibc__core__channel__v1__identified_channel__get_packed_size
                     (const Ibc__Core__Channel__V1__IdentifiedChannel   *message);
size_t ibc__core__channel__v1__identified_channel__pack
                     (const Ibc__Core__Channel__V1__IdentifiedChannel   *message,
                      uint8_t             *out);
size_t ibc__core__channel__v1__identified_channel__pack_to_buffer
                     (const Ibc__Core__Channel__V1__IdentifiedChannel   *message,
                      ProtobufCBuffer     *buffer);
Ibc__Core__Channel__V1__IdentifiedChannel *
       ibc__core__channel__v1__identified_channel__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ibc__core__channel__v1__identified_channel__free_unpacked
                     (Ibc__Core__Channel__V1__IdentifiedChannel *message,
                      ProtobufCAllocator *allocator);
/* Ibc__Core__Channel__V1__Counterparty methods */
void   ibc__core__channel__v1__counterparty__init
                     (Ibc__Core__Channel__V1__Counterparty         *message);
size_t ibc__core__channel__v1__counterparty__get_packed_size
                     (const Ibc__Core__Channel__V1__Counterparty   *message);
size_t ibc__core__channel__v1__counterparty__pack
                     (const Ibc__Core__Channel__V1__Counterparty   *message,
                      uint8_t             *out);
size_t ibc__core__channel__v1__counterparty__pack_to_buffer
                     (const Ibc__Core__Channel__V1__Counterparty   *message,
                      ProtobufCBuffer     *buffer);
Ibc__Core__Channel__V1__Counterparty *
       ibc__core__channel__v1__counterparty__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ibc__core__channel__v1__counterparty__free_unpacked
                     (Ibc__Core__Channel__V1__Counterparty *message,
                      ProtobufCAllocator *allocator);
/* Ibc__Core__Channel__V1__Packet methods */
void   ibc__core__channel__v1__packet__init
                     (Ibc__Core__Channel__V1__Packet         *message);
size_t ibc__core__channel__v1__packet__get_packed_size
                     (const Ibc__Core__Channel__V1__Packet   *message);
size_t ibc__core__channel__v1__packet__pack
                     (const Ibc__Core__Channel__V1__Packet   *message,
                      uint8_t             *out);
size_t ibc__core__channel__v1__packet__pack_to_buffer
                     (const Ibc__Core__Channel__V1__Packet   *message,
                      ProtobufCBuffer     *buffer);
Ibc__Core__Channel__V1__Packet *
       ibc__core__channel__v1__packet__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ibc__core__channel__v1__packet__free_unpacked
                     (Ibc__Core__Channel__V1__Packet *message,
                      ProtobufCAllocator *allocator);
/* Ibc__Core__Channel__V1__PacketState methods */
void   ibc__core__channel__v1__packet_state__init
                     (Ibc__Core__Channel__V1__PacketState         *message);
size_t ibc__core__channel__v1__packet_state__get_packed_size
                     (const Ibc__Core__Channel__V1__PacketState   *message);
size_t ibc__core__channel__v1__packet_state__pack
                     (const Ibc__Core__Channel__V1__PacketState   *message,
                      uint8_t             *out);
size_t ibc__core__channel__v1__packet_state__pack_to_buffer
                     (const Ibc__Core__Channel__V1__PacketState   *message,
                      ProtobufCBuffer     *buffer);
Ibc__Core__Channel__V1__PacketState *
       ibc__core__channel__v1__packet_state__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ibc__core__channel__v1__packet_state__free_unpacked
                     (Ibc__Core__Channel__V1__PacketState *message,
                      ProtobufCAllocator *allocator);
/* Ibc__Core__Channel__V1__PacketId methods */
void   ibc__core__channel__v1__packet_id__init
                     (Ibc__Core__Channel__V1__PacketId         *message);
size_t ibc__core__channel__v1__packet_id__get_packed_size
                     (const Ibc__Core__Channel__V1__PacketId   *message);
size_t ibc__core__channel__v1__packet_id__pack
                     (const Ibc__Core__Channel__V1__PacketId   *message,
                      uint8_t             *out);
size_t ibc__core__channel__v1__packet_id__pack_to_buffer
                     (const Ibc__Core__Channel__V1__PacketId   *message,
                      ProtobufCBuffer     *buffer);
Ibc__Core__Channel__V1__PacketId *
       ibc__core__channel__v1__packet_id__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ibc__core__channel__v1__packet_id__free_unpacked
                     (Ibc__Core__Channel__V1__PacketId *message,
                      ProtobufCAllocator *allocator);
/* Ibc__Core__Channel__V1__Acknowledgement methods */
void   ibc__core__channel__v1__acknowledgement__init
                     (Ibc__Core__Channel__V1__Acknowledgement         *message);
size_t ibc__core__channel__v1__acknowledgement__get_packed_size
                     (const Ibc__Core__Channel__V1__Acknowledgement   *message);
size_t ibc__core__channel__v1__acknowledgement__pack
                     (const Ibc__Core__Channel__V1__Acknowledgement   *message,
                      uint8_t             *out);
size_t ibc__core__channel__v1__acknowledgement__pack_to_buffer
                     (const Ibc__Core__Channel__V1__Acknowledgement   *message,
                      ProtobufCBuffer     *buffer);
Ibc__Core__Channel__V1__Acknowledgement *
       ibc__core__channel__v1__acknowledgement__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ibc__core__channel__v1__acknowledgement__free_unpacked
                     (Ibc__Core__Channel__V1__Acknowledgement *message,
                      ProtobufCAllocator *allocator);
/* Ibc__Core__Channel__V1__Timeout methods */
void   ibc__core__channel__v1__timeout__init
                     (Ibc__Core__Channel__V1__Timeout         *message);
size_t ibc__core__channel__v1__timeout__get_packed_size
                     (const Ibc__Core__Channel__V1__Timeout   *message);
size_t ibc__core__channel__v1__timeout__pack
                     (const Ibc__Core__Channel__V1__Timeout   *message,
                      uint8_t             *out);
size_t ibc__core__channel__v1__timeout__pack_to_buffer
                     (const Ibc__Core__Channel__V1__Timeout   *message,
                      ProtobufCBuffer     *buffer);
Ibc__Core__Channel__V1__Timeout *
       ibc__core__channel__v1__timeout__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ibc__core__channel__v1__timeout__free_unpacked
                     (Ibc__Core__Channel__V1__Timeout *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Ibc__Core__Channel__V1__Channel_Closure)
                 (const Ibc__Core__Channel__V1__Channel *message,
                  void *closure_data);
typedef void (*Ibc__Core__Channel__V1__IdentifiedChannel_Closure)
                 (const Ibc__Core__Channel__V1__IdentifiedChannel *message,
                  void *closure_data);
typedef void (*Ibc__Core__Channel__V1__Counterparty_Closure)
                 (const Ibc__Core__Channel__V1__Counterparty *message,
                  void *closure_data);
typedef void (*Ibc__Core__Channel__V1__Packet_Closure)
                 (const Ibc__Core__Channel__V1__Packet *message,
                  void *closure_data);
typedef void (*Ibc__Core__Channel__V1__PacketState_Closure)
                 (const Ibc__Core__Channel__V1__PacketState *message,
                  void *closure_data);
typedef void (*Ibc__Core__Channel__V1__PacketId_Closure)
                 (const Ibc__Core__Channel__V1__PacketId *message,
                  void *closure_data);
typedef void (*Ibc__Core__Channel__V1__Acknowledgement_Closure)
                 (const Ibc__Core__Channel__V1__Acknowledgement *message,
                  void *closure_data);
typedef void (*Ibc__Core__Channel__V1__Timeout_Closure)
                 (const Ibc__Core__Channel__V1__Timeout *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    ibc__core__channel__v1__state__descriptor;
extern const ProtobufCEnumDescriptor    ibc__core__channel__v1__order__descriptor;
extern const ProtobufCMessageDescriptor ibc__core__channel__v1__channel__descriptor;
extern const ProtobufCMessageDescriptor ibc__core__channel__v1__identified_channel__descriptor;
extern const ProtobufCMessageDescriptor ibc__core__channel__v1__counterparty__descriptor;
extern const ProtobufCMessageDescriptor ibc__core__channel__v1__packet__descriptor;
extern const ProtobufCMessageDescriptor ibc__core__channel__v1__packet_state__descriptor;
extern const ProtobufCMessageDescriptor ibc__core__channel__v1__packet_id__descriptor;
extern const ProtobufCMessageDescriptor ibc__core__channel__v1__acknowledgement__descriptor;
extern const ProtobufCMessageDescriptor ibc__core__channel__v1__timeout__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_ibc_2fcore_2fchannel_2fv1_2fchannel_2eproto__INCLUDED */
