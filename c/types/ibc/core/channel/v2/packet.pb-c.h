/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: ibc/core/channel/v2/packet.proto */

#ifndef PROTOBUF_C_ibc_2fcore_2fchannel_2fv2_2fpacket_2eproto__INCLUDED
#define PROTOBUF_C_ibc_2fcore_2fchannel_2fv2_2fpacket_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protobuf-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1005002 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protobuf-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protobuf-c.
#endif

#include "gogoproto/gogo.pb-c.h"

typedef struct Ibc__Core__Channel__V2__Packet Ibc__Core__Channel__V2__Packet;
typedef struct Ibc__Core__Channel__V2__Payload Ibc__Core__Channel__V2__Payload;
typedef struct Ibc__Core__Channel__V2__Acknowledgement Ibc__Core__Channel__V2__Acknowledgement;
typedef struct Ibc__Core__Channel__V2__RecvPacketResult Ibc__Core__Channel__V2__RecvPacketResult;


/* --- enums --- */

/*
 * PacketStatus specifies the status of a RecvPacketResult.
 */
typedef enum _Ibc__Core__Channel__V2__PacketStatus {
  /*
   * PACKET_STATUS_UNSPECIFIED indicates an unknown packet status.
   */
  IBC__CORE__CHANNEL__V2__PACKET_STATUS__PACKET_STATUS_UNSPECIFIED = 0,
  /*
   * PACKET_STATUS_SUCCESS indicates a successful packet receipt.
   */
  IBC__CORE__CHANNEL__V2__PACKET_STATUS__PACKET_STATUS_SUCCESS = 1,
  /*
   * PACKET_STATUS_FAILURE indicates a failed packet receipt.
   */
  IBC__CORE__CHANNEL__V2__PACKET_STATUS__PACKET_STATUS_FAILURE = 2,
  /*
   * PACKET_STATUS_ASYNC indicates an async packet receipt.
   */
  IBC__CORE__CHANNEL__V2__PACKET_STATUS__PACKET_STATUS_ASYNC = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(IBC__CORE__CHANNEL__V2__PACKET_STATUS)
} Ibc__Core__Channel__V2__PacketStatus;

/* --- messages --- */

/*
 * Packet defines a type that carries data across different chains through IBC
 */
struct  Ibc__Core__Channel__V2__Packet
{
  ProtobufCMessage base;
  /*
   * number corresponds to the order of sends and receives, where a Packet
   * with an earlier sequence number must be sent and received before a Packet
   * with a later sequence number.
   */
  uint64_t sequence;
  /*
   * identifies the sending client on the sending chain.
   */
  char *source_client;
  /*
   * identifies the receiving client on the receiving chain.
   */
  char *destination_client;
  /*
   * timeout timestamp in seconds after which the packet times out.
   */
  uint64_t timeout_timestamp;
  /*
   * a list of payloads, each one for a specific application.
   */
  size_t n_payloads;
  Ibc__Core__Channel__V2__Payload **payloads;
};
#define IBC__CORE__CHANNEL__V2__PACKET__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ibc__core__channel__v2__packet__descriptor) \
, 0, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0, 0,NULL }


/*
 * Payload contains the source and destination ports and payload for the application (version, encoding, raw bytes)
 */
struct  Ibc__Core__Channel__V2__Payload
{
  ProtobufCMessage base;
  /*
   * specifies the source port of the packet.
   */
  char *source_port;
  /*
   * specifies the destination port of the packet.
   */
  char *destination_port;
  /*
   * version of the specified application.
   */
  char *version;
  /*
   * the encoding used for the provided value.
   */
  char *encoding;
  /*
   * the raw bytes for the payload.
   */
  ProtobufCBinaryData value;
};
#define IBC__CORE__CHANNEL__V2__PAYLOAD__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ibc__core__channel__v2__payload__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, {0,NULL} }


/*
 * Acknowledgement contains a list of all ack results associated with a single packet.
 * In the case of a successful receive, the acknowledgement will contain an app acknowledgement
 * for each application that received a payload in the same order that the payloads were sent
 * in the packet.
 * If the receive is not successful, the acknowledgement will contain a single app acknowledgment
 * which will be a constant error acknowledgment as defined by the IBC v2 protocol.
 */
struct  Ibc__Core__Channel__V2__Acknowledgement
{
  ProtobufCMessage base;
  size_t n_app_acknowledgements;
  ProtobufCBinaryData *app_acknowledgements;
};
#define IBC__CORE__CHANNEL__V2__ACKNOWLEDGEMENT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ibc__core__channel__v2__acknowledgement__descriptor) \
, 0,NULL }


/*
 * RecvPacketResult speecifies the status of a packet as well as the acknowledgement bytes.
 */
struct  Ibc__Core__Channel__V2__RecvPacketResult
{
  ProtobufCMessage base;
  /*
   * status of the packet
   */
  Ibc__Core__Channel__V2__PacketStatus status;
  /*
   * acknowledgement of the packet
   */
  ProtobufCBinaryData acknowledgement;
};
#define IBC__CORE__CHANNEL__V2__RECV_PACKET_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ibc__core__channel__v2__recv_packet_result__descriptor) \
, IBC__CORE__CHANNEL__V2__PACKET_STATUS__PACKET_STATUS_UNSPECIFIED, {0,NULL} }


/* Ibc__Core__Channel__V2__Packet methods */
void   ibc__core__channel__v2__packet__init
                     (Ibc__Core__Channel__V2__Packet         *message);
size_t ibc__core__channel__v2__packet__get_packed_size
                     (const Ibc__Core__Channel__V2__Packet   *message);
size_t ibc__core__channel__v2__packet__pack
                     (const Ibc__Core__Channel__V2__Packet   *message,
                      uint8_t             *out);
size_t ibc__core__channel__v2__packet__pack_to_buffer
                     (const Ibc__Core__Channel__V2__Packet   *message,
                      ProtobufCBuffer     *buffer);
Ibc__Core__Channel__V2__Packet *
       ibc__core__channel__v2__packet__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ibc__core__channel__v2__packet__free_unpacked
                     (Ibc__Core__Channel__V2__Packet *message,
                      ProtobufCAllocator *allocator);
/* Ibc__Core__Channel__V2__Payload methods */
void   ibc__core__channel__v2__payload__init
                     (Ibc__Core__Channel__V2__Payload         *message);
size_t ibc__core__channel__v2__payload__get_packed_size
                     (const Ibc__Core__Channel__V2__Payload   *message);
size_t ibc__core__channel__v2__payload__pack
                     (const Ibc__Core__Channel__V2__Payload   *message,
                      uint8_t             *out);
size_t ibc__core__channel__v2__payload__pack_to_buffer
                     (const Ibc__Core__Channel__V2__Payload   *message,
                      ProtobufCBuffer     *buffer);
Ibc__Core__Channel__V2__Payload *
       ibc__core__channel__v2__payload__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ibc__core__channel__v2__payload__free_unpacked
                     (Ibc__Core__Channel__V2__Payload *message,
                      ProtobufCAllocator *allocator);
/* Ibc__Core__Channel__V2__Acknowledgement methods */
void   ibc__core__channel__v2__acknowledgement__init
                     (Ibc__Core__Channel__V2__Acknowledgement         *message);
size_t ibc__core__channel__v2__acknowledgement__get_packed_size
                     (const Ibc__Core__Channel__V2__Acknowledgement   *message);
size_t ibc__core__channel__v2__acknowledgement__pack
                     (const Ibc__Core__Channel__V2__Acknowledgement   *message,
                      uint8_t             *out);
size_t ibc__core__channel__v2__acknowledgement__pack_to_buffer
                     (const Ibc__Core__Channel__V2__Acknowledgement   *message,
                      ProtobufCBuffer     *buffer);
Ibc__Core__Channel__V2__Acknowledgement *
       ibc__core__channel__v2__acknowledgement__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ibc__core__channel__v2__acknowledgement__free_unpacked
                     (Ibc__Core__Channel__V2__Acknowledgement *message,
                      ProtobufCAllocator *allocator);
/* Ibc__Core__Channel__V2__RecvPacketResult methods */
void   ibc__core__channel__v2__recv_packet_result__init
                     (Ibc__Core__Channel__V2__RecvPacketResult         *message);
size_t ibc__core__channel__v2__recv_packet_result__get_packed_size
                     (const Ibc__Core__Channel__V2__RecvPacketResult   *message);
size_t ibc__core__channel__v2__recv_packet_result__pack
                     (const Ibc__Core__Channel__V2__RecvPacketResult   *message,
                      uint8_t             *out);
size_t ibc__core__channel__v2__recv_packet_result__pack_to_buffer
                     (const Ibc__Core__Channel__V2__RecvPacketResult   *message,
                      ProtobufCBuffer     *buffer);
Ibc__Core__Channel__V2__RecvPacketResult *
       ibc__core__channel__v2__recv_packet_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ibc__core__channel__v2__recv_packet_result__free_unpacked
                     (Ibc__Core__Channel__V2__RecvPacketResult *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Ibc__Core__Channel__V2__Packet_Closure)
                 (const Ibc__Core__Channel__V2__Packet *message,
                  void *closure_data);
typedef void (*Ibc__Core__Channel__V2__Payload_Closure)
                 (const Ibc__Core__Channel__V2__Payload *message,
                  void *closure_data);
typedef void (*Ibc__Core__Channel__V2__Acknowledgement_Closure)
                 (const Ibc__Core__Channel__V2__Acknowledgement *message,
                  void *closure_data);
typedef void (*Ibc__Core__Channel__V2__RecvPacketResult_Closure)
                 (const Ibc__Core__Channel__V2__RecvPacketResult *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    ibc__core__channel__v2__packet_status__descriptor;
extern const ProtobufCMessageDescriptor ibc__core__channel__v2__packet__descriptor;
extern const ProtobufCMessageDescriptor ibc__core__channel__v2__payload__descriptor;
extern const ProtobufCMessageDescriptor ibc__core__channel__v2__acknowledgement__descriptor;
extern const ProtobufCMessageDescriptor ibc__core__channel__v2__recv_packet_result__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_ibc_2fcore_2fchannel_2fv2_2fpacket_2eproto__INCLUDED */
