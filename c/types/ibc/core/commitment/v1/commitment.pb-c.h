/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: ibc/core/commitment/v1/commitment.proto */

#ifndef PROTOBUF_C_ibc_2fcore_2fcommitment_2fv1_2fcommitment_2eproto__INCLUDED
#define PROTOBUF_C_ibc_2fcore_2fcommitment_2fv1_2fcommitment_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protobuf-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1005002 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protobuf-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protobuf-c.
#endif

#include "gogoproto/gogo.pb-c.h"
#include "cosmos/ics23/v1/proofs.pb-c.h"

typedef struct Ibc__Core__Commitment__V1__MerkleRoot Ibc__Core__Commitment__V1__MerkleRoot;
typedef struct Ibc__Core__Commitment__V1__MerklePrefix Ibc__Core__Commitment__V1__MerklePrefix;
typedef struct Ibc__Core__Commitment__V1__MerkleProof Ibc__Core__Commitment__V1__MerkleProof;


/* --- enums --- */


/* --- messages --- */

/*
 * MerkleRoot defines a merkle root hash.
 * In the Cosmos SDK, the AppHash of a block header becomes the root.
 */
struct  Ibc__Core__Commitment__V1__MerkleRoot
{
  ProtobufCMessage base;
  ProtobufCBinaryData hash;
};
#define IBC__CORE__COMMITMENT__V1__MERKLE_ROOT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ibc__core__commitment__v1__merkle_root__descriptor) \
, {0,NULL} }


/*
 * MerklePrefix is merkle path prefixed to the key.
 * The constructed key from the Path and the key will be append(Path.KeyPath,
 * append(Path.KeyPrefix, key...))
 */
struct  Ibc__Core__Commitment__V1__MerklePrefix
{
  ProtobufCMessage base;
  ProtobufCBinaryData key_prefix;
};
#define IBC__CORE__COMMITMENT__V1__MERKLE_PREFIX__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ibc__core__commitment__v1__merkle_prefix__descriptor) \
, {0,NULL} }


/*
 * MerkleProof is a wrapper type over a chain of CommitmentProofs.
 * It demonstrates membership or non-membership for an element or set of
 * elements, verifiable in conjunction with a known commitment root. Proofs
 * should be succinct.
 * MerkleProofs are ordered from leaf-to-root
 */
struct  Ibc__Core__Commitment__V1__MerkleProof
{
  ProtobufCMessage base;
  size_t n_proofs;
  Cosmos__Ics23__V1__CommitmentProof **proofs;
};
#define IBC__CORE__COMMITMENT__V1__MERKLE_PROOF__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ibc__core__commitment__v1__merkle_proof__descriptor) \
, 0,NULL }


/* Ibc__Core__Commitment__V1__MerkleRoot methods */
void   ibc__core__commitment__v1__merkle_root__init
                     (Ibc__Core__Commitment__V1__MerkleRoot         *message);
size_t ibc__core__commitment__v1__merkle_root__get_packed_size
                     (const Ibc__Core__Commitment__V1__MerkleRoot   *message);
size_t ibc__core__commitment__v1__merkle_root__pack
                     (const Ibc__Core__Commitment__V1__MerkleRoot   *message,
                      uint8_t             *out);
size_t ibc__core__commitment__v1__merkle_root__pack_to_buffer
                     (const Ibc__Core__Commitment__V1__MerkleRoot   *message,
                      ProtobufCBuffer     *buffer);
Ibc__Core__Commitment__V1__MerkleRoot *
       ibc__core__commitment__v1__merkle_root__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ibc__core__commitment__v1__merkle_root__free_unpacked
                     (Ibc__Core__Commitment__V1__MerkleRoot *message,
                      ProtobufCAllocator *allocator);
/* Ibc__Core__Commitment__V1__MerklePrefix methods */
void   ibc__core__commitment__v1__merkle_prefix__init
                     (Ibc__Core__Commitment__V1__MerklePrefix         *message);
size_t ibc__core__commitment__v1__merkle_prefix__get_packed_size
                     (const Ibc__Core__Commitment__V1__MerklePrefix   *message);
size_t ibc__core__commitment__v1__merkle_prefix__pack
                     (const Ibc__Core__Commitment__V1__MerklePrefix   *message,
                      uint8_t             *out);
size_t ibc__core__commitment__v1__merkle_prefix__pack_to_buffer
                     (const Ibc__Core__Commitment__V1__MerklePrefix   *message,
                      ProtobufCBuffer     *buffer);
Ibc__Core__Commitment__V1__MerklePrefix *
       ibc__core__commitment__v1__merkle_prefix__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ibc__core__commitment__v1__merkle_prefix__free_unpacked
                     (Ibc__Core__Commitment__V1__MerklePrefix *message,
                      ProtobufCAllocator *allocator);
/* Ibc__Core__Commitment__V1__MerkleProof methods */
void   ibc__core__commitment__v1__merkle_proof__init
                     (Ibc__Core__Commitment__V1__MerkleProof         *message);
size_t ibc__core__commitment__v1__merkle_proof__get_packed_size
                     (const Ibc__Core__Commitment__V1__MerkleProof   *message);
size_t ibc__core__commitment__v1__merkle_proof__pack
                     (const Ibc__Core__Commitment__V1__MerkleProof   *message,
                      uint8_t             *out);
size_t ibc__core__commitment__v1__merkle_proof__pack_to_buffer
                     (const Ibc__Core__Commitment__V1__MerkleProof   *message,
                      ProtobufCBuffer     *buffer);
Ibc__Core__Commitment__V1__MerkleProof *
       ibc__core__commitment__v1__merkle_proof__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ibc__core__commitment__v1__merkle_proof__free_unpacked
                     (Ibc__Core__Commitment__V1__MerkleProof *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Ibc__Core__Commitment__V1__MerkleRoot_Closure)
                 (const Ibc__Core__Commitment__V1__MerkleRoot *message,
                  void *closure_data);
typedef void (*Ibc__Core__Commitment__V1__MerklePrefix_Closure)
                 (const Ibc__Core__Commitment__V1__MerklePrefix *message,
                  void *closure_data);
typedef void (*Ibc__Core__Commitment__V1__MerkleProof_Closure)
                 (const Ibc__Core__Commitment__V1__MerkleProof *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor ibc__core__commitment__v1__merkle_root__descriptor;
extern const ProtobufCMessageDescriptor ibc__core__commitment__v1__merkle_prefix__descriptor;
extern const ProtobufCMessageDescriptor ibc__core__commitment__v1__merkle_proof__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_ibc_2fcore_2fcommitment_2fv1_2fcommitment_2eproto__INCLUDED */
