/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: ibc/core/commitment/v2/commitment.proto */

#ifndef PROTOBUF_C_ibc_2fcore_2fcommitment_2fv2_2fcommitment_2eproto__INCLUDED
#define PROTOBUF_C_ibc_2fcore_2fcommitment_2fv2_2fcommitment_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protobuf-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1005002 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protobuf-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protobuf-c.
#endif


typedef struct Ibc__Core__Commitment__V2__MerklePath Ibc__Core__Commitment__V2__MerklePath;


/* --- enums --- */


/* --- messages --- */

/*
 * MerklePath is the path used to verify commitment proofs, which can be an
 * arbitrary structured object (defined by a commitment type).
 * ICS-23 verification supports membership proofs for nested merkle trees.
 * The ICS-24 standard provable keys MUST be stored in the lowest level tree with an optional prefix.
 * The IC24 provable tree may then be stored in a higher level tree(s) that hash up to the root hash
 * stored in the consensus state of the client.
 * Each element of the path represents the key of a merkle tree from the root to the leaf.
 * The elements of the path before the final element must be the path to the tree that contains
 * the ICS24 provable store. Thus, it should remain constant for all ICS24 proofs.
 * The final element of the path is the key of the leaf in the ICS24 provable store,
 * Thus IBC core will append the ICS24 path to the final element of the MerklePath
 * stored in the counterparty to create the full path to the leaf for proof verification.
 * Examples:
 * Cosmos SDK:
 * The Cosmos SDK commits to a multi-tree where each store is an IAVL tree and all store hashes
 * are hashed in a simple merkle tree to get the final root hash. Thus, the MerklePath in the counterparty
 * MerklePrefix has the following structure: ["ibc", ""]
 * The core IBC handler will append the ICS24 path to the final element of the MerklePath
 * like so: ["ibc", "{packetCommitmentPath}"] which will then be used for final verification.
 * Ethereum:
 * The Ethereum client commits to a single Patricia merkle trie. The ICS24 provable store is managed
 * by the smart contract state. Each smart contract has a specific prefix reserved within the global trie.
 * Thus the MerklePath in the counterparty is the prefix to the smart contract state in the global trie.
 * Since there is only one tree in the commitment structure of ethereum the MerklePath in the counterparty
 * MerklePrefix has the following structure: ["IBCCoreContractAddressStoragePrefix"]
 * The core IBC handler will append the ICS24 path to the final element of the MerklePath
 * like so: ["IBCCoreContractAddressStoragePrefix{packetCommitmentPath}"] which will then be used for final
 * verification. Thus the MerklePath in the counterparty MerklePrefix is the nested key path from the root hash of the
 * consensus state down to the ICS24 provable store. The IBC handler retrieves the counterparty key path to the ICS24
 * provable store from the MerklePath and appends the ICS24 path to get the final key path to the value being verified
 * by the client against the root hash in the client's consensus state.
 */
struct  Ibc__Core__Commitment__V2__MerklePath
{
  ProtobufCMessage base;
  size_t n_key_path;
  ProtobufCBinaryData *key_path;
};
#define IBC__CORE__COMMITMENT__V2__MERKLE_PATH__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ibc__core__commitment__v2__merkle_path__descriptor) \
, 0,NULL }


/* Ibc__Core__Commitment__V2__MerklePath methods */
void   ibc__core__commitment__v2__merkle_path__init
                     (Ibc__Core__Commitment__V2__MerklePath         *message);
size_t ibc__core__commitment__v2__merkle_path__get_packed_size
                     (const Ibc__Core__Commitment__V2__MerklePath   *message);
size_t ibc__core__commitment__v2__merkle_path__pack
                     (const Ibc__Core__Commitment__V2__MerklePath   *message,
                      uint8_t             *out);
size_t ibc__core__commitment__v2__merkle_path__pack_to_buffer
                     (const Ibc__Core__Commitment__V2__MerklePath   *message,
                      ProtobufCBuffer     *buffer);
Ibc__Core__Commitment__V2__MerklePath *
       ibc__core__commitment__v2__merkle_path__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ibc__core__commitment__v2__merkle_path__free_unpacked
                     (Ibc__Core__Commitment__V2__MerklePath *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Ibc__Core__Commitment__V2__MerklePath_Closure)
                 (const Ibc__Core__Commitment__V2__MerklePath *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor ibc__core__commitment__v2__merkle_path__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_ibc_2fcore_2fcommitment_2fv2_2fcommitment_2eproto__INCLUDED */
