/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: ibc/lightclients/solomachine/v2/solomachine.proto */

#ifndef PROTOBUF_C_ibc_2flightclients_2fsolomachine_2fv2_2fsolomachine_2eproto__INCLUDED
#define PROTOBUF_C_ibc_2flightclients_2fsolomachine_2fv2_2fsolomachine_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protobuf-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1005002 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protobuf-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protobuf-c.
#endif

#include "ibc/core/connection/v1/connection.pb-c.h"
#include "ibc/core/channel/v1/channel.pb-c.h"
#include "gogoproto/gogo.pb-c.h"
#include "google/protobuf/any.pb-c.h"

typedef struct Ibc__Lightclients__Solomachine__V2__ClientState Ibc__Lightclients__Solomachine__V2__ClientState;
typedef struct Ibc__Lightclients__Solomachine__V2__ConsensusState Ibc__Lightclients__Solomachine__V2__ConsensusState;
typedef struct Ibc__Lightclients__Solomachine__V2__Header Ibc__Lightclients__Solomachine__V2__Header;
typedef struct Ibc__Lightclients__Solomachine__V2__Misbehaviour Ibc__Lightclients__Solomachine__V2__Misbehaviour;
typedef struct Ibc__Lightclients__Solomachine__V2__SignatureAndData Ibc__Lightclients__Solomachine__V2__SignatureAndData;
typedef struct Ibc__Lightclients__Solomachine__V2__TimestampedSignatureData Ibc__Lightclients__Solomachine__V2__TimestampedSignatureData;
typedef struct Ibc__Lightclients__Solomachine__V2__SignBytes Ibc__Lightclients__Solomachine__V2__SignBytes;
typedef struct Ibc__Lightclients__Solomachine__V2__HeaderData Ibc__Lightclients__Solomachine__V2__HeaderData;
typedef struct Ibc__Lightclients__Solomachine__V2__ClientStateData Ibc__Lightclients__Solomachine__V2__ClientStateData;
typedef struct Ibc__Lightclients__Solomachine__V2__ConsensusStateData Ibc__Lightclients__Solomachine__V2__ConsensusStateData;
typedef struct Ibc__Lightclients__Solomachine__V2__ConnectionStateData Ibc__Lightclients__Solomachine__V2__ConnectionStateData;
typedef struct Ibc__Lightclients__Solomachine__V2__ChannelStateData Ibc__Lightclients__Solomachine__V2__ChannelStateData;
typedef struct Ibc__Lightclients__Solomachine__V2__PacketCommitmentData Ibc__Lightclients__Solomachine__V2__PacketCommitmentData;
typedef struct Ibc__Lightclients__Solomachine__V2__PacketAcknowledgementData Ibc__Lightclients__Solomachine__V2__PacketAcknowledgementData;
typedef struct Ibc__Lightclients__Solomachine__V2__PacketReceiptAbsenceData Ibc__Lightclients__Solomachine__V2__PacketReceiptAbsenceData;
typedef struct Ibc__Lightclients__Solomachine__V2__NextSequenceRecvData Ibc__Lightclients__Solomachine__V2__NextSequenceRecvData;


/* --- enums --- */

/*
 * DataType defines the type of solo machine proof being created. This is done
 * to preserve uniqueness of different data sign byte encodings.
 */
typedef enum _Ibc__Lightclients__Solomachine__V2__DataType {
  /*
   * Default State
   */
  IBC__LIGHTCLIENTS__SOLOMACHINE__V2__DATA_TYPE__DATA_TYPE_UNINITIALIZED_UNSPECIFIED = 0,
  /*
   * Data type for client state verification
   */
  IBC__LIGHTCLIENTS__SOLOMACHINE__V2__DATA_TYPE__DATA_TYPE_CLIENT_STATE = 1,
  /*
   * Data type for consensus state verification
   */
  IBC__LIGHTCLIENTS__SOLOMACHINE__V2__DATA_TYPE__DATA_TYPE_CONSENSUS_STATE = 2,
  /*
   * Data type for connection state verification
   */
  IBC__LIGHTCLIENTS__SOLOMACHINE__V2__DATA_TYPE__DATA_TYPE_CONNECTION_STATE = 3,
  /*
   * Data type for channel state verification
   */
  IBC__LIGHTCLIENTS__SOLOMACHINE__V2__DATA_TYPE__DATA_TYPE_CHANNEL_STATE = 4,
  /*
   * Data type for packet commitment verification
   */
  IBC__LIGHTCLIENTS__SOLOMACHINE__V2__DATA_TYPE__DATA_TYPE_PACKET_COMMITMENT = 5,
  /*
   * Data type for packet acknowledgement verification
   */
  IBC__LIGHTCLIENTS__SOLOMACHINE__V2__DATA_TYPE__DATA_TYPE_PACKET_ACKNOWLEDGEMENT = 6,
  /*
   * Data type for packet receipt absence verification
   */
  IBC__LIGHTCLIENTS__SOLOMACHINE__V2__DATA_TYPE__DATA_TYPE_PACKET_RECEIPT_ABSENCE = 7,
  /*
   * Data type for next sequence recv verification
   */
  IBC__LIGHTCLIENTS__SOLOMACHINE__V2__DATA_TYPE__DATA_TYPE_NEXT_SEQUENCE_RECV = 8,
  /*
   * Data type for header verification
   */
  IBC__LIGHTCLIENTS__SOLOMACHINE__V2__DATA_TYPE__DATA_TYPE_HEADER = 9
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(IBC__LIGHTCLIENTS__SOLOMACHINE__V2__DATA_TYPE)
} Ibc__Lightclients__Solomachine__V2__DataType;

/* --- messages --- */

/*
 * ClientState defines a solo machine client that tracks the current consensus
 * state and if the client is frozen.
 */
struct  Ibc__Lightclients__Solomachine__V2__ClientState
{
  ProtobufCMessage base;
  /*
   * latest sequence of the client state
   */
  uint64_t sequence;
  /*
   * frozen sequence of the solo machine
   */
  protobuf_c_boolean is_frozen;
  Ibc__Lightclients__Solomachine__V2__ConsensusState *consensus_state;
  /*
   * when set to true, will allow governance to update a solo machine client.
   * The client will be unfrozen if it is frozen.
   */
  protobuf_c_boolean allow_update_after_proposal;
};
#define IBC__LIGHTCLIENTS__SOLOMACHINE__V2__CLIENT_STATE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ibc__lightclients__solomachine__v2__client_state__descriptor) \
, 0, 0, NULL, 0 }


/*
 * ConsensusState defines a solo machine consensus state. The sequence of a
 * consensus state is contained in the "height" key used in storing the
 * consensus state.
 */
struct  Ibc__Lightclients__Solomachine__V2__ConsensusState
{
  ProtobufCMessage base;
  /*
   * public key of the solo machine
   */
  Google__Protobuf__Any *public_key;
  /*
   * diversifier allows the same public key to be reused across different solo
   * machine clients (potentially on different chains) without being considered
   * misbehaviour.
   */
  char *diversifier;
  uint64_t timestamp;
};
#define IBC__LIGHTCLIENTS__SOLOMACHINE__V2__CONSENSUS_STATE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ibc__lightclients__solomachine__v2__consensus_state__descriptor) \
, NULL, (char *)protobuf_c_empty_string, 0 }


/*
 * Header defines a solo machine consensus header
 */
struct  Ibc__Lightclients__Solomachine__V2__Header
{
  ProtobufCMessage base;
  /*
   * sequence to update solo machine public key at
   */
  uint64_t sequence;
  uint64_t timestamp;
  ProtobufCBinaryData signature;
  Google__Protobuf__Any *new_public_key;
  char *new_diversifier;
};
#define IBC__LIGHTCLIENTS__SOLOMACHINE__V2__HEADER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ibc__lightclients__solomachine__v2__header__descriptor) \
, 0, 0, {0,NULL}, NULL, (char *)protobuf_c_empty_string }


/*
 * Misbehaviour defines misbehaviour for a solo machine which consists
 * of a sequence and two signatures over different messages at that sequence.
 */
struct  Ibc__Lightclients__Solomachine__V2__Misbehaviour
{
  ProtobufCMessage base;
  char *client_id;
  uint64_t sequence;
  Ibc__Lightclients__Solomachine__V2__SignatureAndData *signature_one;
  Ibc__Lightclients__Solomachine__V2__SignatureAndData *signature_two;
};
#define IBC__LIGHTCLIENTS__SOLOMACHINE__V2__MISBEHAVIOUR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ibc__lightclients__solomachine__v2__misbehaviour__descriptor) \
, (char *)protobuf_c_empty_string, 0, NULL, NULL }


/*
 * SignatureAndData contains a signature and the data signed over to create that
 * signature.
 */
struct  Ibc__Lightclients__Solomachine__V2__SignatureAndData
{
  ProtobufCMessage base;
  ProtobufCBinaryData signature;
  Ibc__Lightclients__Solomachine__V2__DataType data_type;
  ProtobufCBinaryData data;
  uint64_t timestamp;
};
#define IBC__LIGHTCLIENTS__SOLOMACHINE__V2__SIGNATURE_AND_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ibc__lightclients__solomachine__v2__signature_and_data__descriptor) \
, {0,NULL}, IBC__LIGHTCLIENTS__SOLOMACHINE__V2__DATA_TYPE__DATA_TYPE_UNINITIALIZED_UNSPECIFIED, {0,NULL}, 0 }


/*
 * TimestampedSignatureData contains the signature data and the timestamp of the
 * signature.
 */
struct  Ibc__Lightclients__Solomachine__V2__TimestampedSignatureData
{
  ProtobufCMessage base;
  ProtobufCBinaryData signature_data;
  uint64_t timestamp;
};
#define IBC__LIGHTCLIENTS__SOLOMACHINE__V2__TIMESTAMPED_SIGNATURE_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ibc__lightclients__solomachine__v2__timestamped_signature_data__descriptor) \
, {0,NULL}, 0 }


/*
 * SignBytes defines the signed bytes used for signature verification.
 */
struct  Ibc__Lightclients__Solomachine__V2__SignBytes
{
  ProtobufCMessage base;
  uint64_t sequence;
  uint64_t timestamp;
  char *diversifier;
  /*
   * type of the data used
   */
  Ibc__Lightclients__Solomachine__V2__DataType data_type;
  /*
   * marshaled data
   */
  ProtobufCBinaryData data;
};
#define IBC__LIGHTCLIENTS__SOLOMACHINE__V2__SIGN_BYTES__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ibc__lightclients__solomachine__v2__sign_bytes__descriptor) \
, 0, 0, (char *)protobuf_c_empty_string, IBC__LIGHTCLIENTS__SOLOMACHINE__V2__DATA_TYPE__DATA_TYPE_UNINITIALIZED_UNSPECIFIED, {0,NULL} }


/*
 * HeaderData returns the SignBytes data for update verification.
 */
struct  Ibc__Lightclients__Solomachine__V2__HeaderData
{
  ProtobufCMessage base;
  /*
   * header public key
   */
  Google__Protobuf__Any *new_pub_key;
  /*
   * header diversifier
   */
  char *new_diversifier;
};
#define IBC__LIGHTCLIENTS__SOLOMACHINE__V2__HEADER_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ibc__lightclients__solomachine__v2__header_data__descriptor) \
, NULL, (char *)protobuf_c_empty_string }


/*
 * ClientStateData returns the SignBytes data for client state verification.
 */
struct  Ibc__Lightclients__Solomachine__V2__ClientStateData
{
  ProtobufCMessage base;
  ProtobufCBinaryData path;
  Google__Protobuf__Any *client_state;
};
#define IBC__LIGHTCLIENTS__SOLOMACHINE__V2__CLIENT_STATE_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ibc__lightclients__solomachine__v2__client_state_data__descriptor) \
, {0,NULL}, NULL }


/*
 * ConsensusStateData returns the SignBytes data for consensus state
 * verification.
 */
struct  Ibc__Lightclients__Solomachine__V2__ConsensusStateData
{
  ProtobufCMessage base;
  ProtobufCBinaryData path;
  Google__Protobuf__Any *consensus_state;
};
#define IBC__LIGHTCLIENTS__SOLOMACHINE__V2__CONSENSUS_STATE_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ibc__lightclients__solomachine__v2__consensus_state_data__descriptor) \
, {0,NULL}, NULL }


/*
 * ConnectionStateData returns the SignBytes data for connection state
 * verification.
 */
struct  Ibc__Lightclients__Solomachine__V2__ConnectionStateData
{
  ProtobufCMessage base;
  ProtobufCBinaryData path;
  Ibc__Core__Connection__V1__ConnectionEnd *connection;
};
#define IBC__LIGHTCLIENTS__SOLOMACHINE__V2__CONNECTION_STATE_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ibc__lightclients__solomachine__v2__connection_state_data__descriptor) \
, {0,NULL}, NULL }


/*
 * ChannelStateData returns the SignBytes data for channel state
 * verification.
 */
struct  Ibc__Lightclients__Solomachine__V2__ChannelStateData
{
  ProtobufCMessage base;
  ProtobufCBinaryData path;
  Ibc__Core__Channel__V1__Channel *channel;
};
#define IBC__LIGHTCLIENTS__SOLOMACHINE__V2__CHANNEL_STATE_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ibc__lightclients__solomachine__v2__channel_state_data__descriptor) \
, {0,NULL}, NULL }


/*
 * PacketCommitmentData returns the SignBytes data for packet commitment
 * verification.
 */
struct  Ibc__Lightclients__Solomachine__V2__PacketCommitmentData
{
  ProtobufCMessage base;
  ProtobufCBinaryData path;
  ProtobufCBinaryData commitment;
};
#define IBC__LIGHTCLIENTS__SOLOMACHINE__V2__PACKET_COMMITMENT_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ibc__lightclients__solomachine__v2__packet_commitment_data__descriptor) \
, {0,NULL}, {0,NULL} }


/*
 * PacketAcknowledgementData returns the SignBytes data for acknowledgement
 * verification.
 */
struct  Ibc__Lightclients__Solomachine__V2__PacketAcknowledgementData
{
  ProtobufCMessage base;
  ProtobufCBinaryData path;
  ProtobufCBinaryData acknowledgement;
};
#define IBC__LIGHTCLIENTS__SOLOMACHINE__V2__PACKET_ACKNOWLEDGEMENT_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ibc__lightclients__solomachine__v2__packet_acknowledgement_data__descriptor) \
, {0,NULL}, {0,NULL} }


/*
 * PacketReceiptAbsenceData returns the SignBytes data for
 * packet receipt absence verification.
 */
struct  Ibc__Lightclients__Solomachine__V2__PacketReceiptAbsenceData
{
  ProtobufCMessage base;
  ProtobufCBinaryData path;
};
#define IBC__LIGHTCLIENTS__SOLOMACHINE__V2__PACKET_RECEIPT_ABSENCE_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ibc__lightclients__solomachine__v2__packet_receipt_absence_data__descriptor) \
, {0,NULL} }


/*
 * NextSequenceRecvData returns the SignBytes data for verification of the next
 * sequence to be received.
 */
struct  Ibc__Lightclients__Solomachine__V2__NextSequenceRecvData
{
  ProtobufCMessage base;
  ProtobufCBinaryData path;
  uint64_t next_seq_recv;
};
#define IBC__LIGHTCLIENTS__SOLOMACHINE__V2__NEXT_SEQUENCE_RECV_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ibc__lightclients__solomachine__v2__next_sequence_recv_data__descriptor) \
, {0,NULL}, 0 }


/* Ibc__Lightclients__Solomachine__V2__ClientState methods */
void   ibc__lightclients__solomachine__v2__client_state__init
                     (Ibc__Lightclients__Solomachine__V2__ClientState         *message);
size_t ibc__lightclients__solomachine__v2__client_state__get_packed_size
                     (const Ibc__Lightclients__Solomachine__V2__ClientState   *message);
size_t ibc__lightclients__solomachine__v2__client_state__pack
                     (const Ibc__Lightclients__Solomachine__V2__ClientState   *message,
                      uint8_t             *out);
size_t ibc__lightclients__solomachine__v2__client_state__pack_to_buffer
                     (const Ibc__Lightclients__Solomachine__V2__ClientState   *message,
                      ProtobufCBuffer     *buffer);
Ibc__Lightclients__Solomachine__V2__ClientState *
       ibc__lightclients__solomachine__v2__client_state__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ibc__lightclients__solomachine__v2__client_state__free_unpacked
                     (Ibc__Lightclients__Solomachine__V2__ClientState *message,
                      ProtobufCAllocator *allocator);
/* Ibc__Lightclients__Solomachine__V2__ConsensusState methods */
void   ibc__lightclients__solomachine__v2__consensus_state__init
                     (Ibc__Lightclients__Solomachine__V2__ConsensusState         *message);
size_t ibc__lightclients__solomachine__v2__consensus_state__get_packed_size
                     (const Ibc__Lightclients__Solomachine__V2__ConsensusState   *message);
size_t ibc__lightclients__solomachine__v2__consensus_state__pack
                     (const Ibc__Lightclients__Solomachine__V2__ConsensusState   *message,
                      uint8_t             *out);
size_t ibc__lightclients__solomachine__v2__consensus_state__pack_to_buffer
                     (const Ibc__Lightclients__Solomachine__V2__ConsensusState   *message,
                      ProtobufCBuffer     *buffer);
Ibc__Lightclients__Solomachine__V2__ConsensusState *
       ibc__lightclients__solomachine__v2__consensus_state__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ibc__lightclients__solomachine__v2__consensus_state__free_unpacked
                     (Ibc__Lightclients__Solomachine__V2__ConsensusState *message,
                      ProtobufCAllocator *allocator);
/* Ibc__Lightclients__Solomachine__V2__Header methods */
void   ibc__lightclients__solomachine__v2__header__init
                     (Ibc__Lightclients__Solomachine__V2__Header         *message);
size_t ibc__lightclients__solomachine__v2__header__get_packed_size
                     (const Ibc__Lightclients__Solomachine__V2__Header   *message);
size_t ibc__lightclients__solomachine__v2__header__pack
                     (const Ibc__Lightclients__Solomachine__V2__Header   *message,
                      uint8_t             *out);
size_t ibc__lightclients__solomachine__v2__header__pack_to_buffer
                     (const Ibc__Lightclients__Solomachine__V2__Header   *message,
                      ProtobufCBuffer     *buffer);
Ibc__Lightclients__Solomachine__V2__Header *
       ibc__lightclients__solomachine__v2__header__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ibc__lightclients__solomachine__v2__header__free_unpacked
                     (Ibc__Lightclients__Solomachine__V2__Header *message,
                      ProtobufCAllocator *allocator);
/* Ibc__Lightclients__Solomachine__V2__Misbehaviour methods */
void   ibc__lightclients__solomachine__v2__misbehaviour__init
                     (Ibc__Lightclients__Solomachine__V2__Misbehaviour         *message);
size_t ibc__lightclients__solomachine__v2__misbehaviour__get_packed_size
                     (const Ibc__Lightclients__Solomachine__V2__Misbehaviour   *message);
size_t ibc__lightclients__solomachine__v2__misbehaviour__pack
                     (const Ibc__Lightclients__Solomachine__V2__Misbehaviour   *message,
                      uint8_t             *out);
size_t ibc__lightclients__solomachine__v2__misbehaviour__pack_to_buffer
                     (const Ibc__Lightclients__Solomachine__V2__Misbehaviour   *message,
                      ProtobufCBuffer     *buffer);
Ibc__Lightclients__Solomachine__V2__Misbehaviour *
       ibc__lightclients__solomachine__v2__misbehaviour__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ibc__lightclients__solomachine__v2__misbehaviour__free_unpacked
                     (Ibc__Lightclients__Solomachine__V2__Misbehaviour *message,
                      ProtobufCAllocator *allocator);
/* Ibc__Lightclients__Solomachine__V2__SignatureAndData methods */
void   ibc__lightclients__solomachine__v2__signature_and_data__init
                     (Ibc__Lightclients__Solomachine__V2__SignatureAndData         *message);
size_t ibc__lightclients__solomachine__v2__signature_and_data__get_packed_size
                     (const Ibc__Lightclients__Solomachine__V2__SignatureAndData   *message);
size_t ibc__lightclients__solomachine__v2__signature_and_data__pack
                     (const Ibc__Lightclients__Solomachine__V2__SignatureAndData   *message,
                      uint8_t             *out);
size_t ibc__lightclients__solomachine__v2__signature_and_data__pack_to_buffer
                     (const Ibc__Lightclients__Solomachine__V2__SignatureAndData   *message,
                      ProtobufCBuffer     *buffer);
Ibc__Lightclients__Solomachine__V2__SignatureAndData *
       ibc__lightclients__solomachine__v2__signature_and_data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ibc__lightclients__solomachine__v2__signature_and_data__free_unpacked
                     (Ibc__Lightclients__Solomachine__V2__SignatureAndData *message,
                      ProtobufCAllocator *allocator);
/* Ibc__Lightclients__Solomachine__V2__TimestampedSignatureData methods */
void   ibc__lightclients__solomachine__v2__timestamped_signature_data__init
                     (Ibc__Lightclients__Solomachine__V2__TimestampedSignatureData         *message);
size_t ibc__lightclients__solomachine__v2__timestamped_signature_data__get_packed_size
                     (const Ibc__Lightclients__Solomachine__V2__TimestampedSignatureData   *message);
size_t ibc__lightclients__solomachine__v2__timestamped_signature_data__pack
                     (const Ibc__Lightclients__Solomachine__V2__TimestampedSignatureData   *message,
                      uint8_t             *out);
size_t ibc__lightclients__solomachine__v2__timestamped_signature_data__pack_to_buffer
                     (const Ibc__Lightclients__Solomachine__V2__TimestampedSignatureData   *message,
                      ProtobufCBuffer     *buffer);
Ibc__Lightclients__Solomachine__V2__TimestampedSignatureData *
       ibc__lightclients__solomachine__v2__timestamped_signature_data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ibc__lightclients__solomachine__v2__timestamped_signature_data__free_unpacked
                     (Ibc__Lightclients__Solomachine__V2__TimestampedSignatureData *message,
                      ProtobufCAllocator *allocator);
/* Ibc__Lightclients__Solomachine__V2__SignBytes methods */
void   ibc__lightclients__solomachine__v2__sign_bytes__init
                     (Ibc__Lightclients__Solomachine__V2__SignBytes         *message);
size_t ibc__lightclients__solomachine__v2__sign_bytes__get_packed_size
                     (const Ibc__Lightclients__Solomachine__V2__SignBytes   *message);
size_t ibc__lightclients__solomachine__v2__sign_bytes__pack
                     (const Ibc__Lightclients__Solomachine__V2__SignBytes   *message,
                      uint8_t             *out);
size_t ibc__lightclients__solomachine__v2__sign_bytes__pack_to_buffer
                     (const Ibc__Lightclients__Solomachine__V2__SignBytes   *message,
                      ProtobufCBuffer     *buffer);
Ibc__Lightclients__Solomachine__V2__SignBytes *
       ibc__lightclients__solomachine__v2__sign_bytes__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ibc__lightclients__solomachine__v2__sign_bytes__free_unpacked
                     (Ibc__Lightclients__Solomachine__V2__SignBytes *message,
                      ProtobufCAllocator *allocator);
/* Ibc__Lightclients__Solomachine__V2__HeaderData methods */
void   ibc__lightclients__solomachine__v2__header_data__init
                     (Ibc__Lightclients__Solomachine__V2__HeaderData         *message);
size_t ibc__lightclients__solomachine__v2__header_data__get_packed_size
                     (const Ibc__Lightclients__Solomachine__V2__HeaderData   *message);
size_t ibc__lightclients__solomachine__v2__header_data__pack
                     (const Ibc__Lightclients__Solomachine__V2__HeaderData   *message,
                      uint8_t             *out);
size_t ibc__lightclients__solomachine__v2__header_data__pack_to_buffer
                     (const Ibc__Lightclients__Solomachine__V2__HeaderData   *message,
                      ProtobufCBuffer     *buffer);
Ibc__Lightclients__Solomachine__V2__HeaderData *
       ibc__lightclients__solomachine__v2__header_data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ibc__lightclients__solomachine__v2__header_data__free_unpacked
                     (Ibc__Lightclients__Solomachine__V2__HeaderData *message,
                      ProtobufCAllocator *allocator);
/* Ibc__Lightclients__Solomachine__V2__ClientStateData methods */
void   ibc__lightclients__solomachine__v2__client_state_data__init
                     (Ibc__Lightclients__Solomachine__V2__ClientStateData         *message);
size_t ibc__lightclients__solomachine__v2__client_state_data__get_packed_size
                     (const Ibc__Lightclients__Solomachine__V2__ClientStateData   *message);
size_t ibc__lightclients__solomachine__v2__client_state_data__pack
                     (const Ibc__Lightclients__Solomachine__V2__ClientStateData   *message,
                      uint8_t             *out);
size_t ibc__lightclients__solomachine__v2__client_state_data__pack_to_buffer
                     (const Ibc__Lightclients__Solomachine__V2__ClientStateData   *message,
                      ProtobufCBuffer     *buffer);
Ibc__Lightclients__Solomachine__V2__ClientStateData *
       ibc__lightclients__solomachine__v2__client_state_data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ibc__lightclients__solomachine__v2__client_state_data__free_unpacked
                     (Ibc__Lightclients__Solomachine__V2__ClientStateData *message,
                      ProtobufCAllocator *allocator);
/* Ibc__Lightclients__Solomachine__V2__ConsensusStateData methods */
void   ibc__lightclients__solomachine__v2__consensus_state_data__init
                     (Ibc__Lightclients__Solomachine__V2__ConsensusStateData         *message);
size_t ibc__lightclients__solomachine__v2__consensus_state_data__get_packed_size
                     (const Ibc__Lightclients__Solomachine__V2__ConsensusStateData   *message);
size_t ibc__lightclients__solomachine__v2__consensus_state_data__pack
                     (const Ibc__Lightclients__Solomachine__V2__ConsensusStateData   *message,
                      uint8_t             *out);
size_t ibc__lightclients__solomachine__v2__consensus_state_data__pack_to_buffer
                     (const Ibc__Lightclients__Solomachine__V2__ConsensusStateData   *message,
                      ProtobufCBuffer     *buffer);
Ibc__Lightclients__Solomachine__V2__ConsensusStateData *
       ibc__lightclients__solomachine__v2__consensus_state_data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ibc__lightclients__solomachine__v2__consensus_state_data__free_unpacked
                     (Ibc__Lightclients__Solomachine__V2__ConsensusStateData *message,
                      ProtobufCAllocator *allocator);
/* Ibc__Lightclients__Solomachine__V2__ConnectionStateData methods */
void   ibc__lightclients__solomachine__v2__connection_state_data__init
                     (Ibc__Lightclients__Solomachine__V2__ConnectionStateData         *message);
size_t ibc__lightclients__solomachine__v2__connection_state_data__get_packed_size
                     (const Ibc__Lightclients__Solomachine__V2__ConnectionStateData   *message);
size_t ibc__lightclients__solomachine__v2__connection_state_data__pack
                     (const Ibc__Lightclients__Solomachine__V2__ConnectionStateData   *message,
                      uint8_t             *out);
size_t ibc__lightclients__solomachine__v2__connection_state_data__pack_to_buffer
                     (const Ibc__Lightclients__Solomachine__V2__ConnectionStateData   *message,
                      ProtobufCBuffer     *buffer);
Ibc__Lightclients__Solomachine__V2__ConnectionStateData *
       ibc__lightclients__solomachine__v2__connection_state_data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ibc__lightclients__solomachine__v2__connection_state_data__free_unpacked
                     (Ibc__Lightclients__Solomachine__V2__ConnectionStateData *message,
                      ProtobufCAllocator *allocator);
/* Ibc__Lightclients__Solomachine__V2__ChannelStateData methods */
void   ibc__lightclients__solomachine__v2__channel_state_data__init
                     (Ibc__Lightclients__Solomachine__V2__ChannelStateData         *message);
size_t ibc__lightclients__solomachine__v2__channel_state_data__get_packed_size
                     (const Ibc__Lightclients__Solomachine__V2__ChannelStateData   *message);
size_t ibc__lightclients__solomachine__v2__channel_state_data__pack
                     (const Ibc__Lightclients__Solomachine__V2__ChannelStateData   *message,
                      uint8_t             *out);
size_t ibc__lightclients__solomachine__v2__channel_state_data__pack_to_buffer
                     (const Ibc__Lightclients__Solomachine__V2__ChannelStateData   *message,
                      ProtobufCBuffer     *buffer);
Ibc__Lightclients__Solomachine__V2__ChannelStateData *
       ibc__lightclients__solomachine__v2__channel_state_data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ibc__lightclients__solomachine__v2__channel_state_data__free_unpacked
                     (Ibc__Lightclients__Solomachine__V2__ChannelStateData *message,
                      ProtobufCAllocator *allocator);
/* Ibc__Lightclients__Solomachine__V2__PacketCommitmentData methods */
void   ibc__lightclients__solomachine__v2__packet_commitment_data__init
                     (Ibc__Lightclients__Solomachine__V2__PacketCommitmentData         *message);
size_t ibc__lightclients__solomachine__v2__packet_commitment_data__get_packed_size
                     (const Ibc__Lightclients__Solomachine__V2__PacketCommitmentData   *message);
size_t ibc__lightclients__solomachine__v2__packet_commitment_data__pack
                     (const Ibc__Lightclients__Solomachine__V2__PacketCommitmentData   *message,
                      uint8_t             *out);
size_t ibc__lightclients__solomachine__v2__packet_commitment_data__pack_to_buffer
                     (const Ibc__Lightclients__Solomachine__V2__PacketCommitmentData   *message,
                      ProtobufCBuffer     *buffer);
Ibc__Lightclients__Solomachine__V2__PacketCommitmentData *
       ibc__lightclients__solomachine__v2__packet_commitment_data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ibc__lightclients__solomachine__v2__packet_commitment_data__free_unpacked
                     (Ibc__Lightclients__Solomachine__V2__PacketCommitmentData *message,
                      ProtobufCAllocator *allocator);
/* Ibc__Lightclients__Solomachine__V2__PacketAcknowledgementData methods */
void   ibc__lightclients__solomachine__v2__packet_acknowledgement_data__init
                     (Ibc__Lightclients__Solomachine__V2__PacketAcknowledgementData         *message);
size_t ibc__lightclients__solomachine__v2__packet_acknowledgement_data__get_packed_size
                     (const Ibc__Lightclients__Solomachine__V2__PacketAcknowledgementData   *message);
size_t ibc__lightclients__solomachine__v2__packet_acknowledgement_data__pack
                     (const Ibc__Lightclients__Solomachine__V2__PacketAcknowledgementData   *message,
                      uint8_t             *out);
size_t ibc__lightclients__solomachine__v2__packet_acknowledgement_data__pack_to_buffer
                     (const Ibc__Lightclients__Solomachine__V2__PacketAcknowledgementData   *message,
                      ProtobufCBuffer     *buffer);
Ibc__Lightclients__Solomachine__V2__PacketAcknowledgementData *
       ibc__lightclients__solomachine__v2__packet_acknowledgement_data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ibc__lightclients__solomachine__v2__packet_acknowledgement_data__free_unpacked
                     (Ibc__Lightclients__Solomachine__V2__PacketAcknowledgementData *message,
                      ProtobufCAllocator *allocator);
/* Ibc__Lightclients__Solomachine__V2__PacketReceiptAbsenceData methods */
void   ibc__lightclients__solomachine__v2__packet_receipt_absence_data__init
                     (Ibc__Lightclients__Solomachine__V2__PacketReceiptAbsenceData         *message);
size_t ibc__lightclients__solomachine__v2__packet_receipt_absence_data__get_packed_size
                     (const Ibc__Lightclients__Solomachine__V2__PacketReceiptAbsenceData   *message);
size_t ibc__lightclients__solomachine__v2__packet_receipt_absence_data__pack
                     (const Ibc__Lightclients__Solomachine__V2__PacketReceiptAbsenceData   *message,
                      uint8_t             *out);
size_t ibc__lightclients__solomachine__v2__packet_receipt_absence_data__pack_to_buffer
                     (const Ibc__Lightclients__Solomachine__V2__PacketReceiptAbsenceData   *message,
                      ProtobufCBuffer     *buffer);
Ibc__Lightclients__Solomachine__V2__PacketReceiptAbsenceData *
       ibc__lightclients__solomachine__v2__packet_receipt_absence_data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ibc__lightclients__solomachine__v2__packet_receipt_absence_data__free_unpacked
                     (Ibc__Lightclients__Solomachine__V2__PacketReceiptAbsenceData *message,
                      ProtobufCAllocator *allocator);
/* Ibc__Lightclients__Solomachine__V2__NextSequenceRecvData methods */
void   ibc__lightclients__solomachine__v2__next_sequence_recv_data__init
                     (Ibc__Lightclients__Solomachine__V2__NextSequenceRecvData         *message);
size_t ibc__lightclients__solomachine__v2__next_sequence_recv_data__get_packed_size
                     (const Ibc__Lightclients__Solomachine__V2__NextSequenceRecvData   *message);
size_t ibc__lightclients__solomachine__v2__next_sequence_recv_data__pack
                     (const Ibc__Lightclients__Solomachine__V2__NextSequenceRecvData   *message,
                      uint8_t             *out);
size_t ibc__lightclients__solomachine__v2__next_sequence_recv_data__pack_to_buffer
                     (const Ibc__Lightclients__Solomachine__V2__NextSequenceRecvData   *message,
                      ProtobufCBuffer     *buffer);
Ibc__Lightclients__Solomachine__V2__NextSequenceRecvData *
       ibc__lightclients__solomachine__v2__next_sequence_recv_data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ibc__lightclients__solomachine__v2__next_sequence_recv_data__free_unpacked
                     (Ibc__Lightclients__Solomachine__V2__NextSequenceRecvData *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Ibc__Lightclients__Solomachine__V2__ClientState_Closure)
                 (const Ibc__Lightclients__Solomachine__V2__ClientState *message,
                  void *closure_data);
typedef void (*Ibc__Lightclients__Solomachine__V2__ConsensusState_Closure)
                 (const Ibc__Lightclients__Solomachine__V2__ConsensusState *message,
                  void *closure_data);
typedef void (*Ibc__Lightclients__Solomachine__V2__Header_Closure)
                 (const Ibc__Lightclients__Solomachine__V2__Header *message,
                  void *closure_data);
typedef void (*Ibc__Lightclients__Solomachine__V2__Misbehaviour_Closure)
                 (const Ibc__Lightclients__Solomachine__V2__Misbehaviour *message,
                  void *closure_data);
typedef void (*Ibc__Lightclients__Solomachine__V2__SignatureAndData_Closure)
                 (const Ibc__Lightclients__Solomachine__V2__SignatureAndData *message,
                  void *closure_data);
typedef void (*Ibc__Lightclients__Solomachine__V2__TimestampedSignatureData_Closure)
                 (const Ibc__Lightclients__Solomachine__V2__TimestampedSignatureData *message,
                  void *closure_data);
typedef void (*Ibc__Lightclients__Solomachine__V2__SignBytes_Closure)
                 (const Ibc__Lightclients__Solomachine__V2__SignBytes *message,
                  void *closure_data);
typedef void (*Ibc__Lightclients__Solomachine__V2__HeaderData_Closure)
                 (const Ibc__Lightclients__Solomachine__V2__HeaderData *message,
                  void *closure_data);
typedef void (*Ibc__Lightclients__Solomachine__V2__ClientStateData_Closure)
                 (const Ibc__Lightclients__Solomachine__V2__ClientStateData *message,
                  void *closure_data);
typedef void (*Ibc__Lightclients__Solomachine__V2__ConsensusStateData_Closure)
                 (const Ibc__Lightclients__Solomachine__V2__ConsensusStateData *message,
                  void *closure_data);
typedef void (*Ibc__Lightclients__Solomachine__V2__ConnectionStateData_Closure)
                 (const Ibc__Lightclients__Solomachine__V2__ConnectionStateData *message,
                  void *closure_data);
typedef void (*Ibc__Lightclients__Solomachine__V2__ChannelStateData_Closure)
                 (const Ibc__Lightclients__Solomachine__V2__ChannelStateData *message,
                  void *closure_data);
typedef void (*Ibc__Lightclients__Solomachine__V2__PacketCommitmentData_Closure)
                 (const Ibc__Lightclients__Solomachine__V2__PacketCommitmentData *message,
                  void *closure_data);
typedef void (*Ibc__Lightclients__Solomachine__V2__PacketAcknowledgementData_Closure)
                 (const Ibc__Lightclients__Solomachine__V2__PacketAcknowledgementData *message,
                  void *closure_data);
typedef void (*Ibc__Lightclients__Solomachine__V2__PacketReceiptAbsenceData_Closure)
                 (const Ibc__Lightclients__Solomachine__V2__PacketReceiptAbsenceData *message,
                  void *closure_data);
typedef void (*Ibc__Lightclients__Solomachine__V2__NextSequenceRecvData_Closure)
                 (const Ibc__Lightclients__Solomachine__V2__NextSequenceRecvData *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    ibc__lightclients__solomachine__v2__data_type__descriptor;
extern const ProtobufCMessageDescriptor ibc__lightclients__solomachine__v2__client_state__descriptor;
extern const ProtobufCMessageDescriptor ibc__lightclients__solomachine__v2__consensus_state__descriptor;
extern const ProtobufCMessageDescriptor ibc__lightclients__solomachine__v2__header__descriptor;
extern const ProtobufCMessageDescriptor ibc__lightclients__solomachine__v2__misbehaviour__descriptor;
extern const ProtobufCMessageDescriptor ibc__lightclients__solomachine__v2__signature_and_data__descriptor;
extern const ProtobufCMessageDescriptor ibc__lightclients__solomachine__v2__timestamped_signature_data__descriptor;
extern const ProtobufCMessageDescriptor ibc__lightclients__solomachine__v2__sign_bytes__descriptor;
extern const ProtobufCMessageDescriptor ibc__lightclients__solomachine__v2__header_data__descriptor;
extern const ProtobufCMessageDescriptor ibc__lightclients__solomachine__v2__client_state_data__descriptor;
extern const ProtobufCMessageDescriptor ibc__lightclients__solomachine__v2__consensus_state_data__descriptor;
extern const ProtobufCMessageDescriptor ibc__lightclients__solomachine__v2__connection_state_data__descriptor;
extern const ProtobufCMessageDescriptor ibc__lightclients__solomachine__v2__channel_state_data__descriptor;
extern const ProtobufCMessageDescriptor ibc__lightclients__solomachine__v2__packet_commitment_data__descriptor;
extern const ProtobufCMessageDescriptor ibc__lightclients__solomachine__v2__packet_acknowledgement_data__descriptor;
extern const ProtobufCMessageDescriptor ibc__lightclients__solomachine__v2__packet_receipt_absence_data__descriptor;
extern const ProtobufCMessageDescriptor ibc__lightclients__solomachine__v2__next_sequence_recv_data__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_ibc_2flightclients_2fsolomachine_2fv2_2fsolomachine_2eproto__INCLUDED */
