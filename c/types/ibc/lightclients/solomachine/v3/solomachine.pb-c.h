/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: ibc/lightclients/solomachine/v3/solomachine.proto */

#ifndef PROTOBUF_C_ibc_2flightclients_2fsolomachine_2fv3_2fsolomachine_2eproto__INCLUDED
#define PROTOBUF_C_ibc_2flightclients_2fsolomachine_2fv3_2fsolomachine_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protobuf-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1005002 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protobuf-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protobuf-c.
#endif

#include "gogoproto/gogo.pb-c.h"
#include "google/protobuf/any.pb-c.h"

typedef struct Ibc__Lightclients__Solomachine__V3__ClientState Ibc__Lightclients__Solomachine__V3__ClientState;
typedef struct Ibc__Lightclients__Solomachine__V3__ConsensusState Ibc__Lightclients__Solomachine__V3__ConsensusState;
typedef struct Ibc__Lightclients__Solomachine__V3__Header Ibc__Lightclients__Solomachine__V3__Header;
typedef struct Ibc__Lightclients__Solomachine__V3__Misbehaviour Ibc__Lightclients__Solomachine__V3__Misbehaviour;
typedef struct Ibc__Lightclients__Solomachine__V3__SignatureAndData Ibc__Lightclients__Solomachine__V3__SignatureAndData;
typedef struct Ibc__Lightclients__Solomachine__V3__TimestampedSignatureData Ibc__Lightclients__Solomachine__V3__TimestampedSignatureData;
typedef struct Ibc__Lightclients__Solomachine__V3__SignBytes Ibc__Lightclients__Solomachine__V3__SignBytes;
typedef struct Ibc__Lightclients__Solomachine__V3__HeaderData Ibc__Lightclients__Solomachine__V3__HeaderData;


/* --- enums --- */


/* --- messages --- */

/*
 * ClientState defines a solo machine client that tracks the current consensus
 * state and if the client is frozen.
 */
struct  Ibc__Lightclients__Solomachine__V3__ClientState
{
  ProtobufCMessage base;
  /*
   * latest sequence of the client state
   */
  uint64_t sequence;
  /*
   * frozen sequence of the solo machine
   */
  protobuf_c_boolean is_frozen;
  Ibc__Lightclients__Solomachine__V3__ConsensusState *consensus_state;
};
#define IBC__LIGHTCLIENTS__SOLOMACHINE__V3__CLIENT_STATE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ibc__lightclients__solomachine__v3__client_state__descriptor) \
, 0, 0, NULL }


/*
 * ConsensusState defines a solo machine consensus state. The sequence of a
 * consensus state is contained in the "height" key used in storing the
 * consensus state.
 */
struct  Ibc__Lightclients__Solomachine__V3__ConsensusState
{
  ProtobufCMessage base;
  /*
   * public key of the solo machine
   */
  Google__Protobuf__Any *public_key;
  /*
   * diversifier allows the same public key to be reused across different solo
   * machine clients (potentially on different chains) without being considered
   * misbehaviour.
   */
  char *diversifier;
  uint64_t timestamp;
};
#define IBC__LIGHTCLIENTS__SOLOMACHINE__V3__CONSENSUS_STATE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ibc__lightclients__solomachine__v3__consensus_state__descriptor) \
, NULL, (char *)protobuf_c_empty_string, 0 }


/*
 * Header defines a solo machine consensus header
 */
struct  Ibc__Lightclients__Solomachine__V3__Header
{
  ProtobufCMessage base;
  uint64_t timestamp;
  ProtobufCBinaryData signature;
  Google__Protobuf__Any *new_public_key;
  char *new_diversifier;
};
#define IBC__LIGHTCLIENTS__SOLOMACHINE__V3__HEADER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ibc__lightclients__solomachine__v3__header__descriptor) \
, 0, {0,NULL}, NULL, (char *)protobuf_c_empty_string }


/*
 * Misbehaviour defines misbehaviour for a solo machine which consists
 * of a sequence and two signatures over different messages at that sequence.
 */
struct  Ibc__Lightclients__Solomachine__V3__Misbehaviour
{
  ProtobufCMessage base;
  uint64_t sequence;
  Ibc__Lightclients__Solomachine__V3__SignatureAndData *signature_one;
  Ibc__Lightclients__Solomachine__V3__SignatureAndData *signature_two;
};
#define IBC__LIGHTCLIENTS__SOLOMACHINE__V3__MISBEHAVIOUR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ibc__lightclients__solomachine__v3__misbehaviour__descriptor) \
, 0, NULL, NULL }


/*
 * SignatureAndData contains a signature and the data signed over to create that
 * signature.
 */
struct  Ibc__Lightclients__Solomachine__V3__SignatureAndData
{
  ProtobufCMessage base;
  ProtobufCBinaryData signature;
  ProtobufCBinaryData path;
  ProtobufCBinaryData data;
  uint64_t timestamp;
};
#define IBC__LIGHTCLIENTS__SOLOMACHINE__V3__SIGNATURE_AND_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ibc__lightclients__solomachine__v3__signature_and_data__descriptor) \
, {0,NULL}, {0,NULL}, {0,NULL}, 0 }


/*
 * TimestampedSignatureData contains the signature data and the timestamp of the
 * signature.
 */
struct  Ibc__Lightclients__Solomachine__V3__TimestampedSignatureData
{
  ProtobufCMessage base;
  ProtobufCBinaryData signature_data;
  uint64_t timestamp;
};
#define IBC__LIGHTCLIENTS__SOLOMACHINE__V3__TIMESTAMPED_SIGNATURE_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ibc__lightclients__solomachine__v3__timestamped_signature_data__descriptor) \
, {0,NULL}, 0 }


/*
 * SignBytes defines the signed bytes used for signature verification.
 */
struct  Ibc__Lightclients__Solomachine__V3__SignBytes
{
  ProtobufCMessage base;
  /*
   * the sequence number
   */
  uint64_t sequence;
  /*
   * the proof timestamp
   */
  uint64_t timestamp;
  /*
   * the public key diversifier
   */
  char *diversifier;
  /*
   * the standardised path bytes
   */
  ProtobufCBinaryData path;
  /*
   * the marshaled data bytes
   */
  ProtobufCBinaryData data;
};
#define IBC__LIGHTCLIENTS__SOLOMACHINE__V3__SIGN_BYTES__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ibc__lightclients__solomachine__v3__sign_bytes__descriptor) \
, 0, 0, (char *)protobuf_c_empty_string, {0,NULL}, {0,NULL} }


/*
 * HeaderData returns the SignBytes data for update verification.
 */
struct  Ibc__Lightclients__Solomachine__V3__HeaderData
{
  ProtobufCMessage base;
  /*
   * header public key
   */
  Google__Protobuf__Any *new_pub_key;
  /*
   * header diversifier
   */
  char *new_diversifier;
};
#define IBC__LIGHTCLIENTS__SOLOMACHINE__V3__HEADER_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ibc__lightclients__solomachine__v3__header_data__descriptor) \
, NULL, (char *)protobuf_c_empty_string }


/* Ibc__Lightclients__Solomachine__V3__ClientState methods */
void   ibc__lightclients__solomachine__v3__client_state__init
                     (Ibc__Lightclients__Solomachine__V3__ClientState         *message);
size_t ibc__lightclients__solomachine__v3__client_state__get_packed_size
                     (const Ibc__Lightclients__Solomachine__V3__ClientState   *message);
size_t ibc__lightclients__solomachine__v3__client_state__pack
                     (const Ibc__Lightclients__Solomachine__V3__ClientState   *message,
                      uint8_t             *out);
size_t ibc__lightclients__solomachine__v3__client_state__pack_to_buffer
                     (const Ibc__Lightclients__Solomachine__V3__ClientState   *message,
                      ProtobufCBuffer     *buffer);
Ibc__Lightclients__Solomachine__V3__ClientState *
       ibc__lightclients__solomachine__v3__client_state__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ibc__lightclients__solomachine__v3__client_state__free_unpacked
                     (Ibc__Lightclients__Solomachine__V3__ClientState *message,
                      ProtobufCAllocator *allocator);
/* Ibc__Lightclients__Solomachine__V3__ConsensusState methods */
void   ibc__lightclients__solomachine__v3__consensus_state__init
                     (Ibc__Lightclients__Solomachine__V3__ConsensusState         *message);
size_t ibc__lightclients__solomachine__v3__consensus_state__get_packed_size
                     (const Ibc__Lightclients__Solomachine__V3__ConsensusState   *message);
size_t ibc__lightclients__solomachine__v3__consensus_state__pack
                     (const Ibc__Lightclients__Solomachine__V3__ConsensusState   *message,
                      uint8_t             *out);
size_t ibc__lightclients__solomachine__v3__consensus_state__pack_to_buffer
                     (const Ibc__Lightclients__Solomachine__V3__ConsensusState   *message,
                      ProtobufCBuffer     *buffer);
Ibc__Lightclients__Solomachine__V3__ConsensusState *
       ibc__lightclients__solomachine__v3__consensus_state__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ibc__lightclients__solomachine__v3__consensus_state__free_unpacked
                     (Ibc__Lightclients__Solomachine__V3__ConsensusState *message,
                      ProtobufCAllocator *allocator);
/* Ibc__Lightclients__Solomachine__V3__Header methods */
void   ibc__lightclients__solomachine__v3__header__init
                     (Ibc__Lightclients__Solomachine__V3__Header         *message);
size_t ibc__lightclients__solomachine__v3__header__get_packed_size
                     (const Ibc__Lightclients__Solomachine__V3__Header   *message);
size_t ibc__lightclients__solomachine__v3__header__pack
                     (const Ibc__Lightclients__Solomachine__V3__Header   *message,
                      uint8_t             *out);
size_t ibc__lightclients__solomachine__v3__header__pack_to_buffer
                     (const Ibc__Lightclients__Solomachine__V3__Header   *message,
                      ProtobufCBuffer     *buffer);
Ibc__Lightclients__Solomachine__V3__Header *
       ibc__lightclients__solomachine__v3__header__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ibc__lightclients__solomachine__v3__header__free_unpacked
                     (Ibc__Lightclients__Solomachine__V3__Header *message,
                      ProtobufCAllocator *allocator);
/* Ibc__Lightclients__Solomachine__V3__Misbehaviour methods */
void   ibc__lightclients__solomachine__v3__misbehaviour__init
                     (Ibc__Lightclients__Solomachine__V3__Misbehaviour         *message);
size_t ibc__lightclients__solomachine__v3__misbehaviour__get_packed_size
                     (const Ibc__Lightclients__Solomachine__V3__Misbehaviour   *message);
size_t ibc__lightclients__solomachine__v3__misbehaviour__pack
                     (const Ibc__Lightclients__Solomachine__V3__Misbehaviour   *message,
                      uint8_t             *out);
size_t ibc__lightclients__solomachine__v3__misbehaviour__pack_to_buffer
                     (const Ibc__Lightclients__Solomachine__V3__Misbehaviour   *message,
                      ProtobufCBuffer     *buffer);
Ibc__Lightclients__Solomachine__V3__Misbehaviour *
       ibc__lightclients__solomachine__v3__misbehaviour__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ibc__lightclients__solomachine__v3__misbehaviour__free_unpacked
                     (Ibc__Lightclients__Solomachine__V3__Misbehaviour *message,
                      ProtobufCAllocator *allocator);
/* Ibc__Lightclients__Solomachine__V3__SignatureAndData methods */
void   ibc__lightclients__solomachine__v3__signature_and_data__init
                     (Ibc__Lightclients__Solomachine__V3__SignatureAndData         *message);
size_t ibc__lightclients__solomachine__v3__signature_and_data__get_packed_size
                     (const Ibc__Lightclients__Solomachine__V3__SignatureAndData   *message);
size_t ibc__lightclients__solomachine__v3__signature_and_data__pack
                     (const Ibc__Lightclients__Solomachine__V3__SignatureAndData   *message,
                      uint8_t             *out);
size_t ibc__lightclients__solomachine__v3__signature_and_data__pack_to_buffer
                     (const Ibc__Lightclients__Solomachine__V3__SignatureAndData   *message,
                      ProtobufCBuffer     *buffer);
Ibc__Lightclients__Solomachine__V3__SignatureAndData *
       ibc__lightclients__solomachine__v3__signature_and_data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ibc__lightclients__solomachine__v3__signature_and_data__free_unpacked
                     (Ibc__Lightclients__Solomachine__V3__SignatureAndData *message,
                      ProtobufCAllocator *allocator);
/* Ibc__Lightclients__Solomachine__V3__TimestampedSignatureData methods */
void   ibc__lightclients__solomachine__v3__timestamped_signature_data__init
                     (Ibc__Lightclients__Solomachine__V3__TimestampedSignatureData         *message);
size_t ibc__lightclients__solomachine__v3__timestamped_signature_data__get_packed_size
                     (const Ibc__Lightclients__Solomachine__V3__TimestampedSignatureData   *message);
size_t ibc__lightclients__solomachine__v3__timestamped_signature_data__pack
                     (const Ibc__Lightclients__Solomachine__V3__TimestampedSignatureData   *message,
                      uint8_t             *out);
size_t ibc__lightclients__solomachine__v3__timestamped_signature_data__pack_to_buffer
                     (const Ibc__Lightclients__Solomachine__V3__TimestampedSignatureData   *message,
                      ProtobufCBuffer     *buffer);
Ibc__Lightclients__Solomachine__V3__TimestampedSignatureData *
       ibc__lightclients__solomachine__v3__timestamped_signature_data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ibc__lightclients__solomachine__v3__timestamped_signature_data__free_unpacked
                     (Ibc__Lightclients__Solomachine__V3__TimestampedSignatureData *message,
                      ProtobufCAllocator *allocator);
/* Ibc__Lightclients__Solomachine__V3__SignBytes methods */
void   ibc__lightclients__solomachine__v3__sign_bytes__init
                     (Ibc__Lightclients__Solomachine__V3__SignBytes         *message);
size_t ibc__lightclients__solomachine__v3__sign_bytes__get_packed_size
                     (const Ibc__Lightclients__Solomachine__V3__SignBytes   *message);
size_t ibc__lightclients__solomachine__v3__sign_bytes__pack
                     (const Ibc__Lightclients__Solomachine__V3__SignBytes   *message,
                      uint8_t             *out);
size_t ibc__lightclients__solomachine__v3__sign_bytes__pack_to_buffer
                     (const Ibc__Lightclients__Solomachine__V3__SignBytes   *message,
                      ProtobufCBuffer     *buffer);
Ibc__Lightclients__Solomachine__V3__SignBytes *
       ibc__lightclients__solomachine__v3__sign_bytes__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ibc__lightclients__solomachine__v3__sign_bytes__free_unpacked
                     (Ibc__Lightclients__Solomachine__V3__SignBytes *message,
                      ProtobufCAllocator *allocator);
/* Ibc__Lightclients__Solomachine__V3__HeaderData methods */
void   ibc__lightclients__solomachine__v3__header_data__init
                     (Ibc__Lightclients__Solomachine__V3__HeaderData         *message);
size_t ibc__lightclients__solomachine__v3__header_data__get_packed_size
                     (const Ibc__Lightclients__Solomachine__V3__HeaderData   *message);
size_t ibc__lightclients__solomachine__v3__header_data__pack
                     (const Ibc__Lightclients__Solomachine__V3__HeaderData   *message,
                      uint8_t             *out);
size_t ibc__lightclients__solomachine__v3__header_data__pack_to_buffer
                     (const Ibc__Lightclients__Solomachine__V3__HeaderData   *message,
                      ProtobufCBuffer     *buffer);
Ibc__Lightclients__Solomachine__V3__HeaderData *
       ibc__lightclients__solomachine__v3__header_data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ibc__lightclients__solomachine__v3__header_data__free_unpacked
                     (Ibc__Lightclients__Solomachine__V3__HeaderData *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Ibc__Lightclients__Solomachine__V3__ClientState_Closure)
                 (const Ibc__Lightclients__Solomachine__V3__ClientState *message,
                  void *closure_data);
typedef void (*Ibc__Lightclients__Solomachine__V3__ConsensusState_Closure)
                 (const Ibc__Lightclients__Solomachine__V3__ConsensusState *message,
                  void *closure_data);
typedef void (*Ibc__Lightclients__Solomachine__V3__Header_Closure)
                 (const Ibc__Lightclients__Solomachine__V3__Header *message,
                  void *closure_data);
typedef void (*Ibc__Lightclients__Solomachine__V3__Misbehaviour_Closure)
                 (const Ibc__Lightclients__Solomachine__V3__Misbehaviour *message,
                  void *closure_data);
typedef void (*Ibc__Lightclients__Solomachine__V3__SignatureAndData_Closure)
                 (const Ibc__Lightclients__Solomachine__V3__SignatureAndData *message,
                  void *closure_data);
typedef void (*Ibc__Lightclients__Solomachine__V3__TimestampedSignatureData_Closure)
                 (const Ibc__Lightclients__Solomachine__V3__TimestampedSignatureData *message,
                  void *closure_data);
typedef void (*Ibc__Lightclients__Solomachine__V3__SignBytes_Closure)
                 (const Ibc__Lightclients__Solomachine__V3__SignBytes *message,
                  void *closure_data);
typedef void (*Ibc__Lightclients__Solomachine__V3__HeaderData_Closure)
                 (const Ibc__Lightclients__Solomachine__V3__HeaderData *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor ibc__lightclients__solomachine__v3__client_state__descriptor;
extern const ProtobufCMessageDescriptor ibc__lightclients__solomachine__v3__consensus_state__descriptor;
extern const ProtobufCMessageDescriptor ibc__lightclients__solomachine__v3__header__descriptor;
extern const ProtobufCMessageDescriptor ibc__lightclients__solomachine__v3__misbehaviour__descriptor;
extern const ProtobufCMessageDescriptor ibc__lightclients__solomachine__v3__signature_and_data__descriptor;
extern const ProtobufCMessageDescriptor ibc__lightclients__solomachine__v3__timestamped_signature_data__descriptor;
extern const ProtobufCMessageDescriptor ibc__lightclients__solomachine__v3__sign_bytes__descriptor;
extern const ProtobufCMessageDescriptor ibc__lightclients__solomachine__v3__header_data__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_ibc_2flightclients_2fsolomachine_2fv3_2fsolomachine_2eproto__INCLUDED */
