/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: abstractaccount/v1/params.proto */

#ifndef PROTOBUF_C_abstractaccount_2fv1_2fparams_2eproto__INCLUDED
#define PROTOBUF_C_abstractaccount_2fv1_2fparams_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protobuf-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1005002 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protobuf-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protobuf-c.
#endif

#include "gogoproto/gogo.pb-c.h"

typedef struct Abstractaccount__V1__Params Abstractaccount__V1__Params;


/* --- enums --- */


/* --- messages --- */

/*
 * Params defines the parameters for the abstractaccount module.
 */
struct  Abstractaccount__V1__Params
{
  ProtobufCMessage base;
  /*
   * AllowAllCodeIDs determines whether a Wasm code ID can be used to register
   * AbstractAccounts:
   * - if set to true, any code ID can be used;
   * - if set to false, only code IDs whitelisted in the AllowedCodeIDs list can
   * be used.
   */
  protobuf_c_boolean allow_all_code_ids;
  /*
   * AllowedCodeIDs is the whitelist of Wasm code IDs that can be used to
   * regiseter AbstractAccounts.
   */
  size_t n_allowed_code_ids;
  uint64_t *allowed_code_ids;
  /*
   * MaxGasBefore is the maximum amount of gas that can be consumed by the
   * contract call in the before_tx decorator.
   * Must be greater than zero.
   */
  uint64_t max_gas_before;
  /*
   * MaxGasAfter is the maximum amount of gas that can be consumed by the
   * contract call in the after_tx decorator.
   * Must be greater than zero.
   */
  uint64_t max_gas_after;
};
#define ABSTRACTACCOUNT__V1__PARAMS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&abstractaccount__v1__params__descriptor) \
, 0, 0,NULL, 0, 0 }


/* Abstractaccount__V1__Params methods */
void   abstractaccount__v1__params__init
                     (Abstractaccount__V1__Params         *message);
size_t abstractaccount__v1__params__get_packed_size
                     (const Abstractaccount__V1__Params   *message);
size_t abstractaccount__v1__params__pack
                     (const Abstractaccount__V1__Params   *message,
                      uint8_t             *out);
size_t abstractaccount__v1__params__pack_to_buffer
                     (const Abstractaccount__V1__Params   *message,
                      ProtobufCBuffer     *buffer);
Abstractaccount__V1__Params *
       abstractaccount__v1__params__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   abstractaccount__v1__params__free_unpacked
                     (Abstractaccount__V1__Params *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Abstractaccount__V1__Params_Closure)
                 (const Abstractaccount__V1__Params *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor abstractaccount__v1__params__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_abstractaccount_2fv1_2fparams_2eproto__INCLUDED */
