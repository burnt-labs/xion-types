/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: tendermint/p2p/types.proto */

#ifndef PROTOBUF_C_tendermint_2fp2p_2ftypes_2eproto__INCLUDED
#define PROTOBUF_C_tendermint_2fp2p_2ftypes_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protobuf-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1005002 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protobuf-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protobuf-c.
#endif

#include "gogoproto/gogo.pb-c.h"

typedef struct Tendermint__P2p__NetAddress Tendermint__P2p__NetAddress;
typedef struct Tendermint__P2p__ProtocolVersion Tendermint__P2p__ProtocolVersion;
typedef struct Tendermint__P2p__DefaultNodeInfo Tendermint__P2p__DefaultNodeInfo;
typedef struct Tendermint__P2p__DefaultNodeInfoOther Tendermint__P2p__DefaultNodeInfoOther;


/* --- enums --- */


/* --- messages --- */

struct  Tendermint__P2p__NetAddress
{
  ProtobufCMessage base;
  char *id;
  char *ip;
  uint32_t port;
};
#define TENDERMINT__P2P__NET_ADDRESS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tendermint__p2p__net_address__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0 }


struct  Tendermint__P2p__ProtocolVersion
{
  ProtobufCMessage base;
  uint64_t p2p;
  uint64_t block;
  uint64_t app;
};
#define TENDERMINT__P2P__PROTOCOL_VERSION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tendermint__p2p__protocol_version__descriptor) \
, 0, 0, 0 }


struct  Tendermint__P2p__DefaultNodeInfo
{
  ProtobufCMessage base;
  Tendermint__P2p__ProtocolVersion *protocol_version;
  char *default_node_id;
  char *listen_addr;
  char *network;
  char *version;
  ProtobufCBinaryData channels;
  char *moniker;
  Tendermint__P2p__DefaultNodeInfoOther *other;
};
#define TENDERMINT__P2P__DEFAULT_NODE_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tendermint__p2p__default_node_info__descriptor) \
, NULL, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, {0,NULL}, (char *)protobuf_c_empty_string, NULL }


struct  Tendermint__P2p__DefaultNodeInfoOther
{
  ProtobufCMessage base;
  char *tx_index;
  char *rpc_address;
};
#define TENDERMINT__P2P__DEFAULT_NODE_INFO_OTHER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tendermint__p2p__default_node_info_other__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


/* Tendermint__P2p__NetAddress methods */
void   tendermint__p2p__net_address__init
                     (Tendermint__P2p__NetAddress         *message);
size_t tendermint__p2p__net_address__get_packed_size
                     (const Tendermint__P2p__NetAddress   *message);
size_t tendermint__p2p__net_address__pack
                     (const Tendermint__P2p__NetAddress   *message,
                      uint8_t             *out);
size_t tendermint__p2p__net_address__pack_to_buffer
                     (const Tendermint__P2p__NetAddress   *message,
                      ProtobufCBuffer     *buffer);
Tendermint__P2p__NetAddress *
       tendermint__p2p__net_address__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tendermint__p2p__net_address__free_unpacked
                     (Tendermint__P2p__NetAddress *message,
                      ProtobufCAllocator *allocator);
/* Tendermint__P2p__ProtocolVersion methods */
void   tendermint__p2p__protocol_version__init
                     (Tendermint__P2p__ProtocolVersion         *message);
size_t tendermint__p2p__protocol_version__get_packed_size
                     (const Tendermint__P2p__ProtocolVersion   *message);
size_t tendermint__p2p__protocol_version__pack
                     (const Tendermint__P2p__ProtocolVersion   *message,
                      uint8_t             *out);
size_t tendermint__p2p__protocol_version__pack_to_buffer
                     (const Tendermint__P2p__ProtocolVersion   *message,
                      ProtobufCBuffer     *buffer);
Tendermint__P2p__ProtocolVersion *
       tendermint__p2p__protocol_version__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tendermint__p2p__protocol_version__free_unpacked
                     (Tendermint__P2p__ProtocolVersion *message,
                      ProtobufCAllocator *allocator);
/* Tendermint__P2p__DefaultNodeInfo methods */
void   tendermint__p2p__default_node_info__init
                     (Tendermint__P2p__DefaultNodeInfo         *message);
size_t tendermint__p2p__default_node_info__get_packed_size
                     (const Tendermint__P2p__DefaultNodeInfo   *message);
size_t tendermint__p2p__default_node_info__pack
                     (const Tendermint__P2p__DefaultNodeInfo   *message,
                      uint8_t             *out);
size_t tendermint__p2p__default_node_info__pack_to_buffer
                     (const Tendermint__P2p__DefaultNodeInfo   *message,
                      ProtobufCBuffer     *buffer);
Tendermint__P2p__DefaultNodeInfo *
       tendermint__p2p__default_node_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tendermint__p2p__default_node_info__free_unpacked
                     (Tendermint__P2p__DefaultNodeInfo *message,
                      ProtobufCAllocator *allocator);
/* Tendermint__P2p__DefaultNodeInfoOther methods */
void   tendermint__p2p__default_node_info_other__init
                     (Tendermint__P2p__DefaultNodeInfoOther         *message);
size_t tendermint__p2p__default_node_info_other__get_packed_size
                     (const Tendermint__P2p__DefaultNodeInfoOther   *message);
size_t tendermint__p2p__default_node_info_other__pack
                     (const Tendermint__P2p__DefaultNodeInfoOther   *message,
                      uint8_t             *out);
size_t tendermint__p2p__default_node_info_other__pack_to_buffer
                     (const Tendermint__P2p__DefaultNodeInfoOther   *message,
                      ProtobufCBuffer     *buffer);
Tendermint__P2p__DefaultNodeInfoOther *
       tendermint__p2p__default_node_info_other__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tendermint__p2p__default_node_info_other__free_unpacked
                     (Tendermint__P2p__DefaultNodeInfoOther *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Tendermint__P2p__NetAddress_Closure)
                 (const Tendermint__P2p__NetAddress *message,
                  void *closure_data);
typedef void (*Tendermint__P2p__ProtocolVersion_Closure)
                 (const Tendermint__P2p__ProtocolVersion *message,
                  void *closure_data);
typedef void (*Tendermint__P2p__DefaultNodeInfo_Closure)
                 (const Tendermint__P2p__DefaultNodeInfo *message,
                  void *closure_data);
typedef void (*Tendermint__P2p__DefaultNodeInfoOther_Closure)
                 (const Tendermint__P2p__DefaultNodeInfoOther *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor tendermint__p2p__net_address__descriptor;
extern const ProtobufCMessageDescriptor tendermint__p2p__protocol_version__descriptor;
extern const ProtobufCMessageDescriptor tendermint__p2p__default_node_info__descriptor;
extern const ProtobufCMessageDescriptor tendermint__p2p__default_node_info_other__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_tendermint_2fp2p_2ftypes_2eproto__INCLUDED */
