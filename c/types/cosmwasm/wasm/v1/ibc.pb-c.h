/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: cosmwasm/wasm/v1/ibc.proto */

#ifndef PROTOBUF_C_cosmwasm_2fwasm_2fv1_2fibc_2eproto__INCLUDED
#define PROTOBUF_C_cosmwasm_2fwasm_2fv1_2fibc_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protobuf-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1005002 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protobuf-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protobuf-c.
#endif

#include "gogoproto/gogo.pb-c.h"

typedef struct Cosmwasm__Wasm__V1__MsgIBCSend Cosmwasm__Wasm__V1__MsgIBCSend;
typedef struct Cosmwasm__Wasm__V1__MsgIBCSendResponse Cosmwasm__Wasm__V1__MsgIBCSendResponse;
typedef struct Cosmwasm__Wasm__V1__MsgIBCWriteAcknowledgementResponse Cosmwasm__Wasm__V1__MsgIBCWriteAcknowledgementResponse;
typedef struct Cosmwasm__Wasm__V1__MsgIBCCloseChannel Cosmwasm__Wasm__V1__MsgIBCCloseChannel;


/* --- enums --- */


/* --- messages --- */

/*
 * MsgIBCSend
 */
struct  Cosmwasm__Wasm__V1__MsgIBCSend
{
  ProtobufCMessage base;
  /*
   * the channel by which the packet will be sent
   */
  char *channel;
  /*
   * Timeout height relative to the current block height.
   * The timeout is disabled when set to 0.
   */
  uint64_t timeout_height;
  /*
   * Timeout timestamp (in nanoseconds) relative to the current block timestamp.
   * The timeout is disabled when set to 0.
   */
  uint64_t timeout_timestamp;
  /*
   * Data is the payload to transfer. We must not make assumption what format or
   * content is in here.
   */
  ProtobufCBinaryData data;
};
#define COSMWASM__WASM__V1__MSG_IBCSEND__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmwasm__wasm__v1__msg_ibcsend__descriptor) \
, (char *)protobuf_c_empty_string, 0, 0, {0,NULL} }


/*
 * MsgIBCSendResponse
 */
struct  Cosmwasm__Wasm__V1__MsgIBCSendResponse
{
  ProtobufCMessage base;
  /*
   * Sequence number of the IBC packet sent
   */
  uint64_t sequence;
};
#define COSMWASM__WASM__V1__MSG_IBCSEND_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmwasm__wasm__v1__msg_ibcsend_response__descriptor) \
, 0 }


/*
 * MsgIBCWriteAcknowledgementResponse
 */
struct  Cosmwasm__Wasm__V1__MsgIBCWriteAcknowledgementResponse
{
  ProtobufCMessage base;
};
#define COSMWASM__WASM__V1__MSG_IBCWRITE_ACKNOWLEDGEMENT_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmwasm__wasm__v1__msg_ibcwrite_acknowledgement_response__descriptor) \
 }


/*
 * MsgIBCCloseChannel port and channel need to be owned by the contract
 */
struct  Cosmwasm__Wasm__V1__MsgIBCCloseChannel
{
  ProtobufCMessage base;
  char *channel;
};
#define COSMWASM__WASM__V1__MSG_IBCCLOSE_CHANNEL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmwasm__wasm__v1__msg_ibcclose_channel__descriptor) \
, (char *)protobuf_c_empty_string }


/* Cosmwasm__Wasm__V1__MsgIBCSend methods */
void   cosmwasm__wasm__v1__msg_ibcsend__init
                     (Cosmwasm__Wasm__V1__MsgIBCSend         *message);
size_t cosmwasm__wasm__v1__msg_ibcsend__get_packed_size
                     (const Cosmwasm__Wasm__V1__MsgIBCSend   *message);
size_t cosmwasm__wasm__v1__msg_ibcsend__pack
                     (const Cosmwasm__Wasm__V1__MsgIBCSend   *message,
                      uint8_t             *out);
size_t cosmwasm__wasm__v1__msg_ibcsend__pack_to_buffer
                     (const Cosmwasm__Wasm__V1__MsgIBCSend   *message,
                      ProtobufCBuffer     *buffer);
Cosmwasm__Wasm__V1__MsgIBCSend *
       cosmwasm__wasm__v1__msg_ibcsend__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmwasm__wasm__v1__msg_ibcsend__free_unpacked
                     (Cosmwasm__Wasm__V1__MsgIBCSend *message,
                      ProtobufCAllocator *allocator);
/* Cosmwasm__Wasm__V1__MsgIBCSendResponse methods */
void   cosmwasm__wasm__v1__msg_ibcsend_response__init
                     (Cosmwasm__Wasm__V1__MsgIBCSendResponse         *message);
size_t cosmwasm__wasm__v1__msg_ibcsend_response__get_packed_size
                     (const Cosmwasm__Wasm__V1__MsgIBCSendResponse   *message);
size_t cosmwasm__wasm__v1__msg_ibcsend_response__pack
                     (const Cosmwasm__Wasm__V1__MsgIBCSendResponse   *message,
                      uint8_t             *out);
size_t cosmwasm__wasm__v1__msg_ibcsend_response__pack_to_buffer
                     (const Cosmwasm__Wasm__V1__MsgIBCSendResponse   *message,
                      ProtobufCBuffer     *buffer);
Cosmwasm__Wasm__V1__MsgIBCSendResponse *
       cosmwasm__wasm__v1__msg_ibcsend_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmwasm__wasm__v1__msg_ibcsend_response__free_unpacked
                     (Cosmwasm__Wasm__V1__MsgIBCSendResponse *message,
                      ProtobufCAllocator *allocator);
/* Cosmwasm__Wasm__V1__MsgIBCWriteAcknowledgementResponse methods */
void   cosmwasm__wasm__v1__msg_ibcwrite_acknowledgement_response__init
                     (Cosmwasm__Wasm__V1__MsgIBCWriteAcknowledgementResponse         *message);
size_t cosmwasm__wasm__v1__msg_ibcwrite_acknowledgement_response__get_packed_size
                     (const Cosmwasm__Wasm__V1__MsgIBCWriteAcknowledgementResponse   *message);
size_t cosmwasm__wasm__v1__msg_ibcwrite_acknowledgement_response__pack
                     (const Cosmwasm__Wasm__V1__MsgIBCWriteAcknowledgementResponse   *message,
                      uint8_t             *out);
size_t cosmwasm__wasm__v1__msg_ibcwrite_acknowledgement_response__pack_to_buffer
                     (const Cosmwasm__Wasm__V1__MsgIBCWriteAcknowledgementResponse   *message,
                      ProtobufCBuffer     *buffer);
Cosmwasm__Wasm__V1__MsgIBCWriteAcknowledgementResponse *
       cosmwasm__wasm__v1__msg_ibcwrite_acknowledgement_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmwasm__wasm__v1__msg_ibcwrite_acknowledgement_response__free_unpacked
                     (Cosmwasm__Wasm__V1__MsgIBCWriteAcknowledgementResponse *message,
                      ProtobufCAllocator *allocator);
/* Cosmwasm__Wasm__V1__MsgIBCCloseChannel methods */
void   cosmwasm__wasm__v1__msg_ibcclose_channel__init
                     (Cosmwasm__Wasm__V1__MsgIBCCloseChannel         *message);
size_t cosmwasm__wasm__v1__msg_ibcclose_channel__get_packed_size
                     (const Cosmwasm__Wasm__V1__MsgIBCCloseChannel   *message);
size_t cosmwasm__wasm__v1__msg_ibcclose_channel__pack
                     (const Cosmwasm__Wasm__V1__MsgIBCCloseChannel   *message,
                      uint8_t             *out);
size_t cosmwasm__wasm__v1__msg_ibcclose_channel__pack_to_buffer
                     (const Cosmwasm__Wasm__V1__MsgIBCCloseChannel   *message,
                      ProtobufCBuffer     *buffer);
Cosmwasm__Wasm__V1__MsgIBCCloseChannel *
       cosmwasm__wasm__v1__msg_ibcclose_channel__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmwasm__wasm__v1__msg_ibcclose_channel__free_unpacked
                     (Cosmwasm__Wasm__V1__MsgIBCCloseChannel *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Cosmwasm__Wasm__V1__MsgIBCSend_Closure)
                 (const Cosmwasm__Wasm__V1__MsgIBCSend *message,
                  void *closure_data);
typedef void (*Cosmwasm__Wasm__V1__MsgIBCSendResponse_Closure)
                 (const Cosmwasm__Wasm__V1__MsgIBCSendResponse *message,
                  void *closure_data);
typedef void (*Cosmwasm__Wasm__V1__MsgIBCWriteAcknowledgementResponse_Closure)
                 (const Cosmwasm__Wasm__V1__MsgIBCWriteAcknowledgementResponse *message,
                  void *closure_data);
typedef void (*Cosmwasm__Wasm__V1__MsgIBCCloseChannel_Closure)
                 (const Cosmwasm__Wasm__V1__MsgIBCCloseChannel *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor cosmwasm__wasm__v1__msg_ibcsend__descriptor;
extern const ProtobufCMessageDescriptor cosmwasm__wasm__v1__msg_ibcsend_response__descriptor;
extern const ProtobufCMessageDescriptor cosmwasm__wasm__v1__msg_ibcwrite_acknowledgement_response__descriptor;
extern const ProtobufCMessageDescriptor cosmwasm__wasm__v1__msg_ibcclose_channel__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_cosmwasm_2fwasm_2fv1_2fibc_2eproto__INCLUDED */
