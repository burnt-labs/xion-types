/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: cosmwasm/wasm/v1/proposal_legacy.proto */

#ifndef PROTOBUF_C_cosmwasm_2fwasm_2fv1_2fproposal_5flegacy_2eproto__INCLUDED
#define PROTOBUF_C_cosmwasm_2fwasm_2fv1_2fproposal_5flegacy_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protobuf-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1005002 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protobuf-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protobuf-c.
#endif

#include "gogoproto/gogo.pb-c.h"
#include "cosmos_proto/cosmos.pb-c.h"
#include "cosmos/base/v1beta1/coin.pb-c.h"
#include "cosmwasm/wasm/v1/types.pb-c.h"
#include "amino/amino.pb-c.h"

typedef struct Cosmwasm__Wasm__V1__StoreCodeProposal Cosmwasm__Wasm__V1__StoreCodeProposal;
typedef struct Cosmwasm__Wasm__V1__InstantiateContractProposal Cosmwasm__Wasm__V1__InstantiateContractProposal;
typedef struct Cosmwasm__Wasm__V1__InstantiateContract2Proposal Cosmwasm__Wasm__V1__InstantiateContract2Proposal;
typedef struct Cosmwasm__Wasm__V1__MigrateContractProposal Cosmwasm__Wasm__V1__MigrateContractProposal;
typedef struct Cosmwasm__Wasm__V1__SudoContractProposal Cosmwasm__Wasm__V1__SudoContractProposal;
typedef struct Cosmwasm__Wasm__V1__ExecuteContractProposal Cosmwasm__Wasm__V1__ExecuteContractProposal;
typedef struct Cosmwasm__Wasm__V1__UpdateAdminProposal Cosmwasm__Wasm__V1__UpdateAdminProposal;
typedef struct Cosmwasm__Wasm__V1__ClearAdminProposal Cosmwasm__Wasm__V1__ClearAdminProposal;
typedef struct Cosmwasm__Wasm__V1__PinCodesProposal Cosmwasm__Wasm__V1__PinCodesProposal;
typedef struct Cosmwasm__Wasm__V1__UnpinCodesProposal Cosmwasm__Wasm__V1__UnpinCodesProposal;
typedef struct Cosmwasm__Wasm__V1__AccessConfigUpdate Cosmwasm__Wasm__V1__AccessConfigUpdate;
typedef struct Cosmwasm__Wasm__V1__UpdateInstantiateConfigProposal Cosmwasm__Wasm__V1__UpdateInstantiateConfigProposal;
typedef struct Cosmwasm__Wasm__V1__StoreAndInstantiateContractProposal Cosmwasm__Wasm__V1__StoreAndInstantiateContractProposal;


/* --- enums --- */


/* --- messages --- */

/*
 * Deprecated: Do not use. Since wasmd v0.40, there is no longer a need for
 * an explicit StoreCodeProposal. To submit WASM code to the system,
 * a simple MsgStoreCode can be invoked from the x/gov module via
 * a v1 governance proposal.
 */
struct  Cosmwasm__Wasm__V1__StoreCodeProposal
{
  ProtobufCMessage base;
  /*
   * Title is a short summary
   */
  char *title;
  /*
   * Description is a human readable text
   */
  char *description;
  /*
   * RunAs is the address that is passed to the contract's environment as sender
   */
  char *run_as;
  /*
   * WASMByteCode can be raw or gzip compressed
   */
  ProtobufCBinaryData wasm_byte_code;
  /*
   * InstantiatePermission to apply on contract creation, optional
   */
  Cosmwasm__Wasm__V1__AccessConfig *instantiate_permission;
  /*
   * UnpinCode code on upload, optional
   */
  protobuf_c_boolean unpin_code;
  /*
   * Source is the URL where the code is hosted
   */
  char *source;
  /*
   * Builder is the docker image used to build the code deterministically, used
   * for smart contract verification
   */
  char *builder;
  /*
   * CodeHash is the SHA256 sum of the code outputted by builder, used for smart
   * contract verification
   */
  ProtobufCBinaryData code_hash;
};
#define COSMWASM__WASM__V1__STORE_CODE_PROPOSAL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmwasm__wasm__v1__store_code_proposal__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, {0,NULL}, NULL, 0, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, {0,NULL} }


/*
 * Deprecated: Do not use. Since wasmd v0.40, there is no longer a need for
 * an explicit InstantiateContractProposal. To instantiate a contract,
 * a simple MsgInstantiateContract can be invoked from the x/gov module via
 * a v1 governance proposal.
 */
struct  Cosmwasm__Wasm__V1__InstantiateContractProposal
{
  ProtobufCMessage base;
  /*
   * Title is a short summary
   */
  char *title;
  /*
   * Description is a human readable text
   */
  char *description;
  /*
   * RunAs is the address that is passed to the contract's environment as sender
   */
  char *run_as;
  /*
   * Admin is an optional address that can execute migrations
   */
  char *admin;
  /*
   * CodeID is the reference to the stored WASM code
   */
  uint64_t code_id;
  /*
   * Label is optional metadata to be stored with a contract instance.
   */
  char *label;
  /*
   * Msg json encoded message to be passed to the contract on instantiation
   */
  ProtobufCBinaryData msg;
  /*
   * Funds coins that are transferred to the contract on instantiation
   */
  size_t n_funds;
  Cosmos__Base__V1beta1__Coin **funds;
};
#define COSMWASM__WASM__V1__INSTANTIATE_CONTRACT_PROPOSAL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmwasm__wasm__v1__instantiate_contract_proposal__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0, (char *)protobuf_c_empty_string, {0,NULL}, 0,NULL }


/*
 * Deprecated: Do not use. Since wasmd v0.40, there is no longer a need for
 * an explicit InstantiateContract2Proposal. To instantiate contract 2,
 * a simple MsgInstantiateContract2 can be invoked from the x/gov module via
 * a v1 governance proposal.
 */
struct  Cosmwasm__Wasm__V1__InstantiateContract2Proposal
{
  ProtobufCMessage base;
  /*
   * Title is a short summary
   */
  char *title;
  /*
   * Description is a human readable text
   */
  char *description;
  /*
   * RunAs is the address that is passed to the contract's environment as sender
   */
  char *run_as;
  /*
   * Admin is an optional address that can execute migrations
   */
  char *admin;
  /*
   * CodeID is the reference to the stored WASM code
   */
  uint64_t code_id;
  /*
   * Label is optional metadata to be stored with a contract instance.
   */
  char *label;
  /*
   * Msg json encode message to be passed to the contract on instantiation
   */
  ProtobufCBinaryData msg;
  /*
   * Funds coins that are transferred to the contract on instantiation
   */
  size_t n_funds;
  Cosmos__Base__V1beta1__Coin **funds;
  /*
   * Salt is an arbitrary value provided by the sender. Size can be 1 to 64.
   */
  ProtobufCBinaryData salt;
  /*
   * FixMsg include the msg value into the hash for the predictable address.
   * Default is false
   */
  protobuf_c_boolean fix_msg;
};
#define COSMWASM__WASM__V1__INSTANTIATE_CONTRACT2_PROPOSAL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmwasm__wasm__v1__instantiate_contract2_proposal__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0, (char *)protobuf_c_empty_string, {0,NULL}, 0,NULL, {0,NULL}, 0 }


/*
 * Deprecated: Do not use. Since wasmd v0.40, there is no longer a need for
 * an explicit MigrateContractProposal. To migrate a contract,
 * a simple MsgMigrateContract can be invoked from the x/gov module via
 * a v1 governance proposal.
 */
struct  Cosmwasm__Wasm__V1__MigrateContractProposal
{
  ProtobufCMessage base;
  /*
   * Title is a short summary
   */
  char *title;
  /*
   * Description is a human readable text
   */
  /*
   * Note: skipping 3 as this was previously used for unneeded run_as
   */
  char *description;
  /*
   * Contract is the address of the smart contract
   */
  char *contract;
  /*
   * CodeID references the new WASM code
   */
  uint64_t code_id;
  /*
   * Msg json encoded message to be passed to the contract on migration
   */
  ProtobufCBinaryData msg;
};
#define COSMWASM__WASM__V1__MIGRATE_CONTRACT_PROPOSAL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmwasm__wasm__v1__migrate_contract_proposal__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0, {0,NULL} }


/*
 * Deprecated: Do not use. Since wasmd v0.40, there is no longer a need for
 * an explicit SudoContractProposal. To call sudo on a contract,
 * a simple MsgSudoContract can be invoked from the x/gov module via
 * a v1 governance proposal.
 */
struct  Cosmwasm__Wasm__V1__SudoContractProposal
{
  ProtobufCMessage base;
  /*
   * Title is a short summary
   */
  char *title;
  /*
   * Description is a human readable text
   */
  char *description;
  /*
   * Contract is the address of the smart contract
   */
  char *contract;
  /*
   * Msg json encoded message to be passed to the contract as sudo
   */
  ProtobufCBinaryData msg;
};
#define COSMWASM__WASM__V1__SUDO_CONTRACT_PROPOSAL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmwasm__wasm__v1__sudo_contract_proposal__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, {0,NULL} }


/*
 * Deprecated: Do not use. Since wasmd v0.40, there is no longer a need for
 * an explicit ExecuteContractProposal. To call execute on a contract,
 * a simple MsgExecuteContract can be invoked from the x/gov module via
 * a v1 governance proposal.
 */
struct  Cosmwasm__Wasm__V1__ExecuteContractProposal
{
  ProtobufCMessage base;
  /*
   * Title is a short summary
   */
  char *title;
  /*
   * Description is a human readable text
   */
  char *description;
  /*
   * RunAs is the address that is passed to the contract's environment as sender
   */
  char *run_as;
  /*
   * Contract is the address of the smart contract
   */
  char *contract;
  /*
   * Msg json encoded message to be passed to the contract as execute
   */
  ProtobufCBinaryData msg;
  /*
   * Funds coins that are transferred to the contract on instantiation
   */
  size_t n_funds;
  Cosmos__Base__V1beta1__Coin **funds;
};
#define COSMWASM__WASM__V1__EXECUTE_CONTRACT_PROPOSAL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmwasm__wasm__v1__execute_contract_proposal__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, {0,NULL}, 0,NULL }


/*
 * Deprecated: Do not use. Since wasmd v0.40, there is no longer a need for
 * an explicit UpdateAdminProposal. To set an admin for a contract,
 * a simple MsgUpdateAdmin can be invoked from the x/gov module via
 * a v1 governance proposal.
 */
struct  Cosmwasm__Wasm__V1__UpdateAdminProposal
{
  ProtobufCMessage base;
  /*
   * Title is a short summary
   */
  char *title;
  /*
   * Description is a human readable text
   */
  char *description;
  /*
   * NewAdmin address to be set
   */
  char *new_admin;
  /*
   * Contract is the address of the smart contract
   */
  char *contract;
};
#define COSMWASM__WASM__V1__UPDATE_ADMIN_PROPOSAL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmwasm__wasm__v1__update_admin_proposal__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


/*
 * Deprecated: Do not use. Since wasmd v0.40, there is no longer a need for
 * an explicit ClearAdminProposal. To clear the admin of a contract,
 * a simple MsgClearAdmin can be invoked from the x/gov module via
 * a v1 governance proposal.
 */
struct  Cosmwasm__Wasm__V1__ClearAdminProposal
{
  ProtobufCMessage base;
  /*
   * Title is a short summary
   */
  char *title;
  /*
   * Description is a human readable text
   */
  char *description;
  /*
   * Contract is the address of the smart contract
   */
  char *contract;
};
#define COSMWASM__WASM__V1__CLEAR_ADMIN_PROPOSAL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmwasm__wasm__v1__clear_admin_proposal__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


/*
 * Deprecated: Do not use. Since wasmd v0.40, there is no longer a need for
 * an explicit PinCodesProposal. To pin a set of code ids in the wasmvm
 * cache, a simple MsgPinCodes can be invoked from the x/gov module via
 * a v1 governance proposal.
 */
struct  Cosmwasm__Wasm__V1__PinCodesProposal
{
  ProtobufCMessage base;
  /*
   * Title is a short summary
   */
  char *title;
  /*
   * Description is a human readable text
   */
  char *description;
  /*
   * CodeIDs references the new WASM codes
   */
  size_t n_code_ids;
  uint64_t *code_ids;
};
#define COSMWASM__WASM__V1__PIN_CODES_PROPOSAL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmwasm__wasm__v1__pin_codes_proposal__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0,NULL }


/*
 * Deprecated: Do not use. Since wasmd v0.40, there is no longer a need for
 * an explicit UnpinCodesProposal. To unpin a set of code ids in the wasmvm
 * cache, a simple MsgUnpinCodes can be invoked from the x/gov module via
 * a v1 governance proposal.
 */
struct  Cosmwasm__Wasm__V1__UnpinCodesProposal
{
  ProtobufCMessage base;
  /*
   * Title is a short summary
   */
  char *title;
  /*
   * Description is a human readable text
   */
  char *description;
  /*
   * CodeIDs references the WASM codes
   */
  size_t n_code_ids;
  uint64_t *code_ids;
};
#define COSMWASM__WASM__V1__UNPIN_CODES_PROPOSAL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmwasm__wasm__v1__unpin_codes_proposal__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0,NULL }


/*
 * AccessConfigUpdate contains the code id and the access config to be
 * applied.
 */
struct  Cosmwasm__Wasm__V1__AccessConfigUpdate
{
  ProtobufCMessage base;
  /*
   * CodeID is the reference to the stored WASM code to be updated
   */
  uint64_t code_id;
  /*
   * InstantiatePermission to apply to the set of code ids
   */
  Cosmwasm__Wasm__V1__AccessConfig *instantiate_permission;
};
#define COSMWASM__WASM__V1__ACCESS_CONFIG_UPDATE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmwasm__wasm__v1__access_config_update__descriptor) \
, 0, NULL }


/*
 * Deprecated: Do not use. Since wasmd v0.40, there is no longer a need for
 * an explicit UpdateInstantiateConfigProposal. To update instantiate config
 * to a set of code ids, a simple MsgUpdateInstantiateConfig can be invoked from
 * the x/gov module via a v1 governance proposal.
 */
struct  Cosmwasm__Wasm__V1__UpdateInstantiateConfigProposal
{
  ProtobufCMessage base;
  /*
   * Title is a short summary
   */
  char *title;
  /*
   * Description is a human readable text
   */
  char *description;
  /*
   * AccessConfigUpdates contains the list of code ids and the access config
   * to be applied.
   */
  size_t n_access_config_updates;
  Cosmwasm__Wasm__V1__AccessConfigUpdate **access_config_updates;
};
#define COSMWASM__WASM__V1__UPDATE_INSTANTIATE_CONFIG_PROPOSAL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmwasm__wasm__v1__update_instantiate_config_proposal__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0,NULL }


/*
 * Deprecated: Do not use. Since wasmd v0.40, there is no longer a need for
 * an explicit StoreAndInstantiateContractProposal. To store and instantiate
 * the contract, a simple MsgStoreAndInstantiateContract can be invoked from
 * the x/gov module via a v1 governance proposal.
 */
struct  Cosmwasm__Wasm__V1__StoreAndInstantiateContractProposal
{
  ProtobufCMessage base;
  /*
   * Title is a short summary
   */
  char *title;
  /*
   * Description is a human readable text
   */
  char *description;
  /*
   * RunAs is the address that is passed to the contract's environment as sender
   */
  char *run_as;
  /*
   * WASMByteCode can be raw or gzip compressed
   */
  ProtobufCBinaryData wasm_byte_code;
  /*
   * InstantiatePermission to apply on contract creation, optional
   */
  Cosmwasm__Wasm__V1__AccessConfig *instantiate_permission;
  /*
   * UnpinCode code on upload, optional
   */
  protobuf_c_boolean unpin_code;
  /*
   * Admin is an optional address that can execute migrations
   */
  char *admin;
  /*
   * Label is optional metadata to be stored with a contract instance.
   */
  char *label;
  /*
   * Msg json encoded message to be passed to the contract on instantiation
   */
  ProtobufCBinaryData msg;
  /*
   * Funds coins that are transferred to the contract on instantiation
   */
  size_t n_funds;
  Cosmos__Base__V1beta1__Coin **funds;
  /*
   * Source is the URL where the code is hosted
   */
  char *source;
  /*
   * Builder is the docker image used to build the code deterministically, used
   * for smart contract verification
   */
  char *builder;
  /*
   * CodeHash is the SHA256 sum of the code outputted by builder, used for smart
   * contract verification
   */
  ProtobufCBinaryData code_hash;
};
#define COSMWASM__WASM__V1__STORE_AND_INSTANTIATE_CONTRACT_PROPOSAL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmwasm__wasm__v1__store_and_instantiate_contract_proposal__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, {0,NULL}, NULL, 0, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, {0,NULL}, 0,NULL, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, {0,NULL} }


/* Cosmwasm__Wasm__V1__StoreCodeProposal methods */
void   cosmwasm__wasm__v1__store_code_proposal__init
                     (Cosmwasm__Wasm__V1__StoreCodeProposal         *message);
size_t cosmwasm__wasm__v1__store_code_proposal__get_packed_size
                     (const Cosmwasm__Wasm__V1__StoreCodeProposal   *message);
size_t cosmwasm__wasm__v1__store_code_proposal__pack
                     (const Cosmwasm__Wasm__V1__StoreCodeProposal   *message,
                      uint8_t             *out);
size_t cosmwasm__wasm__v1__store_code_proposal__pack_to_buffer
                     (const Cosmwasm__Wasm__V1__StoreCodeProposal   *message,
                      ProtobufCBuffer     *buffer);
Cosmwasm__Wasm__V1__StoreCodeProposal *
       cosmwasm__wasm__v1__store_code_proposal__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmwasm__wasm__v1__store_code_proposal__free_unpacked
                     (Cosmwasm__Wasm__V1__StoreCodeProposal *message,
                      ProtobufCAllocator *allocator);
/* Cosmwasm__Wasm__V1__InstantiateContractProposal methods */
void   cosmwasm__wasm__v1__instantiate_contract_proposal__init
                     (Cosmwasm__Wasm__V1__InstantiateContractProposal         *message);
size_t cosmwasm__wasm__v1__instantiate_contract_proposal__get_packed_size
                     (const Cosmwasm__Wasm__V1__InstantiateContractProposal   *message);
size_t cosmwasm__wasm__v1__instantiate_contract_proposal__pack
                     (const Cosmwasm__Wasm__V1__InstantiateContractProposal   *message,
                      uint8_t             *out);
size_t cosmwasm__wasm__v1__instantiate_contract_proposal__pack_to_buffer
                     (const Cosmwasm__Wasm__V1__InstantiateContractProposal   *message,
                      ProtobufCBuffer     *buffer);
Cosmwasm__Wasm__V1__InstantiateContractProposal *
       cosmwasm__wasm__v1__instantiate_contract_proposal__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmwasm__wasm__v1__instantiate_contract_proposal__free_unpacked
                     (Cosmwasm__Wasm__V1__InstantiateContractProposal *message,
                      ProtobufCAllocator *allocator);
/* Cosmwasm__Wasm__V1__InstantiateContract2Proposal methods */
void   cosmwasm__wasm__v1__instantiate_contract2_proposal__init
                     (Cosmwasm__Wasm__V1__InstantiateContract2Proposal         *message);
size_t cosmwasm__wasm__v1__instantiate_contract2_proposal__get_packed_size
                     (const Cosmwasm__Wasm__V1__InstantiateContract2Proposal   *message);
size_t cosmwasm__wasm__v1__instantiate_contract2_proposal__pack
                     (const Cosmwasm__Wasm__V1__InstantiateContract2Proposal   *message,
                      uint8_t             *out);
size_t cosmwasm__wasm__v1__instantiate_contract2_proposal__pack_to_buffer
                     (const Cosmwasm__Wasm__V1__InstantiateContract2Proposal   *message,
                      ProtobufCBuffer     *buffer);
Cosmwasm__Wasm__V1__InstantiateContract2Proposal *
       cosmwasm__wasm__v1__instantiate_contract2_proposal__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmwasm__wasm__v1__instantiate_contract2_proposal__free_unpacked
                     (Cosmwasm__Wasm__V1__InstantiateContract2Proposal *message,
                      ProtobufCAllocator *allocator);
/* Cosmwasm__Wasm__V1__MigrateContractProposal methods */
void   cosmwasm__wasm__v1__migrate_contract_proposal__init
                     (Cosmwasm__Wasm__V1__MigrateContractProposal         *message);
size_t cosmwasm__wasm__v1__migrate_contract_proposal__get_packed_size
                     (const Cosmwasm__Wasm__V1__MigrateContractProposal   *message);
size_t cosmwasm__wasm__v1__migrate_contract_proposal__pack
                     (const Cosmwasm__Wasm__V1__MigrateContractProposal   *message,
                      uint8_t             *out);
size_t cosmwasm__wasm__v1__migrate_contract_proposal__pack_to_buffer
                     (const Cosmwasm__Wasm__V1__MigrateContractProposal   *message,
                      ProtobufCBuffer     *buffer);
Cosmwasm__Wasm__V1__MigrateContractProposal *
       cosmwasm__wasm__v1__migrate_contract_proposal__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmwasm__wasm__v1__migrate_contract_proposal__free_unpacked
                     (Cosmwasm__Wasm__V1__MigrateContractProposal *message,
                      ProtobufCAllocator *allocator);
/* Cosmwasm__Wasm__V1__SudoContractProposal methods */
void   cosmwasm__wasm__v1__sudo_contract_proposal__init
                     (Cosmwasm__Wasm__V1__SudoContractProposal         *message);
size_t cosmwasm__wasm__v1__sudo_contract_proposal__get_packed_size
                     (const Cosmwasm__Wasm__V1__SudoContractProposal   *message);
size_t cosmwasm__wasm__v1__sudo_contract_proposal__pack
                     (const Cosmwasm__Wasm__V1__SudoContractProposal   *message,
                      uint8_t             *out);
size_t cosmwasm__wasm__v1__sudo_contract_proposal__pack_to_buffer
                     (const Cosmwasm__Wasm__V1__SudoContractProposal   *message,
                      ProtobufCBuffer     *buffer);
Cosmwasm__Wasm__V1__SudoContractProposal *
       cosmwasm__wasm__v1__sudo_contract_proposal__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmwasm__wasm__v1__sudo_contract_proposal__free_unpacked
                     (Cosmwasm__Wasm__V1__SudoContractProposal *message,
                      ProtobufCAllocator *allocator);
/* Cosmwasm__Wasm__V1__ExecuteContractProposal methods */
void   cosmwasm__wasm__v1__execute_contract_proposal__init
                     (Cosmwasm__Wasm__V1__ExecuteContractProposal         *message);
size_t cosmwasm__wasm__v1__execute_contract_proposal__get_packed_size
                     (const Cosmwasm__Wasm__V1__ExecuteContractProposal   *message);
size_t cosmwasm__wasm__v1__execute_contract_proposal__pack
                     (const Cosmwasm__Wasm__V1__ExecuteContractProposal   *message,
                      uint8_t             *out);
size_t cosmwasm__wasm__v1__execute_contract_proposal__pack_to_buffer
                     (const Cosmwasm__Wasm__V1__ExecuteContractProposal   *message,
                      ProtobufCBuffer     *buffer);
Cosmwasm__Wasm__V1__ExecuteContractProposal *
       cosmwasm__wasm__v1__execute_contract_proposal__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmwasm__wasm__v1__execute_contract_proposal__free_unpacked
                     (Cosmwasm__Wasm__V1__ExecuteContractProposal *message,
                      ProtobufCAllocator *allocator);
/* Cosmwasm__Wasm__V1__UpdateAdminProposal methods */
void   cosmwasm__wasm__v1__update_admin_proposal__init
                     (Cosmwasm__Wasm__V1__UpdateAdminProposal         *message);
size_t cosmwasm__wasm__v1__update_admin_proposal__get_packed_size
                     (const Cosmwasm__Wasm__V1__UpdateAdminProposal   *message);
size_t cosmwasm__wasm__v1__update_admin_proposal__pack
                     (const Cosmwasm__Wasm__V1__UpdateAdminProposal   *message,
                      uint8_t             *out);
size_t cosmwasm__wasm__v1__update_admin_proposal__pack_to_buffer
                     (const Cosmwasm__Wasm__V1__UpdateAdminProposal   *message,
                      ProtobufCBuffer     *buffer);
Cosmwasm__Wasm__V1__UpdateAdminProposal *
       cosmwasm__wasm__v1__update_admin_proposal__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmwasm__wasm__v1__update_admin_proposal__free_unpacked
                     (Cosmwasm__Wasm__V1__UpdateAdminProposal *message,
                      ProtobufCAllocator *allocator);
/* Cosmwasm__Wasm__V1__ClearAdminProposal methods */
void   cosmwasm__wasm__v1__clear_admin_proposal__init
                     (Cosmwasm__Wasm__V1__ClearAdminProposal         *message);
size_t cosmwasm__wasm__v1__clear_admin_proposal__get_packed_size
                     (const Cosmwasm__Wasm__V1__ClearAdminProposal   *message);
size_t cosmwasm__wasm__v1__clear_admin_proposal__pack
                     (const Cosmwasm__Wasm__V1__ClearAdminProposal   *message,
                      uint8_t             *out);
size_t cosmwasm__wasm__v1__clear_admin_proposal__pack_to_buffer
                     (const Cosmwasm__Wasm__V1__ClearAdminProposal   *message,
                      ProtobufCBuffer     *buffer);
Cosmwasm__Wasm__V1__ClearAdminProposal *
       cosmwasm__wasm__v1__clear_admin_proposal__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmwasm__wasm__v1__clear_admin_proposal__free_unpacked
                     (Cosmwasm__Wasm__V1__ClearAdminProposal *message,
                      ProtobufCAllocator *allocator);
/* Cosmwasm__Wasm__V1__PinCodesProposal methods */
void   cosmwasm__wasm__v1__pin_codes_proposal__init
                     (Cosmwasm__Wasm__V1__PinCodesProposal         *message);
size_t cosmwasm__wasm__v1__pin_codes_proposal__get_packed_size
                     (const Cosmwasm__Wasm__V1__PinCodesProposal   *message);
size_t cosmwasm__wasm__v1__pin_codes_proposal__pack
                     (const Cosmwasm__Wasm__V1__PinCodesProposal   *message,
                      uint8_t             *out);
size_t cosmwasm__wasm__v1__pin_codes_proposal__pack_to_buffer
                     (const Cosmwasm__Wasm__V1__PinCodesProposal   *message,
                      ProtobufCBuffer     *buffer);
Cosmwasm__Wasm__V1__PinCodesProposal *
       cosmwasm__wasm__v1__pin_codes_proposal__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmwasm__wasm__v1__pin_codes_proposal__free_unpacked
                     (Cosmwasm__Wasm__V1__PinCodesProposal *message,
                      ProtobufCAllocator *allocator);
/* Cosmwasm__Wasm__V1__UnpinCodesProposal methods */
void   cosmwasm__wasm__v1__unpin_codes_proposal__init
                     (Cosmwasm__Wasm__V1__UnpinCodesProposal         *message);
size_t cosmwasm__wasm__v1__unpin_codes_proposal__get_packed_size
                     (const Cosmwasm__Wasm__V1__UnpinCodesProposal   *message);
size_t cosmwasm__wasm__v1__unpin_codes_proposal__pack
                     (const Cosmwasm__Wasm__V1__UnpinCodesProposal   *message,
                      uint8_t             *out);
size_t cosmwasm__wasm__v1__unpin_codes_proposal__pack_to_buffer
                     (const Cosmwasm__Wasm__V1__UnpinCodesProposal   *message,
                      ProtobufCBuffer     *buffer);
Cosmwasm__Wasm__V1__UnpinCodesProposal *
       cosmwasm__wasm__v1__unpin_codes_proposal__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmwasm__wasm__v1__unpin_codes_proposal__free_unpacked
                     (Cosmwasm__Wasm__V1__UnpinCodesProposal *message,
                      ProtobufCAllocator *allocator);
/* Cosmwasm__Wasm__V1__AccessConfigUpdate methods */
void   cosmwasm__wasm__v1__access_config_update__init
                     (Cosmwasm__Wasm__V1__AccessConfigUpdate         *message);
size_t cosmwasm__wasm__v1__access_config_update__get_packed_size
                     (const Cosmwasm__Wasm__V1__AccessConfigUpdate   *message);
size_t cosmwasm__wasm__v1__access_config_update__pack
                     (const Cosmwasm__Wasm__V1__AccessConfigUpdate   *message,
                      uint8_t             *out);
size_t cosmwasm__wasm__v1__access_config_update__pack_to_buffer
                     (const Cosmwasm__Wasm__V1__AccessConfigUpdate   *message,
                      ProtobufCBuffer     *buffer);
Cosmwasm__Wasm__V1__AccessConfigUpdate *
       cosmwasm__wasm__v1__access_config_update__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmwasm__wasm__v1__access_config_update__free_unpacked
                     (Cosmwasm__Wasm__V1__AccessConfigUpdate *message,
                      ProtobufCAllocator *allocator);
/* Cosmwasm__Wasm__V1__UpdateInstantiateConfigProposal methods */
void   cosmwasm__wasm__v1__update_instantiate_config_proposal__init
                     (Cosmwasm__Wasm__V1__UpdateInstantiateConfigProposal         *message);
size_t cosmwasm__wasm__v1__update_instantiate_config_proposal__get_packed_size
                     (const Cosmwasm__Wasm__V1__UpdateInstantiateConfigProposal   *message);
size_t cosmwasm__wasm__v1__update_instantiate_config_proposal__pack
                     (const Cosmwasm__Wasm__V1__UpdateInstantiateConfigProposal   *message,
                      uint8_t             *out);
size_t cosmwasm__wasm__v1__update_instantiate_config_proposal__pack_to_buffer
                     (const Cosmwasm__Wasm__V1__UpdateInstantiateConfigProposal   *message,
                      ProtobufCBuffer     *buffer);
Cosmwasm__Wasm__V1__UpdateInstantiateConfigProposal *
       cosmwasm__wasm__v1__update_instantiate_config_proposal__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmwasm__wasm__v1__update_instantiate_config_proposal__free_unpacked
                     (Cosmwasm__Wasm__V1__UpdateInstantiateConfigProposal *message,
                      ProtobufCAllocator *allocator);
/* Cosmwasm__Wasm__V1__StoreAndInstantiateContractProposal methods */
void   cosmwasm__wasm__v1__store_and_instantiate_contract_proposal__init
                     (Cosmwasm__Wasm__V1__StoreAndInstantiateContractProposal         *message);
size_t cosmwasm__wasm__v1__store_and_instantiate_contract_proposal__get_packed_size
                     (const Cosmwasm__Wasm__V1__StoreAndInstantiateContractProposal   *message);
size_t cosmwasm__wasm__v1__store_and_instantiate_contract_proposal__pack
                     (const Cosmwasm__Wasm__V1__StoreAndInstantiateContractProposal   *message,
                      uint8_t             *out);
size_t cosmwasm__wasm__v1__store_and_instantiate_contract_proposal__pack_to_buffer
                     (const Cosmwasm__Wasm__V1__StoreAndInstantiateContractProposal   *message,
                      ProtobufCBuffer     *buffer);
Cosmwasm__Wasm__V1__StoreAndInstantiateContractProposal *
       cosmwasm__wasm__v1__store_and_instantiate_contract_proposal__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmwasm__wasm__v1__store_and_instantiate_contract_proposal__free_unpacked
                     (Cosmwasm__Wasm__V1__StoreAndInstantiateContractProposal *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Cosmwasm__Wasm__V1__StoreCodeProposal_Closure)
                 (const Cosmwasm__Wasm__V1__StoreCodeProposal *message,
                  void *closure_data);
typedef void (*Cosmwasm__Wasm__V1__InstantiateContractProposal_Closure)
                 (const Cosmwasm__Wasm__V1__InstantiateContractProposal *message,
                  void *closure_data);
typedef void (*Cosmwasm__Wasm__V1__InstantiateContract2Proposal_Closure)
                 (const Cosmwasm__Wasm__V1__InstantiateContract2Proposal *message,
                  void *closure_data);
typedef void (*Cosmwasm__Wasm__V1__MigrateContractProposal_Closure)
                 (const Cosmwasm__Wasm__V1__MigrateContractProposal *message,
                  void *closure_data);
typedef void (*Cosmwasm__Wasm__V1__SudoContractProposal_Closure)
                 (const Cosmwasm__Wasm__V1__SudoContractProposal *message,
                  void *closure_data);
typedef void (*Cosmwasm__Wasm__V1__ExecuteContractProposal_Closure)
                 (const Cosmwasm__Wasm__V1__ExecuteContractProposal *message,
                  void *closure_data);
typedef void (*Cosmwasm__Wasm__V1__UpdateAdminProposal_Closure)
                 (const Cosmwasm__Wasm__V1__UpdateAdminProposal *message,
                  void *closure_data);
typedef void (*Cosmwasm__Wasm__V1__ClearAdminProposal_Closure)
                 (const Cosmwasm__Wasm__V1__ClearAdminProposal *message,
                  void *closure_data);
typedef void (*Cosmwasm__Wasm__V1__PinCodesProposal_Closure)
                 (const Cosmwasm__Wasm__V1__PinCodesProposal *message,
                  void *closure_data);
typedef void (*Cosmwasm__Wasm__V1__UnpinCodesProposal_Closure)
                 (const Cosmwasm__Wasm__V1__UnpinCodesProposal *message,
                  void *closure_data);
typedef void (*Cosmwasm__Wasm__V1__AccessConfigUpdate_Closure)
                 (const Cosmwasm__Wasm__V1__AccessConfigUpdate *message,
                  void *closure_data);
typedef void (*Cosmwasm__Wasm__V1__UpdateInstantiateConfigProposal_Closure)
                 (const Cosmwasm__Wasm__V1__UpdateInstantiateConfigProposal *message,
                  void *closure_data);
typedef void (*Cosmwasm__Wasm__V1__StoreAndInstantiateContractProposal_Closure)
                 (const Cosmwasm__Wasm__V1__StoreAndInstantiateContractProposal *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor cosmwasm__wasm__v1__store_code_proposal__descriptor;
extern const ProtobufCMessageDescriptor cosmwasm__wasm__v1__instantiate_contract_proposal__descriptor;
extern const ProtobufCMessageDescriptor cosmwasm__wasm__v1__instantiate_contract2_proposal__descriptor;
extern const ProtobufCMessageDescriptor cosmwasm__wasm__v1__migrate_contract_proposal__descriptor;
extern const ProtobufCMessageDescriptor cosmwasm__wasm__v1__sudo_contract_proposal__descriptor;
extern const ProtobufCMessageDescriptor cosmwasm__wasm__v1__execute_contract_proposal__descriptor;
extern const ProtobufCMessageDescriptor cosmwasm__wasm__v1__update_admin_proposal__descriptor;
extern const ProtobufCMessageDescriptor cosmwasm__wasm__v1__clear_admin_proposal__descriptor;
extern const ProtobufCMessageDescriptor cosmwasm__wasm__v1__pin_codes_proposal__descriptor;
extern const ProtobufCMessageDescriptor cosmwasm__wasm__v1__unpin_codes_proposal__descriptor;
extern const ProtobufCMessageDescriptor cosmwasm__wasm__v1__access_config_update__descriptor;
extern const ProtobufCMessageDescriptor cosmwasm__wasm__v1__update_instantiate_config_proposal__descriptor;
extern const ProtobufCMessageDescriptor cosmwasm__wasm__v1__store_and_instantiate_contract_proposal__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_cosmwasm_2fwasm_2fv1_2fproposal_5flegacy_2eproto__INCLUDED */
