/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: cosmos/auth/v1beta1/auth.proto */

#ifndef PROTOBUF_C_cosmos_2fauth_2fv1beta1_2fauth_2eproto__INCLUDED
#define PROTOBUF_C_cosmos_2fauth_2fv1beta1_2fauth_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protobuf-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1005002 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protobuf-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protobuf-c.
#endif

#include "amino/amino.pb-c.h"
#include "cosmos_proto/cosmos.pb-c.h"
#include "gogoproto/gogo.pb-c.h"
#include "google/protobuf/any.pb-c.h"

typedef struct Cosmos__Auth__V1beta1__BaseAccount Cosmos__Auth__V1beta1__BaseAccount;
typedef struct Cosmos__Auth__V1beta1__ModuleAccount Cosmos__Auth__V1beta1__ModuleAccount;
typedef struct Cosmos__Auth__V1beta1__ModuleCredential Cosmos__Auth__V1beta1__ModuleCredential;
typedef struct Cosmos__Auth__V1beta1__Params Cosmos__Auth__V1beta1__Params;


/* --- enums --- */


/* --- messages --- */

/*
 * BaseAccount defines a base account type. It contains all the necessary fields
 * for basic account functionality. Any custom account type should extend this
 * type for additional functionality (e.g. vesting).
 */
struct  Cosmos__Auth__V1beta1__BaseAccount
{
  ProtobufCMessage base;
  char *address;
  Google__Protobuf__Any *pub_key;
  uint64_t account_number;
  uint64_t sequence;
};
#define COSMOS__AUTH__V1BETA1__BASE_ACCOUNT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__auth__v1beta1__base_account__descriptor) \
, (char *)protobuf_c_empty_string, NULL, 0, 0 }


/*
 * ModuleAccount defines an account for modules that holds coins on a pool.
 */
struct  Cosmos__Auth__V1beta1__ModuleAccount
{
  ProtobufCMessage base;
  Cosmos__Auth__V1beta1__BaseAccount *base_account;
  char *name;
  size_t n_permissions;
  char **permissions;
};
#define COSMOS__AUTH__V1BETA1__MODULE_ACCOUNT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__auth__v1beta1__module_account__descriptor) \
, NULL, (char *)protobuf_c_empty_string, 0,NULL }


/*
 * ModuleCredential represents a unclaimable pubkey for base accounts controlled by modules.
 */
struct  Cosmos__Auth__V1beta1__ModuleCredential
{
  ProtobufCMessage base;
  /*
   * module_name is the name of the module used for address derivation (passed into address.Module).
   */
  char *module_name;
  /*
   * derivation_keys is for deriving a module account address (passed into address.Module)
   * adding more keys creates sub-account addresses (passed into address.Derive)
   */
  size_t n_derivation_keys;
  ProtobufCBinaryData *derivation_keys;
};
#define COSMOS__AUTH__V1BETA1__MODULE_CREDENTIAL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__auth__v1beta1__module_credential__descriptor) \
, (char *)protobuf_c_empty_string, 0,NULL }


/*
 * Params defines the parameters for the auth module.
 */
struct  Cosmos__Auth__V1beta1__Params
{
  ProtobufCMessage base;
  uint64_t max_memo_characters;
  uint64_t tx_sig_limit;
  uint64_t tx_size_cost_per_byte;
  uint64_t sig_verify_cost_ed25519;
  uint64_t sig_verify_cost_secp256k1;
};
#define COSMOS__AUTH__V1BETA1__PARAMS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__auth__v1beta1__params__descriptor) \
, 0, 0, 0, 0, 0 }


/* Cosmos__Auth__V1beta1__BaseAccount methods */
void   cosmos__auth__v1beta1__base_account__init
                     (Cosmos__Auth__V1beta1__BaseAccount         *message);
size_t cosmos__auth__v1beta1__base_account__get_packed_size
                     (const Cosmos__Auth__V1beta1__BaseAccount   *message);
size_t cosmos__auth__v1beta1__base_account__pack
                     (const Cosmos__Auth__V1beta1__BaseAccount   *message,
                      uint8_t             *out);
size_t cosmos__auth__v1beta1__base_account__pack_to_buffer
                     (const Cosmos__Auth__V1beta1__BaseAccount   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Auth__V1beta1__BaseAccount *
       cosmos__auth__v1beta1__base_account__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__auth__v1beta1__base_account__free_unpacked
                     (Cosmos__Auth__V1beta1__BaseAccount *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__Auth__V1beta1__ModuleAccount methods */
void   cosmos__auth__v1beta1__module_account__init
                     (Cosmos__Auth__V1beta1__ModuleAccount         *message);
size_t cosmos__auth__v1beta1__module_account__get_packed_size
                     (const Cosmos__Auth__V1beta1__ModuleAccount   *message);
size_t cosmos__auth__v1beta1__module_account__pack
                     (const Cosmos__Auth__V1beta1__ModuleAccount   *message,
                      uint8_t             *out);
size_t cosmos__auth__v1beta1__module_account__pack_to_buffer
                     (const Cosmos__Auth__V1beta1__ModuleAccount   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Auth__V1beta1__ModuleAccount *
       cosmos__auth__v1beta1__module_account__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__auth__v1beta1__module_account__free_unpacked
                     (Cosmos__Auth__V1beta1__ModuleAccount *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__Auth__V1beta1__ModuleCredential methods */
void   cosmos__auth__v1beta1__module_credential__init
                     (Cosmos__Auth__V1beta1__ModuleCredential         *message);
size_t cosmos__auth__v1beta1__module_credential__get_packed_size
                     (const Cosmos__Auth__V1beta1__ModuleCredential   *message);
size_t cosmos__auth__v1beta1__module_credential__pack
                     (const Cosmos__Auth__V1beta1__ModuleCredential   *message,
                      uint8_t             *out);
size_t cosmos__auth__v1beta1__module_credential__pack_to_buffer
                     (const Cosmos__Auth__V1beta1__ModuleCredential   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Auth__V1beta1__ModuleCredential *
       cosmos__auth__v1beta1__module_credential__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__auth__v1beta1__module_credential__free_unpacked
                     (Cosmos__Auth__V1beta1__ModuleCredential *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__Auth__V1beta1__Params methods */
void   cosmos__auth__v1beta1__params__init
                     (Cosmos__Auth__V1beta1__Params         *message);
size_t cosmos__auth__v1beta1__params__get_packed_size
                     (const Cosmos__Auth__V1beta1__Params   *message);
size_t cosmos__auth__v1beta1__params__pack
                     (const Cosmos__Auth__V1beta1__Params   *message,
                      uint8_t             *out);
size_t cosmos__auth__v1beta1__params__pack_to_buffer
                     (const Cosmos__Auth__V1beta1__Params   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Auth__V1beta1__Params *
       cosmos__auth__v1beta1__params__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__auth__v1beta1__params__free_unpacked
                     (Cosmos__Auth__V1beta1__Params *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Cosmos__Auth__V1beta1__BaseAccount_Closure)
                 (const Cosmos__Auth__V1beta1__BaseAccount *message,
                  void *closure_data);
typedef void (*Cosmos__Auth__V1beta1__ModuleAccount_Closure)
                 (const Cosmos__Auth__V1beta1__ModuleAccount *message,
                  void *closure_data);
typedef void (*Cosmos__Auth__V1beta1__ModuleCredential_Closure)
                 (const Cosmos__Auth__V1beta1__ModuleCredential *message,
                  void *closure_data);
typedef void (*Cosmos__Auth__V1beta1__Params_Closure)
                 (const Cosmos__Auth__V1beta1__Params *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor cosmos__auth__v1beta1__base_account__descriptor;
extern const ProtobufCMessageDescriptor cosmos__auth__v1beta1__module_account__descriptor;
extern const ProtobufCMessageDescriptor cosmos__auth__v1beta1__module_credential__descriptor;
extern const ProtobufCMessageDescriptor cosmos__auth__v1beta1__params__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_cosmos_2fauth_2fv1beta1_2fauth_2eproto__INCLUDED */
