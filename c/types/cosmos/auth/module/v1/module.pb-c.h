/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: cosmos/auth/module/v1/module.proto */

#ifndef PROTOBUF_C_cosmos_2fauth_2fmodule_2fv1_2fmodule_2eproto__INCLUDED
#define PROTOBUF_C_cosmos_2fauth_2fmodule_2fv1_2fmodule_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protobuf-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1005002 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protobuf-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protobuf-c.
#endif

#include "cosmos/app/v1alpha1/module.pb-c.h"

typedef struct Cosmos__Auth__Module__V1__Module Cosmos__Auth__Module__V1__Module;
typedef struct Cosmos__Auth__Module__V1__ModuleAccountPermission Cosmos__Auth__Module__V1__ModuleAccountPermission;


/* --- enums --- */


/* --- messages --- */

/*
 * Module is the config object for the auth module.
 */
struct  Cosmos__Auth__Module__V1__Module
{
  ProtobufCMessage base;
  /*
   * bech32_prefix is the bech32 account prefix for the app.
   */
  char *bech32_prefix;
  /*
   * module_account_permissions are module account permissions.
   */
  size_t n_module_account_permissions;
  Cosmos__Auth__Module__V1__ModuleAccountPermission **module_account_permissions;
  /*
   * authority defines the custom module authority. If not set, defaults to the governance module.
   */
  char *authority;
  /*
   * enable_unordered_transactions determines whether unordered transactions should be supported or not.
   * When true, unordered transactions will be validated and processed.
   * When false, unordered transactions will be rejected.
   */
  protobuf_c_boolean enable_unordered_transactions;
};
#define COSMOS__AUTH__MODULE__V1__MODULE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__auth__module__v1__module__descriptor) \
, (char *)protobuf_c_empty_string, 0,NULL, (char *)protobuf_c_empty_string, 0 }


/*
 * ModuleAccountPermission represents permissions for a module account.
 */
struct  Cosmos__Auth__Module__V1__ModuleAccountPermission
{
  ProtobufCMessage base;
  /*
   * account is the name of the module.
   */
  char *account;
  /*
   * permissions are the permissions this module has. Currently recognized
   * values are minter, burner and staking.
   */
  size_t n_permissions;
  char **permissions;
};
#define COSMOS__AUTH__MODULE__V1__MODULE_ACCOUNT_PERMISSION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__auth__module__v1__module_account_permission__descriptor) \
, (char *)protobuf_c_empty_string, 0,NULL }


/* Cosmos__Auth__Module__V1__Module methods */
void   cosmos__auth__module__v1__module__init
                     (Cosmos__Auth__Module__V1__Module         *message);
size_t cosmos__auth__module__v1__module__get_packed_size
                     (const Cosmos__Auth__Module__V1__Module   *message);
size_t cosmos__auth__module__v1__module__pack
                     (const Cosmos__Auth__Module__V1__Module   *message,
                      uint8_t             *out);
size_t cosmos__auth__module__v1__module__pack_to_buffer
                     (const Cosmos__Auth__Module__V1__Module   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Auth__Module__V1__Module *
       cosmos__auth__module__v1__module__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__auth__module__v1__module__free_unpacked
                     (Cosmos__Auth__Module__V1__Module *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__Auth__Module__V1__ModuleAccountPermission methods */
void   cosmos__auth__module__v1__module_account_permission__init
                     (Cosmos__Auth__Module__V1__ModuleAccountPermission         *message);
size_t cosmos__auth__module__v1__module_account_permission__get_packed_size
                     (const Cosmos__Auth__Module__V1__ModuleAccountPermission   *message);
size_t cosmos__auth__module__v1__module_account_permission__pack
                     (const Cosmos__Auth__Module__V1__ModuleAccountPermission   *message,
                      uint8_t             *out);
size_t cosmos__auth__module__v1__module_account_permission__pack_to_buffer
                     (const Cosmos__Auth__Module__V1__ModuleAccountPermission   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Auth__Module__V1__ModuleAccountPermission *
       cosmos__auth__module__v1__module_account_permission__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__auth__module__v1__module_account_permission__free_unpacked
                     (Cosmos__Auth__Module__V1__ModuleAccountPermission *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Cosmos__Auth__Module__V1__Module_Closure)
                 (const Cosmos__Auth__Module__V1__Module *message,
                  void *closure_data);
typedef void (*Cosmos__Auth__Module__V1__ModuleAccountPermission_Closure)
                 (const Cosmos__Auth__Module__V1__ModuleAccountPermission *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor cosmos__auth__module__v1__module__descriptor;
extern const ProtobufCMessageDescriptor cosmos__auth__module__v1__module_account_permission__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_cosmos_2fauth_2fmodule_2fv1_2fmodule_2eproto__INCLUDED */
