/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: cosmos/autocli/v1/options.proto */

#ifndef PROTOBUF_C_cosmos_2fautocli_2fv1_2foptions_2eproto__INCLUDED
#define PROTOBUF_C_cosmos_2fautocli_2fv1_2foptions_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protobuf-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1005002 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protobuf-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protobuf-c.
#endif

#include "cosmos_proto/cosmos.pb-c.h"

typedef struct Cosmos__Autocli__V1__ModuleOptions Cosmos__Autocli__V1__ModuleOptions;
typedef struct Cosmos__Autocli__V1__ServiceCommandDescriptor Cosmos__Autocli__V1__ServiceCommandDescriptor;
typedef struct Cosmos__Autocli__V1__ServiceCommandDescriptor__SubCommandsEntry Cosmos__Autocli__V1__ServiceCommandDescriptor__SubCommandsEntry;
typedef struct Cosmos__Autocli__V1__RpcCommandOptions Cosmos__Autocli__V1__RpcCommandOptions;
typedef struct Cosmos__Autocli__V1__RpcCommandOptions__FlagOptionsEntry Cosmos__Autocli__V1__RpcCommandOptions__FlagOptionsEntry;
typedef struct Cosmos__Autocli__V1__FlagOptions Cosmos__Autocli__V1__FlagOptions;
typedef struct Cosmos__Autocli__V1__PositionalArgDescriptor Cosmos__Autocli__V1__PositionalArgDescriptor;


/* --- enums --- */


/* --- messages --- */

/*
 * ModuleOptions describes the CLI options for a Cosmos SDK module.
 */
struct  Cosmos__Autocli__V1__ModuleOptions
{
  ProtobufCMessage base;
  /*
   * tx describes the tx commands for the module.
   */
  Cosmos__Autocli__V1__ServiceCommandDescriptor *tx;
  /*
   * query describes the queries commands for the module.
   */
  Cosmos__Autocli__V1__ServiceCommandDescriptor *query;
};
#define COSMOS__AUTOCLI__V1__MODULE_OPTIONS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__autocli__v1__module_options__descriptor) \
, NULL, NULL }


struct  Cosmos__Autocli__V1__ServiceCommandDescriptor__SubCommandsEntry
{
  ProtobufCMessage base;
  char *key;
  Cosmos__Autocli__V1__ServiceCommandDescriptor *value;
};
#define COSMOS__AUTOCLI__V1__SERVICE_COMMAND_DESCRIPTOR__SUB_COMMANDS_ENTRY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__autocli__v1__service_command_descriptor__sub_commands_entry__descriptor) \
, (char *)protobuf_c_empty_string, NULL }


/*
 * ServiceCommandDescriptor describes a CLI command based on a protobuf service.
 */
struct  Cosmos__Autocli__V1__ServiceCommandDescriptor
{
  ProtobufCMessage base;
  /*
   * service is the fully qualified name of the protobuf service to build
   * the command from. It can be left empty if sub_commands are used instead
   * which may be the case if a module provides multiple tx and/or query services.
   */
  char *service;
  /*
   * rpc_command_options are options for commands generated from rpc methods.
   * If no options are specified for a given rpc method on the service, a
   * command will be generated for that method with the default options.
   */
  size_t n_rpc_command_options;
  Cosmos__Autocli__V1__RpcCommandOptions **rpc_command_options;
  /*
   * sub_commands is a map of optional sub-commands for this command based on
   * different protobuf services. The map key is used as the name of the
   * sub-command.
   */
  size_t n_sub_commands;
  Cosmos__Autocli__V1__ServiceCommandDescriptor__SubCommandsEntry **sub_commands;
  /*
   * enhance_custom_commands specifies whether to skip the service when generating commands, if a custom command already
   * exists, or enhance the existing command. If set to true, the custom command will be enhanced with the services from
   * gRPC. otherwise when a custom command exists, no commands will be generated for the service.
   */
  protobuf_c_boolean enhance_custom_command;
  /*
   * short is an optional parameter used to override the short description of the auto generated command.
   */
  char *short_;
};
#define COSMOS__AUTOCLI__V1__SERVICE_COMMAND_DESCRIPTOR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__autocli__v1__service_command_descriptor__descriptor) \
, (char *)protobuf_c_empty_string, 0,NULL, 0,NULL, 0, (char *)protobuf_c_empty_string }


struct  Cosmos__Autocli__V1__RpcCommandOptions__FlagOptionsEntry
{
  ProtobufCMessage base;
  char *key;
  Cosmos__Autocli__V1__FlagOptions *value;
};
#define COSMOS__AUTOCLI__V1__RPC_COMMAND_OPTIONS__FLAG_OPTIONS_ENTRY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__autocli__v1__rpc_command_options__flag_options_entry__descriptor) \
, (char *)protobuf_c_empty_string, NULL }


/*
 * RpcCommandOptions specifies options for commands generated from protobuf
 * rpc methods.
 */
struct  Cosmos__Autocli__V1__RpcCommandOptions
{
  ProtobufCMessage base;
  /*
   * rpc_method is short name of the protobuf rpc method that this command is
   * generated from.
   */
  char *rpc_method;
  /*
   * use is the one-line usage method. It also allows specifying an alternate
   * name for the command as the first word of the usage text.
   * By default the name of an rpc command is the kebab-case short name of the
   * rpc method.
   */
  char *use;
  /*
   * long is the long message shown in the 'help <this-command>' output.
   */
  char *long_;
  /*
   * short is the short description shown in the 'help' output.
   */
  char *short_;
  /*
   * example is examples of how to use the command.
   */
  char *example;
  /*
   * alias is an array of aliases that can be used instead of the first word in Use.
   */
  size_t n_alias;
  char **alias;
  /*
   * suggest_for is an array of command names for which this command will be suggested -
   * similar to aliases but only suggests.
   */
  size_t n_suggest_for;
  char **suggest_for;
  /*
   * deprecated defines, if this command is deprecated and should print this string when used.
   */
  char *deprecated;
  /*
   * version defines the version for this command. If this value is non-empty and the command does not
   * define a "version" flag, a "version" boolean flag will be added to the command and, if specified,
   * will print content of the "Version" variable. A shorthand "v" flag will also be added if the
   * command does not define one.
   */
  char *version;
  /*
   * flag_options are options for flags generated from rpc request fields.
   * By default all request fields are configured as flags. They can
   * also be configured as positional args instead using positional_args.
   */
  size_t n_flag_options;
  Cosmos__Autocli__V1__RpcCommandOptions__FlagOptionsEntry **flag_options;
  /*
   * positional_args specifies positional arguments for the command.
   */
  size_t n_positional_args;
  Cosmos__Autocli__V1__PositionalArgDescriptor **positional_args;
  /*
   * skip specifies whether to skip this rpc method when generating commands.
   */
  protobuf_c_boolean skip;
  /*
   * gov_proposal specifies whether autocli should generate a gov proposal transaction for this rpc method.
   * Normally autocli generates a transaction containing the message and broadcast it.
   * However, when true, autocli generates a proposal transaction containing the message and broadcast it.
   * This option is ineffective for query commands.
   */
  protobuf_c_boolean gov_proposal;
};
#define COSMOS__AUTOCLI__V1__RPC_COMMAND_OPTIONS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__autocli__v1__rpc_command_options__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0,NULL, 0,NULL, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0,NULL, 0,NULL, 0, 0 }


/*
 * FlagOptions are options for flags generated from rpc request fields.
 * By default, all request fields are configured as flags based on the
 * kebab-case name of the field. Fields can be turned into positional arguments
 * instead by using RpcCommandOptions.positional_args.
 */
struct  Cosmos__Autocli__V1__FlagOptions
{
  ProtobufCMessage base;
  /*
   * name is an alternate name to use for the field flag.
   */
  char *name;
  /*
   * shorthand is a one-letter abbreviated flag.
   */
  char *shorthand;
  /*
   * usage is the help message.
   */
  char *usage;
  /*
   * default_value is the default value as text.
   */
  char *default_value;
  /*
   * deprecated is the usage text to show if this flag is deprecated.
   */
  char *deprecated;
  /*
   * shorthand_deprecated is the usage text to show if the shorthand of this flag is deprecated.
   */
  char *shorthand_deprecated;
  /*
   * hidden hides the flag from help/usage text
   */
  protobuf_c_boolean hidden;
};
#define COSMOS__AUTOCLI__V1__FLAG_OPTIONS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__autocli__v1__flag_options__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0 }


/*
 * PositionalArgDescriptor describes a positional argument.
 */
struct  Cosmos__Autocli__V1__PositionalArgDescriptor
{
  ProtobufCMessage base;
  /*
   * proto_field specifies the proto field to use as the positional arg. Any
   * fields used as positional args will not have a flag generated.
   */
  char *proto_field;
  /*
   * varargs makes a positional parameter a varargs parameter. This can only be
   * applied to last positional parameter and the proto_field must a repeated
   * field. Note: It is mutually exclusive with optional.
   */
  protobuf_c_boolean varargs;
  /*
   * optional makes the last positional parameter optional.
   * Note: It is mutually exclusive with varargs.
   */
  protobuf_c_boolean optional;
};
#define COSMOS__AUTOCLI__V1__POSITIONAL_ARG_DESCRIPTOR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__autocli__v1__positional_arg_descriptor__descriptor) \
, (char *)protobuf_c_empty_string, 0, 0 }


/* Cosmos__Autocli__V1__ModuleOptions methods */
void   cosmos__autocli__v1__module_options__init
                     (Cosmos__Autocli__V1__ModuleOptions         *message);
size_t cosmos__autocli__v1__module_options__get_packed_size
                     (const Cosmos__Autocli__V1__ModuleOptions   *message);
size_t cosmos__autocli__v1__module_options__pack
                     (const Cosmos__Autocli__V1__ModuleOptions   *message,
                      uint8_t             *out);
size_t cosmos__autocli__v1__module_options__pack_to_buffer
                     (const Cosmos__Autocli__V1__ModuleOptions   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Autocli__V1__ModuleOptions *
       cosmos__autocli__v1__module_options__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__autocli__v1__module_options__free_unpacked
                     (Cosmos__Autocli__V1__ModuleOptions *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__Autocli__V1__ServiceCommandDescriptor__SubCommandsEntry methods */
void   cosmos__autocli__v1__service_command_descriptor__sub_commands_entry__init
                     (Cosmos__Autocli__V1__ServiceCommandDescriptor__SubCommandsEntry         *message);
/* Cosmos__Autocli__V1__ServiceCommandDescriptor methods */
void   cosmos__autocli__v1__service_command_descriptor__init
                     (Cosmos__Autocli__V1__ServiceCommandDescriptor         *message);
size_t cosmos__autocli__v1__service_command_descriptor__get_packed_size
                     (const Cosmos__Autocli__V1__ServiceCommandDescriptor   *message);
size_t cosmos__autocli__v1__service_command_descriptor__pack
                     (const Cosmos__Autocli__V1__ServiceCommandDescriptor   *message,
                      uint8_t             *out);
size_t cosmos__autocli__v1__service_command_descriptor__pack_to_buffer
                     (const Cosmos__Autocli__V1__ServiceCommandDescriptor   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Autocli__V1__ServiceCommandDescriptor *
       cosmos__autocli__v1__service_command_descriptor__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__autocli__v1__service_command_descriptor__free_unpacked
                     (Cosmos__Autocli__V1__ServiceCommandDescriptor *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__Autocli__V1__RpcCommandOptions__FlagOptionsEntry methods */
void   cosmos__autocli__v1__rpc_command_options__flag_options_entry__init
                     (Cosmos__Autocli__V1__RpcCommandOptions__FlagOptionsEntry         *message);
/* Cosmos__Autocli__V1__RpcCommandOptions methods */
void   cosmos__autocli__v1__rpc_command_options__init
                     (Cosmos__Autocli__V1__RpcCommandOptions         *message);
size_t cosmos__autocli__v1__rpc_command_options__get_packed_size
                     (const Cosmos__Autocli__V1__RpcCommandOptions   *message);
size_t cosmos__autocli__v1__rpc_command_options__pack
                     (const Cosmos__Autocli__V1__RpcCommandOptions   *message,
                      uint8_t             *out);
size_t cosmos__autocli__v1__rpc_command_options__pack_to_buffer
                     (const Cosmos__Autocli__V1__RpcCommandOptions   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Autocli__V1__RpcCommandOptions *
       cosmos__autocli__v1__rpc_command_options__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__autocli__v1__rpc_command_options__free_unpacked
                     (Cosmos__Autocli__V1__RpcCommandOptions *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__Autocli__V1__FlagOptions methods */
void   cosmos__autocli__v1__flag_options__init
                     (Cosmos__Autocli__V1__FlagOptions         *message);
size_t cosmos__autocli__v1__flag_options__get_packed_size
                     (const Cosmos__Autocli__V1__FlagOptions   *message);
size_t cosmos__autocli__v1__flag_options__pack
                     (const Cosmos__Autocli__V1__FlagOptions   *message,
                      uint8_t             *out);
size_t cosmos__autocli__v1__flag_options__pack_to_buffer
                     (const Cosmos__Autocli__V1__FlagOptions   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Autocli__V1__FlagOptions *
       cosmos__autocli__v1__flag_options__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__autocli__v1__flag_options__free_unpacked
                     (Cosmos__Autocli__V1__FlagOptions *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__Autocli__V1__PositionalArgDescriptor methods */
void   cosmos__autocli__v1__positional_arg_descriptor__init
                     (Cosmos__Autocli__V1__PositionalArgDescriptor         *message);
size_t cosmos__autocli__v1__positional_arg_descriptor__get_packed_size
                     (const Cosmos__Autocli__V1__PositionalArgDescriptor   *message);
size_t cosmos__autocli__v1__positional_arg_descriptor__pack
                     (const Cosmos__Autocli__V1__PositionalArgDescriptor   *message,
                      uint8_t             *out);
size_t cosmos__autocli__v1__positional_arg_descriptor__pack_to_buffer
                     (const Cosmos__Autocli__V1__PositionalArgDescriptor   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Autocli__V1__PositionalArgDescriptor *
       cosmos__autocli__v1__positional_arg_descriptor__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__autocli__v1__positional_arg_descriptor__free_unpacked
                     (Cosmos__Autocli__V1__PositionalArgDescriptor *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Cosmos__Autocli__V1__ModuleOptions_Closure)
                 (const Cosmos__Autocli__V1__ModuleOptions *message,
                  void *closure_data);
typedef void (*Cosmos__Autocli__V1__ServiceCommandDescriptor__SubCommandsEntry_Closure)
                 (const Cosmos__Autocli__V1__ServiceCommandDescriptor__SubCommandsEntry *message,
                  void *closure_data);
typedef void (*Cosmos__Autocli__V1__ServiceCommandDescriptor_Closure)
                 (const Cosmos__Autocli__V1__ServiceCommandDescriptor *message,
                  void *closure_data);
typedef void (*Cosmos__Autocli__V1__RpcCommandOptions__FlagOptionsEntry_Closure)
                 (const Cosmos__Autocli__V1__RpcCommandOptions__FlagOptionsEntry *message,
                  void *closure_data);
typedef void (*Cosmos__Autocli__V1__RpcCommandOptions_Closure)
                 (const Cosmos__Autocli__V1__RpcCommandOptions *message,
                  void *closure_data);
typedef void (*Cosmos__Autocli__V1__FlagOptions_Closure)
                 (const Cosmos__Autocli__V1__FlagOptions *message,
                  void *closure_data);
typedef void (*Cosmos__Autocli__V1__PositionalArgDescriptor_Closure)
                 (const Cosmos__Autocli__V1__PositionalArgDescriptor *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor cosmos__autocli__v1__module_options__descriptor;
extern const ProtobufCMessageDescriptor cosmos__autocli__v1__service_command_descriptor__descriptor;
extern const ProtobufCMessageDescriptor cosmos__autocli__v1__service_command_descriptor__sub_commands_entry__descriptor;
extern const ProtobufCMessageDescriptor cosmos__autocli__v1__rpc_command_options__descriptor;
extern const ProtobufCMessageDescriptor cosmos__autocli__v1__rpc_command_options__flag_options_entry__descriptor;
extern const ProtobufCMessageDescriptor cosmos__autocli__v1__flag_options__descriptor;
extern const ProtobufCMessageDescriptor cosmos__autocli__v1__positional_arg_descriptor__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_cosmos_2fautocli_2fv1_2foptions_2eproto__INCLUDED */
