/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: cosmos/app/v1alpha1/config.proto */

#ifndef PROTOBUF_C_cosmos_2fapp_2fv1alpha1_2fconfig_2eproto__INCLUDED
#define PROTOBUF_C_cosmos_2fapp_2fv1alpha1_2fconfig_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protobuf-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1005002 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protobuf-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protobuf-c.
#endif

#include "google/protobuf/any.pb-c.h"

typedef struct Cosmos__App__V1alpha1__Config Cosmos__App__V1alpha1__Config;
typedef struct Cosmos__App__V1alpha1__ModuleConfig Cosmos__App__V1alpha1__ModuleConfig;
typedef struct Cosmos__App__V1alpha1__GolangBinding Cosmos__App__V1alpha1__GolangBinding;


/* --- enums --- */


/* --- messages --- */

/*
 * Config represents the configuration for a Cosmos SDK ABCI app.
 * It is intended that all state machine logic including the version of
 * baseapp and tx handlers (and possibly even Tendermint) that an app needs
 * can be described in a config object. For compatibility, the framework should
 * allow a mixture of declarative and imperative app wiring, however, apps
 * that strive for the maximum ease of maintainability should be able to describe
 * their state machine with a config object alone.
 */
struct  Cosmos__App__V1alpha1__Config
{
  ProtobufCMessage base;
  /*
   * modules are the module configurations for the app.
   */
  size_t n_modules;
  Cosmos__App__V1alpha1__ModuleConfig **modules;
  /*
   * golang_bindings specifies explicit interface to implementation type bindings which
   * depinject uses to resolve interface inputs to provider functions.  The scope of this
   * field's configuration is global (not module specific).
   */
  size_t n_golang_bindings;
  Cosmos__App__V1alpha1__GolangBinding **golang_bindings;
};
#define COSMOS__APP__V1ALPHA1__CONFIG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__app__v1alpha1__config__descriptor) \
, 0,NULL, 0,NULL }


/*
 * ModuleConfig is a module configuration for an app.
 */
struct  Cosmos__App__V1alpha1__ModuleConfig
{
  ProtobufCMessage base;
  /*
   * name is the unique name of the module within the app. It should be a name
   * that persists between different versions of a module so that modules
   * can be smoothly upgraded to new versions.
   * For example, for the module cosmos.bank.module.v1.Module, we may chose
   * to simply name the module "bank" in the app. When we upgrade to
   * cosmos.bank.module.v2.Module, the app-specific name "bank" stays the same
   * and the framework knows that the v2 module should receive all the same state
   * that the v1 module had. Note: modules should provide info on which versions
   * they can migrate from in the ModuleDescriptor.can_migration_from field.
   */
  char *name;
  /*
   * config is the config object for the module. Module config messages should
   * define a ModuleDescriptor using the cosmos.app.v1alpha1.is_module extension.
   */
  Google__Protobuf__Any *config;
  /*
   * golang_bindings specifies explicit interface to implementation type bindings which
   * depinject uses to resolve interface inputs to provider functions.  The scope of this
   * field's configuration is module specific.
   */
  size_t n_golang_bindings;
  Cosmos__App__V1alpha1__GolangBinding **golang_bindings;
};
#define COSMOS__APP__V1ALPHA1__MODULE_CONFIG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__app__v1alpha1__module_config__descriptor) \
, (char *)protobuf_c_empty_string, NULL, 0,NULL }


/*
 * GolangBinding is an explicit interface type to implementing type binding for dependency injection.
 */
struct  Cosmos__App__V1alpha1__GolangBinding
{
  ProtobufCMessage base;
  /*
   * interface_type is the interface type which will be bound to a specific implementation type
   */
  char *interface_type;
  /*
   * implementation is the implementing type which will be supplied when an input of type interface is requested
   */
  char *implementation;
};
#define COSMOS__APP__V1ALPHA1__GOLANG_BINDING__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__app__v1alpha1__golang_binding__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


/* Cosmos__App__V1alpha1__Config methods */
void   cosmos__app__v1alpha1__config__init
                     (Cosmos__App__V1alpha1__Config         *message);
size_t cosmos__app__v1alpha1__config__get_packed_size
                     (const Cosmos__App__V1alpha1__Config   *message);
size_t cosmos__app__v1alpha1__config__pack
                     (const Cosmos__App__V1alpha1__Config   *message,
                      uint8_t             *out);
size_t cosmos__app__v1alpha1__config__pack_to_buffer
                     (const Cosmos__App__V1alpha1__Config   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__App__V1alpha1__Config *
       cosmos__app__v1alpha1__config__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__app__v1alpha1__config__free_unpacked
                     (Cosmos__App__V1alpha1__Config *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__App__V1alpha1__ModuleConfig methods */
void   cosmos__app__v1alpha1__module_config__init
                     (Cosmos__App__V1alpha1__ModuleConfig         *message);
size_t cosmos__app__v1alpha1__module_config__get_packed_size
                     (const Cosmos__App__V1alpha1__ModuleConfig   *message);
size_t cosmos__app__v1alpha1__module_config__pack
                     (const Cosmos__App__V1alpha1__ModuleConfig   *message,
                      uint8_t             *out);
size_t cosmos__app__v1alpha1__module_config__pack_to_buffer
                     (const Cosmos__App__V1alpha1__ModuleConfig   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__App__V1alpha1__ModuleConfig *
       cosmos__app__v1alpha1__module_config__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__app__v1alpha1__module_config__free_unpacked
                     (Cosmos__App__V1alpha1__ModuleConfig *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__App__V1alpha1__GolangBinding methods */
void   cosmos__app__v1alpha1__golang_binding__init
                     (Cosmos__App__V1alpha1__GolangBinding         *message);
size_t cosmos__app__v1alpha1__golang_binding__get_packed_size
                     (const Cosmos__App__V1alpha1__GolangBinding   *message);
size_t cosmos__app__v1alpha1__golang_binding__pack
                     (const Cosmos__App__V1alpha1__GolangBinding   *message,
                      uint8_t             *out);
size_t cosmos__app__v1alpha1__golang_binding__pack_to_buffer
                     (const Cosmos__App__V1alpha1__GolangBinding   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__App__V1alpha1__GolangBinding *
       cosmos__app__v1alpha1__golang_binding__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__app__v1alpha1__golang_binding__free_unpacked
                     (Cosmos__App__V1alpha1__GolangBinding *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Cosmos__App__V1alpha1__Config_Closure)
                 (const Cosmos__App__V1alpha1__Config *message,
                  void *closure_data);
typedef void (*Cosmos__App__V1alpha1__ModuleConfig_Closure)
                 (const Cosmos__App__V1alpha1__ModuleConfig *message,
                  void *closure_data);
typedef void (*Cosmos__App__V1alpha1__GolangBinding_Closure)
                 (const Cosmos__App__V1alpha1__GolangBinding *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor cosmos__app__v1alpha1__config__descriptor;
extern const ProtobufCMessageDescriptor cosmos__app__v1alpha1__module_config__descriptor;
extern const ProtobufCMessageDescriptor cosmos__app__v1alpha1__golang_binding__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_cosmos_2fapp_2fv1alpha1_2fconfig_2eproto__INCLUDED */
