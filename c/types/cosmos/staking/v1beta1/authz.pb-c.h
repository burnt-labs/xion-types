/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: cosmos/staking/v1beta1/authz.proto */

#ifndef PROTOBUF_C_cosmos_2fstaking_2fv1beta1_2fauthz_2eproto__INCLUDED
#define PROTOBUF_C_cosmos_2fstaking_2fv1beta1_2fauthz_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protobuf-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1005002 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protobuf-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protobuf-c.
#endif

#include "gogoproto/gogo.pb-c.h"
#include "cosmos_proto/cosmos.pb-c.h"
#include "cosmos/base/v1beta1/coin.pb-c.h"
#include "amino/amino.pb-c.h"

typedef struct Cosmos__Staking__V1beta1__StakeAuthorization Cosmos__Staking__V1beta1__StakeAuthorization;
typedef struct Cosmos__Staking__V1beta1__StakeAuthorization__Validators Cosmos__Staking__V1beta1__StakeAuthorization__Validators;


/* --- enums --- */

/*
 * AuthorizationType defines the type of staking module authorization type
 */
typedef enum _Cosmos__Staking__V1beta1__AuthorizationType {
  /*
   * AUTHORIZATION_TYPE_UNSPECIFIED specifies an unknown authorization type
   */
  COSMOS__STAKING__V1BETA1__AUTHORIZATION_TYPE__AUTHORIZATION_TYPE_UNSPECIFIED = 0,
  /*
   * AUTHORIZATION_TYPE_DELEGATE defines an authorization type for Msg/Delegate
   */
  COSMOS__STAKING__V1BETA1__AUTHORIZATION_TYPE__AUTHORIZATION_TYPE_DELEGATE = 1,
  /*
   * AUTHORIZATION_TYPE_UNDELEGATE defines an authorization type for Msg/Undelegate
   */
  COSMOS__STAKING__V1BETA1__AUTHORIZATION_TYPE__AUTHORIZATION_TYPE_UNDELEGATE = 2,
  /*
   * AUTHORIZATION_TYPE_REDELEGATE defines an authorization type for Msg/BeginRedelegate
   */
  COSMOS__STAKING__V1BETA1__AUTHORIZATION_TYPE__AUTHORIZATION_TYPE_REDELEGATE = 3,
  /*
   * AUTHORIZATION_TYPE_CANCEL_UNBONDING_DELEGATION defines an authorization type for Msg/MsgCancelUnbondingDelegation
   */
  COSMOS__STAKING__V1BETA1__AUTHORIZATION_TYPE__AUTHORIZATION_TYPE_CANCEL_UNBONDING_DELEGATION = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(COSMOS__STAKING__V1BETA1__AUTHORIZATION_TYPE)
} Cosmos__Staking__V1beta1__AuthorizationType;

/* --- messages --- */

/*
 * Validators defines list of validator addresses.
 */
struct  Cosmos__Staking__V1beta1__StakeAuthorization__Validators
{
  ProtobufCMessage base;
  size_t n_address;
  char **address;
};
#define COSMOS__STAKING__V1BETA1__STAKE_AUTHORIZATION__VALIDATORS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__staking__v1beta1__stake_authorization__validators__descriptor) \
, 0,NULL }


typedef enum {
  COSMOS__STAKING__V1BETA1__STAKE_AUTHORIZATION__VALIDATORS__NOT_SET = 0,
  COSMOS__STAKING__V1BETA1__STAKE_AUTHORIZATION__VALIDATORS_ALLOW_LIST = 2,
  COSMOS__STAKING__V1BETA1__STAKE_AUTHORIZATION__VALIDATORS_DENY_LIST = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(COSMOS__STAKING__V1BETA1__STAKE_AUTHORIZATION__VALIDATORS__CASE)
} Cosmos__Staking__V1beta1__StakeAuthorization__ValidatorsCase;

/*
 * StakeAuthorization defines authorization for delegate/undelegate/redelegate.
 */
struct  Cosmos__Staking__V1beta1__StakeAuthorization
{
  ProtobufCMessage base;
  /*
   * max_tokens specifies the maximum amount of tokens can be delegate to a validator. If it is
   * empty, there is no spend limit and any amount of coins can be delegated.
   */
  Cosmos__Base__V1beta1__Coin *max_tokens;
  /*
   * authorization_type defines one of AuthorizationType.
   */
  Cosmos__Staking__V1beta1__AuthorizationType authorization_type;
  Cosmos__Staking__V1beta1__StakeAuthorization__ValidatorsCase validators_case;
  union {
    /*
     * allow_list specifies list of validator addresses to whom grantee can delegate tokens on behalf of granter's
     * account.
     */
    Cosmos__Staking__V1beta1__StakeAuthorization__Validators *allow_list;
    /*
     * deny_list specifies list of validator addresses to whom grantee can not delegate tokens.
     */
    Cosmos__Staking__V1beta1__StakeAuthorization__Validators *deny_list;
  };
};
#define COSMOS__STAKING__V1BETA1__STAKE_AUTHORIZATION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__staking__v1beta1__stake_authorization__descriptor) \
, NULL, COSMOS__STAKING__V1BETA1__AUTHORIZATION_TYPE__AUTHORIZATION_TYPE_UNSPECIFIED, COSMOS__STAKING__V1BETA1__STAKE_AUTHORIZATION__VALIDATORS__NOT_SET, {0} }


/* Cosmos__Staking__V1beta1__StakeAuthorization__Validators methods */
void   cosmos__staking__v1beta1__stake_authorization__validators__init
                     (Cosmos__Staking__V1beta1__StakeAuthorization__Validators         *message);
/* Cosmos__Staking__V1beta1__StakeAuthorization methods */
void   cosmos__staking__v1beta1__stake_authorization__init
                     (Cosmos__Staking__V1beta1__StakeAuthorization         *message);
size_t cosmos__staking__v1beta1__stake_authorization__get_packed_size
                     (const Cosmos__Staking__V1beta1__StakeAuthorization   *message);
size_t cosmos__staking__v1beta1__stake_authorization__pack
                     (const Cosmos__Staking__V1beta1__StakeAuthorization   *message,
                      uint8_t             *out);
size_t cosmos__staking__v1beta1__stake_authorization__pack_to_buffer
                     (const Cosmos__Staking__V1beta1__StakeAuthorization   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Staking__V1beta1__StakeAuthorization *
       cosmos__staking__v1beta1__stake_authorization__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__staking__v1beta1__stake_authorization__free_unpacked
                     (Cosmos__Staking__V1beta1__StakeAuthorization *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Cosmos__Staking__V1beta1__StakeAuthorization__Validators_Closure)
                 (const Cosmos__Staking__V1beta1__StakeAuthorization__Validators *message,
                  void *closure_data);
typedef void (*Cosmos__Staking__V1beta1__StakeAuthorization_Closure)
                 (const Cosmos__Staking__V1beta1__StakeAuthorization *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    cosmos__staking__v1beta1__authorization_type__descriptor;
extern const ProtobufCMessageDescriptor cosmos__staking__v1beta1__stake_authorization__descriptor;
extern const ProtobufCMessageDescriptor cosmos__staking__v1beta1__stake_authorization__validators__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_cosmos_2fstaking_2fv1beta1_2fauthz_2eproto__INCLUDED */
