/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: cosmos/staking/v1beta1/staking.proto */

#ifndef PROTOBUF_C_cosmos_2fstaking_2fv1beta1_2fstaking_2eproto__INCLUDED
#define PROTOBUF_C_cosmos_2fstaking_2fv1beta1_2fstaking_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protobuf-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1005002 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protobuf-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protobuf-c.
#endif

#include "gogoproto/gogo.pb-c.h"
#include "google/protobuf/any.pb-c.h"
#include "google/protobuf/duration.pb-c.h"
#include "google/protobuf/timestamp.pb-c.h"
#include "cosmos_proto/cosmos.pb-c.h"
#include "cosmos/base/v1beta1/coin.pb-c.h"
#include "amino/amino.pb-c.h"
#include "tendermint/types/types.pb-c.h"
#include "tendermint/abci/types.pb-c.h"

typedef struct Cosmos__Staking__V1beta1__HistoricalInfo Cosmos__Staking__V1beta1__HistoricalInfo;
typedef struct Cosmos__Staking__V1beta1__CommissionRates Cosmos__Staking__V1beta1__CommissionRates;
typedef struct Cosmos__Staking__V1beta1__Commission Cosmos__Staking__V1beta1__Commission;
typedef struct Cosmos__Staking__V1beta1__Description Cosmos__Staking__V1beta1__Description;
typedef struct Cosmos__Staking__V1beta1__Validator Cosmos__Staking__V1beta1__Validator;
typedef struct Cosmos__Staking__V1beta1__ValAddresses Cosmos__Staking__V1beta1__ValAddresses;
typedef struct Cosmos__Staking__V1beta1__DVPair Cosmos__Staking__V1beta1__DVPair;
typedef struct Cosmos__Staking__V1beta1__DVPairs Cosmos__Staking__V1beta1__DVPairs;
typedef struct Cosmos__Staking__V1beta1__DVVTriplet Cosmos__Staking__V1beta1__DVVTriplet;
typedef struct Cosmos__Staking__V1beta1__DVVTriplets Cosmos__Staking__V1beta1__DVVTriplets;
typedef struct Cosmos__Staking__V1beta1__Delegation Cosmos__Staking__V1beta1__Delegation;
typedef struct Cosmos__Staking__V1beta1__UnbondingDelegation Cosmos__Staking__V1beta1__UnbondingDelegation;
typedef struct Cosmos__Staking__V1beta1__UnbondingDelegationEntry Cosmos__Staking__V1beta1__UnbondingDelegationEntry;
typedef struct Cosmos__Staking__V1beta1__RedelegationEntry Cosmos__Staking__V1beta1__RedelegationEntry;
typedef struct Cosmos__Staking__V1beta1__Redelegation Cosmos__Staking__V1beta1__Redelegation;
typedef struct Cosmos__Staking__V1beta1__Params Cosmos__Staking__V1beta1__Params;
typedef struct Cosmos__Staking__V1beta1__DelegationResponse Cosmos__Staking__V1beta1__DelegationResponse;
typedef struct Cosmos__Staking__V1beta1__RedelegationEntryResponse Cosmos__Staking__V1beta1__RedelegationEntryResponse;
typedef struct Cosmos__Staking__V1beta1__RedelegationResponse Cosmos__Staking__V1beta1__RedelegationResponse;
typedef struct Cosmos__Staking__V1beta1__Pool Cosmos__Staking__V1beta1__Pool;
typedef struct Cosmos__Staking__V1beta1__ValidatorUpdates Cosmos__Staking__V1beta1__ValidatorUpdates;


/* --- enums --- */

/*
 * BondStatus is the status of a validator.
 */
typedef enum _Cosmos__Staking__V1beta1__BondStatus {
  /*
   * UNSPECIFIED defines an invalid validator status.
   */
  COSMOS__STAKING__V1BETA1__BOND_STATUS__BOND_STATUS_UNSPECIFIED = 0,
  /*
   * UNBONDED defines a validator that is not bonded.
   */
  COSMOS__STAKING__V1BETA1__BOND_STATUS__BOND_STATUS_UNBONDED = 1,
  /*
   * UNBONDING defines a validator that is unbonding.
   */
  COSMOS__STAKING__V1BETA1__BOND_STATUS__BOND_STATUS_UNBONDING = 2,
  /*
   * BONDED defines a validator that is bonded.
   */
  COSMOS__STAKING__V1BETA1__BOND_STATUS__BOND_STATUS_BONDED = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(COSMOS__STAKING__V1BETA1__BOND_STATUS)
} Cosmos__Staking__V1beta1__BondStatus;
/*
 * Infraction indicates the infraction a validator commited.
 */
typedef enum _Cosmos__Staking__V1beta1__Infraction {
  /*
   * UNSPECIFIED defines an empty infraction.
   */
  COSMOS__STAKING__V1BETA1__INFRACTION__INFRACTION_UNSPECIFIED = 0,
  /*
   * DOUBLE_SIGN defines a validator that double-signs a block.
   */
  COSMOS__STAKING__V1BETA1__INFRACTION__INFRACTION_DOUBLE_SIGN = 1,
  /*
   * DOWNTIME defines a validator that missed signing too many blocks.
   */
  COSMOS__STAKING__V1BETA1__INFRACTION__INFRACTION_DOWNTIME = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(COSMOS__STAKING__V1BETA1__INFRACTION)
} Cosmos__Staking__V1beta1__Infraction;

/* --- messages --- */

/*
 * HistoricalInfo contains header and validator information for a given block.
 * It is stored as part of staking module's state, which persists the `n` most
 * recent HistoricalInfo
 * (`n` is set by the staking module's `historical_entries` parameter).
 */
struct  Cosmos__Staking__V1beta1__HistoricalInfo
{
  ProtobufCMessage base;
  Tendermint__Types__Header *header;
  size_t n_valset;
  Cosmos__Staking__V1beta1__Validator **valset;
};
#define COSMOS__STAKING__V1BETA1__HISTORICAL_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__staking__v1beta1__historical_info__descriptor) \
, NULL, 0,NULL }


/*
 * CommissionRates defines the initial commission rates to be used for creating
 * a validator.
 */
struct  Cosmos__Staking__V1beta1__CommissionRates
{
  ProtobufCMessage base;
  /*
   * rate is the commission rate charged to delegators, as a fraction.
   */
  char *rate;
  /*
   * max_rate defines the maximum commission rate which validator can ever charge, as a fraction.
   */
  char *max_rate;
  /*
   * max_change_rate defines the maximum daily increase of the validator commission, as a fraction.
   */
  char *max_change_rate;
};
#define COSMOS__STAKING__V1BETA1__COMMISSION_RATES__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__staking__v1beta1__commission_rates__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


/*
 * Commission defines commission parameters for a given validator.
 */
struct  Cosmos__Staking__V1beta1__Commission
{
  ProtobufCMessage base;
  /*
   * commission_rates defines the initial commission rates to be used for creating a validator.
   */
  Cosmos__Staking__V1beta1__CommissionRates *commission_rates;
  /*
   * update_time is the last time the commission rate was changed.
   */
  Google__Protobuf__Timestamp *update_time;
};
#define COSMOS__STAKING__V1BETA1__COMMISSION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__staking__v1beta1__commission__descriptor) \
, NULL, NULL }


/*
 * Description defines a validator description.
 */
struct  Cosmos__Staking__V1beta1__Description
{
  ProtobufCMessage base;
  /*
   * moniker defines a human-readable name for the validator.
   */
  char *moniker;
  /*
   * identity defines an optional identity signature (ex. UPort or Keybase).
   */
  char *identity;
  /*
   * website defines an optional website link.
   */
  char *website;
  /*
   * security_contact defines an optional email for security contact.
   */
  char *security_contact;
  /*
   * details define other optional details.
   */
  char *details;
};
#define COSMOS__STAKING__V1BETA1__DESCRIPTION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__staking__v1beta1__description__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


/*
 * Validator defines a validator, together with the total amount of the
 * Validator's bond shares and their exchange rate to coins. Slashing results in
 * a decrease in the exchange rate, allowing correct calculation of future
 * undelegations without iterating over delegators. When coins are delegated to
 * this validator, the validator is credited with a delegation whose number of
 * bond shares is based on the amount of coins delegated divided by the current
 * exchange rate. Voting power can be calculated as total bonded shares
 * multiplied by exchange rate.
 */
struct  Cosmos__Staking__V1beta1__Validator
{
  ProtobufCMessage base;
  /*
   * operator_address defines the address of the validator's operator; bech encoded in JSON.
   */
  char *operator_address;
  /*
   * consensus_pubkey is the consensus public key of the validator, as a Protobuf Any.
   */
  Google__Protobuf__Any *consensus_pubkey;
  /*
   * jailed defined whether the validator has been jailed from bonded status or not.
   */
  protobuf_c_boolean jailed;
  /*
   * status is the validator status (bonded/unbonding/unbonded).
   */
  Cosmos__Staking__V1beta1__BondStatus status;
  /*
   * tokens define the delegated tokens (incl. self-delegation).
   */
  char *tokens;
  /*
   * delegator_shares defines total shares issued to a validator's delegators.
   */
  char *delegator_shares;
  /*
   * description defines the description terms for the validator.
   */
  Cosmos__Staking__V1beta1__Description *description;
  /*
   * unbonding_height defines, if unbonding, the height at which this validator has begun unbonding.
   */
  int64_t unbonding_height;
  /*
   * unbonding_time defines, if unbonding, the min time for the validator to complete unbonding.
   */
  Google__Protobuf__Timestamp *unbonding_time;
  /*
   * commission defines the commission parameters.
   */
  Cosmos__Staking__V1beta1__Commission *commission;
  /*
   * min_self_delegation is the validator's self declared minimum self delegation.
   */
  char *min_self_delegation;
  /*
   * strictly positive if this validator's unbonding has been stopped by external modules
   */
  int64_t unbonding_on_hold_ref_count;
  /*
   * list of unbonding ids, each uniquely identifing an unbonding of this validator
   */
  size_t n_unbonding_ids;
  uint64_t *unbonding_ids;
};
#define COSMOS__STAKING__V1BETA1__VALIDATOR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__staking__v1beta1__validator__descriptor) \
, (char *)protobuf_c_empty_string, NULL, 0, COSMOS__STAKING__V1BETA1__BOND_STATUS__BOND_STATUS_UNSPECIFIED, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, NULL, 0, NULL, NULL, (char *)protobuf_c_empty_string, 0, 0,NULL }


/*
 * ValAddresses defines a repeated set of validator addresses.
 */
struct  Cosmos__Staking__V1beta1__ValAddresses
{
  ProtobufCMessage base;
  size_t n_addresses;
  char **addresses;
};
#define COSMOS__STAKING__V1BETA1__VAL_ADDRESSES__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__staking__v1beta1__val_addresses__descriptor) \
, 0,NULL }


/*
 * DVPair is struct that just has a delegator-validator pair with no other data.
 * It is intended to be used as a marshalable pointer. For example, a DVPair can
 * be used to construct the key to getting an UnbondingDelegation from state.
 */
struct  Cosmos__Staking__V1beta1__DVPair
{
  ProtobufCMessage base;
  char *delegator_address;
  char *validator_address;
};
#define COSMOS__STAKING__V1BETA1__DVPAIR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__staking__v1beta1__dvpair__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


/*
 * DVPairs defines an array of DVPair objects.
 */
struct  Cosmos__Staking__V1beta1__DVPairs
{
  ProtobufCMessage base;
  size_t n_pairs;
  Cosmos__Staking__V1beta1__DVPair **pairs;
};
#define COSMOS__STAKING__V1BETA1__DVPAIRS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__staking__v1beta1__dvpairs__descriptor) \
, 0,NULL }


/*
 * DVVTriplet is struct that just has a delegator-validator-validator triplet
 * with no other data. It is intended to be used as a marshalable pointer. For
 * example, a DVVTriplet can be used to construct the key to getting a
 * Redelegation from state.
 */
struct  Cosmos__Staking__V1beta1__DVVTriplet
{
  ProtobufCMessage base;
  char *delegator_address;
  char *validator_src_address;
  char *validator_dst_address;
};
#define COSMOS__STAKING__V1BETA1__DVVTRIPLET__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__staking__v1beta1__dvvtriplet__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


/*
 * DVVTriplets defines an array of DVVTriplet objects.
 */
struct  Cosmos__Staking__V1beta1__DVVTriplets
{
  ProtobufCMessage base;
  size_t n_triplets;
  Cosmos__Staking__V1beta1__DVVTriplet **triplets;
};
#define COSMOS__STAKING__V1BETA1__DVVTRIPLETS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__staking__v1beta1__dvvtriplets__descriptor) \
, 0,NULL }


/*
 * Delegation represents the bond with tokens held by an account. It is
 * owned by one delegator, and is associated with the voting power of one
 * validator.
 */
struct  Cosmos__Staking__V1beta1__Delegation
{
  ProtobufCMessage base;
  /*
   * delegator_address is the encoded address of the delegator.
   */
  char *delegator_address;
  /*
   * validator_address is the encoded address of the validator.
   */
  char *validator_address;
  /*
   * shares define the delegation shares received.
   */
  char *shares;
};
#define COSMOS__STAKING__V1BETA1__DELEGATION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__staking__v1beta1__delegation__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


/*
 * UnbondingDelegation stores all of a single delegator's unbonding bonds
 * for a single validator in an time-ordered list.
 */
struct  Cosmos__Staking__V1beta1__UnbondingDelegation
{
  ProtobufCMessage base;
  /*
   * delegator_address is the encoded address of the delegator.
   */
  char *delegator_address;
  /*
   * validator_address is the encoded address of the validator.
   */
  char *validator_address;
  /*
   * entries are the unbonding delegation entries.
   */
  /*
   * unbonding delegation entries
   */
  size_t n_entries;
  Cosmos__Staking__V1beta1__UnbondingDelegationEntry **entries;
};
#define COSMOS__STAKING__V1BETA1__UNBONDING_DELEGATION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__staking__v1beta1__unbonding_delegation__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0,NULL }


/*
 * UnbondingDelegationEntry defines an unbonding object with relevant metadata.
 */
struct  Cosmos__Staking__V1beta1__UnbondingDelegationEntry
{
  ProtobufCMessage base;
  /*
   * creation_height is the height which the unbonding took place.
   */
  int64_t creation_height;
  /*
   * completion_time is the unix time for unbonding completion.
   */
  Google__Protobuf__Timestamp *completion_time;
  /*
   * initial_balance defines the tokens initially scheduled to receive at completion.
   */
  char *initial_balance;
  /*
   * balance defines the tokens to receive at completion.
   */
  char *balance;
  /*
   * Incrementing id that uniquely identifies this entry
   */
  uint64_t unbonding_id;
  /*
   * Strictly positive if this entry's unbonding has been stopped by external modules
   */
  int64_t unbonding_on_hold_ref_count;
};
#define COSMOS__STAKING__V1BETA1__UNBONDING_DELEGATION_ENTRY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__staking__v1beta1__unbonding_delegation_entry__descriptor) \
, 0, NULL, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0, 0 }


/*
 * RedelegationEntry defines a redelegation object with relevant metadata.
 */
struct  Cosmos__Staking__V1beta1__RedelegationEntry
{
  ProtobufCMessage base;
  /*
   * creation_height  defines the height which the redelegation took place.
   */
  int64_t creation_height;
  /*
   * completion_time defines the unix time for redelegation completion.
   */
  Google__Protobuf__Timestamp *completion_time;
  /*
   * initial_balance defines the initial balance when redelegation started.
   */
  char *initial_balance;
  /*
   * shares_dst is the amount of destination-validator shares created by redelegation.
   */
  char *shares_dst;
  /*
   * Incrementing id that uniquely identifies this entry
   */
  uint64_t unbonding_id;
  /*
   * Strictly positive if this entry's unbonding has been stopped by external modules
   */
  int64_t unbonding_on_hold_ref_count;
};
#define COSMOS__STAKING__V1BETA1__REDELEGATION_ENTRY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__staking__v1beta1__redelegation_entry__descriptor) \
, 0, NULL, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0, 0 }


/*
 * Redelegation contains the list of a particular delegator's redelegating bonds
 * from a particular source validator to a particular destination validator.
 */
struct  Cosmos__Staking__V1beta1__Redelegation
{
  ProtobufCMessage base;
  /*
   * delegator_address is the bech32-encoded address of the delegator.
   */
  char *delegator_address;
  /*
   * validator_src_address is the validator redelegation source operator address.
   */
  char *validator_src_address;
  /*
   * validator_dst_address is the validator redelegation destination operator address.
   */
  char *validator_dst_address;
  /*
   * entries are the redelegation entries.
   */
  /*
   * redelegation entries
   */
  size_t n_entries;
  Cosmos__Staking__V1beta1__RedelegationEntry **entries;
};
#define COSMOS__STAKING__V1BETA1__REDELEGATION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__staking__v1beta1__redelegation__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0,NULL }


/*
 * Params defines the parameters for the x/staking module.
 */
struct  Cosmos__Staking__V1beta1__Params
{
  ProtobufCMessage base;
  /*
   * unbonding_time is the time duration of unbonding.
   */
  Google__Protobuf__Duration *unbonding_time;
  /*
   * max_validators is the maximum number of validators.
   */
  uint32_t max_validators;
  /*
   * max_entries is the max entries for either unbonding delegation or redelegation (per pair/trio).
   */
  uint32_t max_entries;
  /*
   * historical_entries is the number of historical entries to persist.
   */
  uint32_t historical_entries;
  /*
   * bond_denom defines the bondable coin denomination.
   */
  char *bond_denom;
  /*
   * min_commission_rate is the chain-wide minimum commission rate that a validator can charge their delegators
   */
  char *min_commission_rate;
};
#define COSMOS__STAKING__V1BETA1__PARAMS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__staking__v1beta1__params__descriptor) \
, NULL, 0, 0, 0, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


/*
 * DelegationResponse is equivalent to Delegation except that it contains a
 * balance in addition to shares which is more suitable for client responses.
 */
struct  Cosmos__Staking__V1beta1__DelegationResponse
{
  ProtobufCMessage base;
  Cosmos__Staking__V1beta1__Delegation *delegation;
  Cosmos__Base__V1beta1__Coin *balance;
};
#define COSMOS__STAKING__V1BETA1__DELEGATION_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__staking__v1beta1__delegation_response__descriptor) \
, NULL, NULL }


/*
 * RedelegationEntryResponse is equivalent to a RedelegationEntry except that it
 * contains a balance in addition to shares which is more suitable for client
 * responses.
 */
struct  Cosmos__Staking__V1beta1__RedelegationEntryResponse
{
  ProtobufCMessage base;
  Cosmos__Staking__V1beta1__RedelegationEntry *redelegation_entry;
  char *balance;
};
#define COSMOS__STAKING__V1BETA1__REDELEGATION_ENTRY_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__staking__v1beta1__redelegation_entry_response__descriptor) \
, NULL, (char *)protobuf_c_empty_string }


/*
 * RedelegationResponse is equivalent to a Redelegation except that its entries
 * contain a balance in addition to shares which is more suitable for client
 * responses.
 */
struct  Cosmos__Staking__V1beta1__RedelegationResponse
{
  ProtobufCMessage base;
  Cosmos__Staking__V1beta1__Redelegation *redelegation;
  size_t n_entries;
  Cosmos__Staking__V1beta1__RedelegationEntryResponse **entries;
};
#define COSMOS__STAKING__V1BETA1__REDELEGATION_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__staking__v1beta1__redelegation_response__descriptor) \
, NULL, 0,NULL }


/*
 * Pool is used for tracking bonded and not-bonded token supply of the bond
 * denomination.
 */
struct  Cosmos__Staking__V1beta1__Pool
{
  ProtobufCMessage base;
  char *not_bonded_tokens;
  char *bonded_tokens;
};
#define COSMOS__STAKING__V1BETA1__POOL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__staking__v1beta1__pool__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


/*
 * ValidatorUpdates defines an array of abci.ValidatorUpdate objects.
 * TODO: explore moving this to proto/cosmos/base to separate modules from tendermint dependence
 */
struct  Cosmos__Staking__V1beta1__ValidatorUpdates
{
  ProtobufCMessage base;
  size_t n_updates;
  Tendermint__Abci__ValidatorUpdate **updates;
};
#define COSMOS__STAKING__V1BETA1__VALIDATOR_UPDATES__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__staking__v1beta1__validator_updates__descriptor) \
, 0,NULL }


/* Cosmos__Staking__V1beta1__HistoricalInfo methods */
void   cosmos__staking__v1beta1__historical_info__init
                     (Cosmos__Staking__V1beta1__HistoricalInfo         *message);
size_t cosmos__staking__v1beta1__historical_info__get_packed_size
                     (const Cosmos__Staking__V1beta1__HistoricalInfo   *message);
size_t cosmos__staking__v1beta1__historical_info__pack
                     (const Cosmos__Staking__V1beta1__HistoricalInfo   *message,
                      uint8_t             *out);
size_t cosmos__staking__v1beta1__historical_info__pack_to_buffer
                     (const Cosmos__Staking__V1beta1__HistoricalInfo   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Staking__V1beta1__HistoricalInfo *
       cosmos__staking__v1beta1__historical_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__staking__v1beta1__historical_info__free_unpacked
                     (Cosmos__Staking__V1beta1__HistoricalInfo *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__Staking__V1beta1__CommissionRates methods */
void   cosmos__staking__v1beta1__commission_rates__init
                     (Cosmos__Staking__V1beta1__CommissionRates         *message);
size_t cosmos__staking__v1beta1__commission_rates__get_packed_size
                     (const Cosmos__Staking__V1beta1__CommissionRates   *message);
size_t cosmos__staking__v1beta1__commission_rates__pack
                     (const Cosmos__Staking__V1beta1__CommissionRates   *message,
                      uint8_t             *out);
size_t cosmos__staking__v1beta1__commission_rates__pack_to_buffer
                     (const Cosmos__Staking__V1beta1__CommissionRates   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Staking__V1beta1__CommissionRates *
       cosmos__staking__v1beta1__commission_rates__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__staking__v1beta1__commission_rates__free_unpacked
                     (Cosmos__Staking__V1beta1__CommissionRates *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__Staking__V1beta1__Commission methods */
void   cosmos__staking__v1beta1__commission__init
                     (Cosmos__Staking__V1beta1__Commission         *message);
size_t cosmos__staking__v1beta1__commission__get_packed_size
                     (const Cosmos__Staking__V1beta1__Commission   *message);
size_t cosmos__staking__v1beta1__commission__pack
                     (const Cosmos__Staking__V1beta1__Commission   *message,
                      uint8_t             *out);
size_t cosmos__staking__v1beta1__commission__pack_to_buffer
                     (const Cosmos__Staking__V1beta1__Commission   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Staking__V1beta1__Commission *
       cosmos__staking__v1beta1__commission__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__staking__v1beta1__commission__free_unpacked
                     (Cosmos__Staking__V1beta1__Commission *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__Staking__V1beta1__Description methods */
void   cosmos__staking__v1beta1__description__init
                     (Cosmos__Staking__V1beta1__Description         *message);
size_t cosmos__staking__v1beta1__description__get_packed_size
                     (const Cosmos__Staking__V1beta1__Description   *message);
size_t cosmos__staking__v1beta1__description__pack
                     (const Cosmos__Staking__V1beta1__Description   *message,
                      uint8_t             *out);
size_t cosmos__staking__v1beta1__description__pack_to_buffer
                     (const Cosmos__Staking__V1beta1__Description   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Staking__V1beta1__Description *
       cosmos__staking__v1beta1__description__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__staking__v1beta1__description__free_unpacked
                     (Cosmos__Staking__V1beta1__Description *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__Staking__V1beta1__Validator methods */
void   cosmos__staking__v1beta1__validator__init
                     (Cosmos__Staking__V1beta1__Validator         *message);
size_t cosmos__staking__v1beta1__validator__get_packed_size
                     (const Cosmos__Staking__V1beta1__Validator   *message);
size_t cosmos__staking__v1beta1__validator__pack
                     (const Cosmos__Staking__V1beta1__Validator   *message,
                      uint8_t             *out);
size_t cosmos__staking__v1beta1__validator__pack_to_buffer
                     (const Cosmos__Staking__V1beta1__Validator   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Staking__V1beta1__Validator *
       cosmos__staking__v1beta1__validator__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__staking__v1beta1__validator__free_unpacked
                     (Cosmos__Staking__V1beta1__Validator *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__Staking__V1beta1__ValAddresses methods */
void   cosmos__staking__v1beta1__val_addresses__init
                     (Cosmos__Staking__V1beta1__ValAddresses         *message);
size_t cosmos__staking__v1beta1__val_addresses__get_packed_size
                     (const Cosmos__Staking__V1beta1__ValAddresses   *message);
size_t cosmos__staking__v1beta1__val_addresses__pack
                     (const Cosmos__Staking__V1beta1__ValAddresses   *message,
                      uint8_t             *out);
size_t cosmos__staking__v1beta1__val_addresses__pack_to_buffer
                     (const Cosmos__Staking__V1beta1__ValAddresses   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Staking__V1beta1__ValAddresses *
       cosmos__staking__v1beta1__val_addresses__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__staking__v1beta1__val_addresses__free_unpacked
                     (Cosmos__Staking__V1beta1__ValAddresses *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__Staking__V1beta1__DVPair methods */
void   cosmos__staking__v1beta1__dvpair__init
                     (Cosmos__Staking__V1beta1__DVPair         *message);
size_t cosmos__staking__v1beta1__dvpair__get_packed_size
                     (const Cosmos__Staking__V1beta1__DVPair   *message);
size_t cosmos__staking__v1beta1__dvpair__pack
                     (const Cosmos__Staking__V1beta1__DVPair   *message,
                      uint8_t             *out);
size_t cosmos__staking__v1beta1__dvpair__pack_to_buffer
                     (const Cosmos__Staking__V1beta1__DVPair   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Staking__V1beta1__DVPair *
       cosmos__staking__v1beta1__dvpair__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__staking__v1beta1__dvpair__free_unpacked
                     (Cosmos__Staking__V1beta1__DVPair *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__Staking__V1beta1__DVPairs methods */
void   cosmos__staking__v1beta1__dvpairs__init
                     (Cosmos__Staking__V1beta1__DVPairs         *message);
size_t cosmos__staking__v1beta1__dvpairs__get_packed_size
                     (const Cosmos__Staking__V1beta1__DVPairs   *message);
size_t cosmos__staking__v1beta1__dvpairs__pack
                     (const Cosmos__Staking__V1beta1__DVPairs   *message,
                      uint8_t             *out);
size_t cosmos__staking__v1beta1__dvpairs__pack_to_buffer
                     (const Cosmos__Staking__V1beta1__DVPairs   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Staking__V1beta1__DVPairs *
       cosmos__staking__v1beta1__dvpairs__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__staking__v1beta1__dvpairs__free_unpacked
                     (Cosmos__Staking__V1beta1__DVPairs *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__Staking__V1beta1__DVVTriplet methods */
void   cosmos__staking__v1beta1__dvvtriplet__init
                     (Cosmos__Staking__V1beta1__DVVTriplet         *message);
size_t cosmos__staking__v1beta1__dvvtriplet__get_packed_size
                     (const Cosmos__Staking__V1beta1__DVVTriplet   *message);
size_t cosmos__staking__v1beta1__dvvtriplet__pack
                     (const Cosmos__Staking__V1beta1__DVVTriplet   *message,
                      uint8_t             *out);
size_t cosmos__staking__v1beta1__dvvtriplet__pack_to_buffer
                     (const Cosmos__Staking__V1beta1__DVVTriplet   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Staking__V1beta1__DVVTriplet *
       cosmos__staking__v1beta1__dvvtriplet__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__staking__v1beta1__dvvtriplet__free_unpacked
                     (Cosmos__Staking__V1beta1__DVVTriplet *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__Staking__V1beta1__DVVTriplets methods */
void   cosmos__staking__v1beta1__dvvtriplets__init
                     (Cosmos__Staking__V1beta1__DVVTriplets         *message);
size_t cosmos__staking__v1beta1__dvvtriplets__get_packed_size
                     (const Cosmos__Staking__V1beta1__DVVTriplets   *message);
size_t cosmos__staking__v1beta1__dvvtriplets__pack
                     (const Cosmos__Staking__V1beta1__DVVTriplets   *message,
                      uint8_t             *out);
size_t cosmos__staking__v1beta1__dvvtriplets__pack_to_buffer
                     (const Cosmos__Staking__V1beta1__DVVTriplets   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Staking__V1beta1__DVVTriplets *
       cosmos__staking__v1beta1__dvvtriplets__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__staking__v1beta1__dvvtriplets__free_unpacked
                     (Cosmos__Staking__V1beta1__DVVTriplets *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__Staking__V1beta1__Delegation methods */
void   cosmos__staking__v1beta1__delegation__init
                     (Cosmos__Staking__V1beta1__Delegation         *message);
size_t cosmos__staking__v1beta1__delegation__get_packed_size
                     (const Cosmos__Staking__V1beta1__Delegation   *message);
size_t cosmos__staking__v1beta1__delegation__pack
                     (const Cosmos__Staking__V1beta1__Delegation   *message,
                      uint8_t             *out);
size_t cosmos__staking__v1beta1__delegation__pack_to_buffer
                     (const Cosmos__Staking__V1beta1__Delegation   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Staking__V1beta1__Delegation *
       cosmos__staking__v1beta1__delegation__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__staking__v1beta1__delegation__free_unpacked
                     (Cosmos__Staking__V1beta1__Delegation *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__Staking__V1beta1__UnbondingDelegation methods */
void   cosmos__staking__v1beta1__unbonding_delegation__init
                     (Cosmos__Staking__V1beta1__UnbondingDelegation         *message);
size_t cosmos__staking__v1beta1__unbonding_delegation__get_packed_size
                     (const Cosmos__Staking__V1beta1__UnbondingDelegation   *message);
size_t cosmos__staking__v1beta1__unbonding_delegation__pack
                     (const Cosmos__Staking__V1beta1__UnbondingDelegation   *message,
                      uint8_t             *out);
size_t cosmos__staking__v1beta1__unbonding_delegation__pack_to_buffer
                     (const Cosmos__Staking__V1beta1__UnbondingDelegation   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Staking__V1beta1__UnbondingDelegation *
       cosmos__staking__v1beta1__unbonding_delegation__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__staking__v1beta1__unbonding_delegation__free_unpacked
                     (Cosmos__Staking__V1beta1__UnbondingDelegation *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__Staking__V1beta1__UnbondingDelegationEntry methods */
void   cosmos__staking__v1beta1__unbonding_delegation_entry__init
                     (Cosmos__Staking__V1beta1__UnbondingDelegationEntry         *message);
size_t cosmos__staking__v1beta1__unbonding_delegation_entry__get_packed_size
                     (const Cosmos__Staking__V1beta1__UnbondingDelegationEntry   *message);
size_t cosmos__staking__v1beta1__unbonding_delegation_entry__pack
                     (const Cosmos__Staking__V1beta1__UnbondingDelegationEntry   *message,
                      uint8_t             *out);
size_t cosmos__staking__v1beta1__unbonding_delegation_entry__pack_to_buffer
                     (const Cosmos__Staking__V1beta1__UnbondingDelegationEntry   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Staking__V1beta1__UnbondingDelegationEntry *
       cosmos__staking__v1beta1__unbonding_delegation_entry__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__staking__v1beta1__unbonding_delegation_entry__free_unpacked
                     (Cosmos__Staking__V1beta1__UnbondingDelegationEntry *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__Staking__V1beta1__RedelegationEntry methods */
void   cosmos__staking__v1beta1__redelegation_entry__init
                     (Cosmos__Staking__V1beta1__RedelegationEntry         *message);
size_t cosmos__staking__v1beta1__redelegation_entry__get_packed_size
                     (const Cosmos__Staking__V1beta1__RedelegationEntry   *message);
size_t cosmos__staking__v1beta1__redelegation_entry__pack
                     (const Cosmos__Staking__V1beta1__RedelegationEntry   *message,
                      uint8_t             *out);
size_t cosmos__staking__v1beta1__redelegation_entry__pack_to_buffer
                     (const Cosmos__Staking__V1beta1__RedelegationEntry   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Staking__V1beta1__RedelegationEntry *
       cosmos__staking__v1beta1__redelegation_entry__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__staking__v1beta1__redelegation_entry__free_unpacked
                     (Cosmos__Staking__V1beta1__RedelegationEntry *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__Staking__V1beta1__Redelegation methods */
void   cosmos__staking__v1beta1__redelegation__init
                     (Cosmos__Staking__V1beta1__Redelegation         *message);
size_t cosmos__staking__v1beta1__redelegation__get_packed_size
                     (const Cosmos__Staking__V1beta1__Redelegation   *message);
size_t cosmos__staking__v1beta1__redelegation__pack
                     (const Cosmos__Staking__V1beta1__Redelegation   *message,
                      uint8_t             *out);
size_t cosmos__staking__v1beta1__redelegation__pack_to_buffer
                     (const Cosmos__Staking__V1beta1__Redelegation   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Staking__V1beta1__Redelegation *
       cosmos__staking__v1beta1__redelegation__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__staking__v1beta1__redelegation__free_unpacked
                     (Cosmos__Staking__V1beta1__Redelegation *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__Staking__V1beta1__Params methods */
void   cosmos__staking__v1beta1__params__init
                     (Cosmos__Staking__V1beta1__Params         *message);
size_t cosmos__staking__v1beta1__params__get_packed_size
                     (const Cosmos__Staking__V1beta1__Params   *message);
size_t cosmos__staking__v1beta1__params__pack
                     (const Cosmos__Staking__V1beta1__Params   *message,
                      uint8_t             *out);
size_t cosmos__staking__v1beta1__params__pack_to_buffer
                     (const Cosmos__Staking__V1beta1__Params   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Staking__V1beta1__Params *
       cosmos__staking__v1beta1__params__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__staking__v1beta1__params__free_unpacked
                     (Cosmos__Staking__V1beta1__Params *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__Staking__V1beta1__DelegationResponse methods */
void   cosmos__staking__v1beta1__delegation_response__init
                     (Cosmos__Staking__V1beta1__DelegationResponse         *message);
size_t cosmos__staking__v1beta1__delegation_response__get_packed_size
                     (const Cosmos__Staking__V1beta1__DelegationResponse   *message);
size_t cosmos__staking__v1beta1__delegation_response__pack
                     (const Cosmos__Staking__V1beta1__DelegationResponse   *message,
                      uint8_t             *out);
size_t cosmos__staking__v1beta1__delegation_response__pack_to_buffer
                     (const Cosmos__Staking__V1beta1__DelegationResponse   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Staking__V1beta1__DelegationResponse *
       cosmos__staking__v1beta1__delegation_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__staking__v1beta1__delegation_response__free_unpacked
                     (Cosmos__Staking__V1beta1__DelegationResponse *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__Staking__V1beta1__RedelegationEntryResponse methods */
void   cosmos__staking__v1beta1__redelegation_entry_response__init
                     (Cosmos__Staking__V1beta1__RedelegationEntryResponse         *message);
size_t cosmos__staking__v1beta1__redelegation_entry_response__get_packed_size
                     (const Cosmos__Staking__V1beta1__RedelegationEntryResponse   *message);
size_t cosmos__staking__v1beta1__redelegation_entry_response__pack
                     (const Cosmos__Staking__V1beta1__RedelegationEntryResponse   *message,
                      uint8_t             *out);
size_t cosmos__staking__v1beta1__redelegation_entry_response__pack_to_buffer
                     (const Cosmos__Staking__V1beta1__RedelegationEntryResponse   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Staking__V1beta1__RedelegationEntryResponse *
       cosmos__staking__v1beta1__redelegation_entry_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__staking__v1beta1__redelegation_entry_response__free_unpacked
                     (Cosmos__Staking__V1beta1__RedelegationEntryResponse *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__Staking__V1beta1__RedelegationResponse methods */
void   cosmos__staking__v1beta1__redelegation_response__init
                     (Cosmos__Staking__V1beta1__RedelegationResponse         *message);
size_t cosmos__staking__v1beta1__redelegation_response__get_packed_size
                     (const Cosmos__Staking__V1beta1__RedelegationResponse   *message);
size_t cosmos__staking__v1beta1__redelegation_response__pack
                     (const Cosmos__Staking__V1beta1__RedelegationResponse   *message,
                      uint8_t             *out);
size_t cosmos__staking__v1beta1__redelegation_response__pack_to_buffer
                     (const Cosmos__Staking__V1beta1__RedelegationResponse   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Staking__V1beta1__RedelegationResponse *
       cosmos__staking__v1beta1__redelegation_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__staking__v1beta1__redelegation_response__free_unpacked
                     (Cosmos__Staking__V1beta1__RedelegationResponse *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__Staking__V1beta1__Pool methods */
void   cosmos__staking__v1beta1__pool__init
                     (Cosmos__Staking__V1beta1__Pool         *message);
size_t cosmos__staking__v1beta1__pool__get_packed_size
                     (const Cosmos__Staking__V1beta1__Pool   *message);
size_t cosmos__staking__v1beta1__pool__pack
                     (const Cosmos__Staking__V1beta1__Pool   *message,
                      uint8_t             *out);
size_t cosmos__staking__v1beta1__pool__pack_to_buffer
                     (const Cosmos__Staking__V1beta1__Pool   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Staking__V1beta1__Pool *
       cosmos__staking__v1beta1__pool__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__staking__v1beta1__pool__free_unpacked
                     (Cosmos__Staking__V1beta1__Pool *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__Staking__V1beta1__ValidatorUpdates methods */
void   cosmos__staking__v1beta1__validator_updates__init
                     (Cosmos__Staking__V1beta1__ValidatorUpdates         *message);
size_t cosmos__staking__v1beta1__validator_updates__get_packed_size
                     (const Cosmos__Staking__V1beta1__ValidatorUpdates   *message);
size_t cosmos__staking__v1beta1__validator_updates__pack
                     (const Cosmos__Staking__V1beta1__ValidatorUpdates   *message,
                      uint8_t             *out);
size_t cosmos__staking__v1beta1__validator_updates__pack_to_buffer
                     (const Cosmos__Staking__V1beta1__ValidatorUpdates   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Staking__V1beta1__ValidatorUpdates *
       cosmos__staking__v1beta1__validator_updates__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__staking__v1beta1__validator_updates__free_unpacked
                     (Cosmos__Staking__V1beta1__ValidatorUpdates *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Cosmos__Staking__V1beta1__HistoricalInfo_Closure)
                 (const Cosmos__Staking__V1beta1__HistoricalInfo *message,
                  void *closure_data);
typedef void (*Cosmos__Staking__V1beta1__CommissionRates_Closure)
                 (const Cosmos__Staking__V1beta1__CommissionRates *message,
                  void *closure_data);
typedef void (*Cosmos__Staking__V1beta1__Commission_Closure)
                 (const Cosmos__Staking__V1beta1__Commission *message,
                  void *closure_data);
typedef void (*Cosmos__Staking__V1beta1__Description_Closure)
                 (const Cosmos__Staking__V1beta1__Description *message,
                  void *closure_data);
typedef void (*Cosmos__Staking__V1beta1__Validator_Closure)
                 (const Cosmos__Staking__V1beta1__Validator *message,
                  void *closure_data);
typedef void (*Cosmos__Staking__V1beta1__ValAddresses_Closure)
                 (const Cosmos__Staking__V1beta1__ValAddresses *message,
                  void *closure_data);
typedef void (*Cosmos__Staking__V1beta1__DVPair_Closure)
                 (const Cosmos__Staking__V1beta1__DVPair *message,
                  void *closure_data);
typedef void (*Cosmos__Staking__V1beta1__DVPairs_Closure)
                 (const Cosmos__Staking__V1beta1__DVPairs *message,
                  void *closure_data);
typedef void (*Cosmos__Staking__V1beta1__DVVTriplet_Closure)
                 (const Cosmos__Staking__V1beta1__DVVTriplet *message,
                  void *closure_data);
typedef void (*Cosmos__Staking__V1beta1__DVVTriplets_Closure)
                 (const Cosmos__Staking__V1beta1__DVVTriplets *message,
                  void *closure_data);
typedef void (*Cosmos__Staking__V1beta1__Delegation_Closure)
                 (const Cosmos__Staking__V1beta1__Delegation *message,
                  void *closure_data);
typedef void (*Cosmos__Staking__V1beta1__UnbondingDelegation_Closure)
                 (const Cosmos__Staking__V1beta1__UnbondingDelegation *message,
                  void *closure_data);
typedef void (*Cosmos__Staking__V1beta1__UnbondingDelegationEntry_Closure)
                 (const Cosmos__Staking__V1beta1__UnbondingDelegationEntry *message,
                  void *closure_data);
typedef void (*Cosmos__Staking__V1beta1__RedelegationEntry_Closure)
                 (const Cosmos__Staking__V1beta1__RedelegationEntry *message,
                  void *closure_data);
typedef void (*Cosmos__Staking__V1beta1__Redelegation_Closure)
                 (const Cosmos__Staking__V1beta1__Redelegation *message,
                  void *closure_data);
typedef void (*Cosmos__Staking__V1beta1__Params_Closure)
                 (const Cosmos__Staking__V1beta1__Params *message,
                  void *closure_data);
typedef void (*Cosmos__Staking__V1beta1__DelegationResponse_Closure)
                 (const Cosmos__Staking__V1beta1__DelegationResponse *message,
                  void *closure_data);
typedef void (*Cosmos__Staking__V1beta1__RedelegationEntryResponse_Closure)
                 (const Cosmos__Staking__V1beta1__RedelegationEntryResponse *message,
                  void *closure_data);
typedef void (*Cosmos__Staking__V1beta1__RedelegationResponse_Closure)
                 (const Cosmos__Staking__V1beta1__RedelegationResponse *message,
                  void *closure_data);
typedef void (*Cosmos__Staking__V1beta1__Pool_Closure)
                 (const Cosmos__Staking__V1beta1__Pool *message,
                  void *closure_data);
typedef void (*Cosmos__Staking__V1beta1__ValidatorUpdates_Closure)
                 (const Cosmos__Staking__V1beta1__ValidatorUpdates *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    cosmos__staking__v1beta1__bond_status__descriptor;
extern const ProtobufCEnumDescriptor    cosmos__staking__v1beta1__infraction__descriptor;
extern const ProtobufCMessageDescriptor cosmos__staking__v1beta1__historical_info__descriptor;
extern const ProtobufCMessageDescriptor cosmos__staking__v1beta1__commission_rates__descriptor;
extern const ProtobufCMessageDescriptor cosmos__staking__v1beta1__commission__descriptor;
extern const ProtobufCMessageDescriptor cosmos__staking__v1beta1__description__descriptor;
extern const ProtobufCMessageDescriptor cosmos__staking__v1beta1__validator__descriptor;
extern const ProtobufCMessageDescriptor cosmos__staking__v1beta1__val_addresses__descriptor;
extern const ProtobufCMessageDescriptor cosmos__staking__v1beta1__dvpair__descriptor;
extern const ProtobufCMessageDescriptor cosmos__staking__v1beta1__dvpairs__descriptor;
extern const ProtobufCMessageDescriptor cosmos__staking__v1beta1__dvvtriplet__descriptor;
extern const ProtobufCMessageDescriptor cosmos__staking__v1beta1__dvvtriplets__descriptor;
extern const ProtobufCMessageDescriptor cosmos__staking__v1beta1__delegation__descriptor;
extern const ProtobufCMessageDescriptor cosmos__staking__v1beta1__unbonding_delegation__descriptor;
extern const ProtobufCMessageDescriptor cosmos__staking__v1beta1__unbonding_delegation_entry__descriptor;
extern const ProtobufCMessageDescriptor cosmos__staking__v1beta1__redelegation_entry__descriptor;
extern const ProtobufCMessageDescriptor cosmos__staking__v1beta1__redelegation__descriptor;
extern const ProtobufCMessageDescriptor cosmos__staking__v1beta1__params__descriptor;
extern const ProtobufCMessageDescriptor cosmos__staking__v1beta1__delegation_response__descriptor;
extern const ProtobufCMessageDescriptor cosmos__staking__v1beta1__redelegation_entry_response__descriptor;
extern const ProtobufCMessageDescriptor cosmos__staking__v1beta1__redelegation_response__descriptor;
extern const ProtobufCMessageDescriptor cosmos__staking__v1beta1__pool__descriptor;
extern const ProtobufCMessageDescriptor cosmos__staking__v1beta1__validator_updates__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_cosmos_2fstaking_2fv1beta1_2fstaking_2eproto__INCLUDED */
