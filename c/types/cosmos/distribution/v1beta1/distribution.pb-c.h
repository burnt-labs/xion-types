/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: cosmos/distribution/v1beta1/distribution.proto */

#ifndef PROTOBUF_C_cosmos_2fdistribution_2fv1beta1_2fdistribution_2eproto__INCLUDED
#define PROTOBUF_C_cosmos_2fdistribution_2fv1beta1_2fdistribution_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protobuf-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1005002 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protobuf-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protobuf-c.
#endif

#include "gogoproto/gogo.pb-c.h"
#include "cosmos/base/v1beta1/coin.pb-c.h"
#include "cosmos_proto/cosmos.pb-c.h"
#include "amino/amino.pb-c.h"

typedef struct Cosmos__Distribution__V1beta1__Params Cosmos__Distribution__V1beta1__Params;
typedef struct Cosmos__Distribution__V1beta1__ValidatorHistoricalRewards Cosmos__Distribution__V1beta1__ValidatorHistoricalRewards;
typedef struct Cosmos__Distribution__V1beta1__ValidatorCurrentRewards Cosmos__Distribution__V1beta1__ValidatorCurrentRewards;
typedef struct Cosmos__Distribution__V1beta1__ValidatorAccumulatedCommission Cosmos__Distribution__V1beta1__ValidatorAccumulatedCommission;
typedef struct Cosmos__Distribution__V1beta1__ValidatorOutstandingRewards Cosmos__Distribution__V1beta1__ValidatorOutstandingRewards;
typedef struct Cosmos__Distribution__V1beta1__ValidatorSlashEvent Cosmos__Distribution__V1beta1__ValidatorSlashEvent;
typedef struct Cosmos__Distribution__V1beta1__ValidatorSlashEvents Cosmos__Distribution__V1beta1__ValidatorSlashEvents;
typedef struct Cosmos__Distribution__V1beta1__FeePool Cosmos__Distribution__V1beta1__FeePool;
typedef struct Cosmos__Distribution__V1beta1__CommunityPoolSpendProposal Cosmos__Distribution__V1beta1__CommunityPoolSpendProposal;
typedef struct Cosmos__Distribution__V1beta1__DelegatorStartingInfo Cosmos__Distribution__V1beta1__DelegatorStartingInfo;
typedef struct Cosmos__Distribution__V1beta1__DelegationDelegatorReward Cosmos__Distribution__V1beta1__DelegationDelegatorReward;
typedef struct Cosmos__Distribution__V1beta1__CommunityPoolSpendProposalWithDeposit Cosmos__Distribution__V1beta1__CommunityPoolSpendProposalWithDeposit;


/* --- enums --- */


/* --- messages --- */

/*
 * Params defines the set of params for the distribution module.
 */
struct  Cosmos__Distribution__V1beta1__Params
{
  ProtobufCMessage base;
  char *community_tax;
  /*
   * Deprecated: The base_proposer_reward field is deprecated and is no longer used
   * in the x/distribution module's reward mechanism.
   */
  char *base_proposer_reward PROTOBUF_C__DEPRECATED;
  /*
   * Deprecated: The bonus_proposer_reward field is deprecated and is no longer used
   * in the x/distribution module's reward mechanism.
   */
  char *bonus_proposer_reward PROTOBUF_C__DEPRECATED;
  protobuf_c_boolean withdraw_addr_enabled;
};
#define COSMOS__DISTRIBUTION__V1BETA1__PARAMS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__distribution__v1beta1__params__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0 }


/*
 * ValidatorHistoricalRewards represents historical rewards for a validator.
 * Height is implicit within the store key.
 * Cumulative reward ratio is the sum from the zeroeth period
 * until this period of rewards / tokens, per the spec.
 * The reference count indicates the number of objects
 * which might need to reference this historical entry at any point.
 * ReferenceCount =
 *    number of outstanding delegations which ended the associated period (and
 *    might need to read that record)
 *  + number of slashes which ended the associated period (and might need to
 *  read that record)
 *  + one per validator for the zeroeth period, set on initialization
 */
struct  Cosmos__Distribution__V1beta1__ValidatorHistoricalRewards
{
  ProtobufCMessage base;
  size_t n_cumulative_reward_ratio;
  Cosmos__Base__V1beta1__DecCoin **cumulative_reward_ratio;
  uint32_t reference_count;
};
#define COSMOS__DISTRIBUTION__V1BETA1__VALIDATOR_HISTORICAL_REWARDS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__distribution__v1beta1__validator_historical_rewards__descriptor) \
, 0,NULL, 0 }


/*
 * ValidatorCurrentRewards represents current rewards and current
 * period for a validator kept as a running counter and incremented
 * each block as long as the validator's tokens remain constant.
 */
struct  Cosmos__Distribution__V1beta1__ValidatorCurrentRewards
{
  ProtobufCMessage base;
  size_t n_rewards;
  Cosmos__Base__V1beta1__DecCoin **rewards;
  uint64_t period;
};
#define COSMOS__DISTRIBUTION__V1BETA1__VALIDATOR_CURRENT_REWARDS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__distribution__v1beta1__validator_current_rewards__descriptor) \
, 0,NULL, 0 }


/*
 * ValidatorAccumulatedCommission represents accumulated commission
 * for a validator kept as a running counter, can be withdrawn at any time.
 */
struct  Cosmos__Distribution__V1beta1__ValidatorAccumulatedCommission
{
  ProtobufCMessage base;
  size_t n_commission;
  Cosmos__Base__V1beta1__DecCoin **commission;
};
#define COSMOS__DISTRIBUTION__V1BETA1__VALIDATOR_ACCUMULATED_COMMISSION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__distribution__v1beta1__validator_accumulated_commission__descriptor) \
, 0,NULL }


/*
 * ValidatorOutstandingRewards represents outstanding (un-withdrawn) rewards
 * for a validator inexpensive to track, allows simple sanity checks.
 */
struct  Cosmos__Distribution__V1beta1__ValidatorOutstandingRewards
{
  ProtobufCMessage base;
  size_t n_rewards;
  Cosmos__Base__V1beta1__DecCoin **rewards;
};
#define COSMOS__DISTRIBUTION__V1BETA1__VALIDATOR_OUTSTANDING_REWARDS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__distribution__v1beta1__validator_outstanding_rewards__descriptor) \
, 0,NULL }


/*
 * ValidatorSlashEvent represents a validator slash event.
 * Height is implicit within the store key.
 * This is needed to calculate appropriate amount of staking tokens
 * for delegations which are withdrawn after a slash has occurred.
 */
struct  Cosmos__Distribution__V1beta1__ValidatorSlashEvent
{
  ProtobufCMessage base;
  uint64_t validator_period;
  char *fraction;
};
#define COSMOS__DISTRIBUTION__V1BETA1__VALIDATOR_SLASH_EVENT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__distribution__v1beta1__validator_slash_event__descriptor) \
, 0, (char *)protobuf_c_empty_string }


/*
 * ValidatorSlashEvents is a collection of ValidatorSlashEvent messages.
 */
struct  Cosmos__Distribution__V1beta1__ValidatorSlashEvents
{
  ProtobufCMessage base;
  size_t n_validator_slash_events;
  Cosmos__Distribution__V1beta1__ValidatorSlashEvent **validator_slash_events;
};
#define COSMOS__DISTRIBUTION__V1BETA1__VALIDATOR_SLASH_EVENTS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__distribution__v1beta1__validator_slash_events__descriptor) \
, 0,NULL }


/*
 * FeePool is the global fee pool for distribution.
 */
struct  Cosmos__Distribution__V1beta1__FeePool
{
  ProtobufCMessage base;
  size_t n_community_pool;
  Cosmos__Base__V1beta1__DecCoin **community_pool;
};
#define COSMOS__DISTRIBUTION__V1BETA1__FEE_POOL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__distribution__v1beta1__fee_pool__descriptor) \
, 0,NULL }


/*
 * CommunityPoolSpendProposal details a proposal for use of community funds,
 * together with how many coins are proposed to be spent, and to which
 * recipient account.
 * Deprecated: Do not use. As of the Cosmos SDK release v0.47.x, there is no
 * longer a need for an explicit CommunityPoolSpendProposal. To spend community
 * pool funds, a simple MsgCommunityPoolSpend can be invoked from the x/gov
 * module via a v1 governance proposal.
 */
struct  Cosmos__Distribution__V1beta1__CommunityPoolSpendProposal
{
  ProtobufCMessage base;
  char *title;
  char *description;
  char *recipient;
  size_t n_amount;
  Cosmos__Base__V1beta1__Coin **amount;
};
#define COSMOS__DISTRIBUTION__V1BETA1__COMMUNITY_POOL_SPEND_PROPOSAL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__distribution__v1beta1__community_pool_spend_proposal__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0,NULL }


/*
 * DelegatorStartingInfo represents the starting info for a delegator reward
 * period. It tracks the previous validator period, the delegation's amount of
 * staking token, and the creation height (to check later on if any slashes have
 * occurred). NOTE: Even though validators are slashed to whole staking tokens,
 * the delegators within the validator may be left with less than a full token,
 * thus sdk.Dec is used.
 */
struct  Cosmos__Distribution__V1beta1__DelegatorStartingInfo
{
  ProtobufCMessage base;
  uint64_t previous_period;
  char *stake;
  uint64_t height;
};
#define COSMOS__DISTRIBUTION__V1BETA1__DELEGATOR_STARTING_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__distribution__v1beta1__delegator_starting_info__descriptor) \
, 0, (char *)protobuf_c_empty_string, 0 }


/*
 * DelegationDelegatorReward represents the properties
 * of a delegator's delegation reward.
 */
struct  Cosmos__Distribution__V1beta1__DelegationDelegatorReward
{
  ProtobufCMessage base;
  char *validator_address;
  size_t n_reward;
  Cosmos__Base__V1beta1__DecCoin **reward;
};
#define COSMOS__DISTRIBUTION__V1BETA1__DELEGATION_DELEGATOR_REWARD__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__distribution__v1beta1__delegation_delegator_reward__descriptor) \
, (char *)protobuf_c_empty_string, 0,NULL }


/*
 * CommunityPoolSpendProposalWithDeposit defines a CommunityPoolSpendProposal
 * with a deposit
 */
struct  Cosmos__Distribution__V1beta1__CommunityPoolSpendProposalWithDeposit
{
  ProtobufCMessage base;
  char *title;
  char *description;
  char *recipient;
  char *amount;
  char *deposit;
};
#define COSMOS__DISTRIBUTION__V1BETA1__COMMUNITY_POOL_SPEND_PROPOSAL_WITH_DEPOSIT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__distribution__v1beta1__community_pool_spend_proposal_with_deposit__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


/* Cosmos__Distribution__V1beta1__Params methods */
void   cosmos__distribution__v1beta1__params__init
                     (Cosmos__Distribution__V1beta1__Params         *message);
size_t cosmos__distribution__v1beta1__params__get_packed_size
                     (const Cosmos__Distribution__V1beta1__Params   *message);
size_t cosmos__distribution__v1beta1__params__pack
                     (const Cosmos__Distribution__V1beta1__Params   *message,
                      uint8_t             *out);
size_t cosmos__distribution__v1beta1__params__pack_to_buffer
                     (const Cosmos__Distribution__V1beta1__Params   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Distribution__V1beta1__Params *
       cosmos__distribution__v1beta1__params__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__distribution__v1beta1__params__free_unpacked
                     (Cosmos__Distribution__V1beta1__Params *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__Distribution__V1beta1__ValidatorHistoricalRewards methods */
void   cosmos__distribution__v1beta1__validator_historical_rewards__init
                     (Cosmos__Distribution__V1beta1__ValidatorHistoricalRewards         *message);
size_t cosmos__distribution__v1beta1__validator_historical_rewards__get_packed_size
                     (const Cosmos__Distribution__V1beta1__ValidatorHistoricalRewards   *message);
size_t cosmos__distribution__v1beta1__validator_historical_rewards__pack
                     (const Cosmos__Distribution__V1beta1__ValidatorHistoricalRewards   *message,
                      uint8_t             *out);
size_t cosmos__distribution__v1beta1__validator_historical_rewards__pack_to_buffer
                     (const Cosmos__Distribution__V1beta1__ValidatorHistoricalRewards   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Distribution__V1beta1__ValidatorHistoricalRewards *
       cosmos__distribution__v1beta1__validator_historical_rewards__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__distribution__v1beta1__validator_historical_rewards__free_unpacked
                     (Cosmos__Distribution__V1beta1__ValidatorHistoricalRewards *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__Distribution__V1beta1__ValidatorCurrentRewards methods */
void   cosmos__distribution__v1beta1__validator_current_rewards__init
                     (Cosmos__Distribution__V1beta1__ValidatorCurrentRewards         *message);
size_t cosmos__distribution__v1beta1__validator_current_rewards__get_packed_size
                     (const Cosmos__Distribution__V1beta1__ValidatorCurrentRewards   *message);
size_t cosmos__distribution__v1beta1__validator_current_rewards__pack
                     (const Cosmos__Distribution__V1beta1__ValidatorCurrentRewards   *message,
                      uint8_t             *out);
size_t cosmos__distribution__v1beta1__validator_current_rewards__pack_to_buffer
                     (const Cosmos__Distribution__V1beta1__ValidatorCurrentRewards   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Distribution__V1beta1__ValidatorCurrentRewards *
       cosmos__distribution__v1beta1__validator_current_rewards__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__distribution__v1beta1__validator_current_rewards__free_unpacked
                     (Cosmos__Distribution__V1beta1__ValidatorCurrentRewards *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__Distribution__V1beta1__ValidatorAccumulatedCommission methods */
void   cosmos__distribution__v1beta1__validator_accumulated_commission__init
                     (Cosmos__Distribution__V1beta1__ValidatorAccumulatedCommission         *message);
size_t cosmos__distribution__v1beta1__validator_accumulated_commission__get_packed_size
                     (const Cosmos__Distribution__V1beta1__ValidatorAccumulatedCommission   *message);
size_t cosmos__distribution__v1beta1__validator_accumulated_commission__pack
                     (const Cosmos__Distribution__V1beta1__ValidatorAccumulatedCommission   *message,
                      uint8_t             *out);
size_t cosmos__distribution__v1beta1__validator_accumulated_commission__pack_to_buffer
                     (const Cosmos__Distribution__V1beta1__ValidatorAccumulatedCommission   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Distribution__V1beta1__ValidatorAccumulatedCommission *
       cosmos__distribution__v1beta1__validator_accumulated_commission__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__distribution__v1beta1__validator_accumulated_commission__free_unpacked
                     (Cosmos__Distribution__V1beta1__ValidatorAccumulatedCommission *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__Distribution__V1beta1__ValidatorOutstandingRewards methods */
void   cosmos__distribution__v1beta1__validator_outstanding_rewards__init
                     (Cosmos__Distribution__V1beta1__ValidatorOutstandingRewards         *message);
size_t cosmos__distribution__v1beta1__validator_outstanding_rewards__get_packed_size
                     (const Cosmos__Distribution__V1beta1__ValidatorOutstandingRewards   *message);
size_t cosmos__distribution__v1beta1__validator_outstanding_rewards__pack
                     (const Cosmos__Distribution__V1beta1__ValidatorOutstandingRewards   *message,
                      uint8_t             *out);
size_t cosmos__distribution__v1beta1__validator_outstanding_rewards__pack_to_buffer
                     (const Cosmos__Distribution__V1beta1__ValidatorOutstandingRewards   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Distribution__V1beta1__ValidatorOutstandingRewards *
       cosmos__distribution__v1beta1__validator_outstanding_rewards__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__distribution__v1beta1__validator_outstanding_rewards__free_unpacked
                     (Cosmos__Distribution__V1beta1__ValidatorOutstandingRewards *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__Distribution__V1beta1__ValidatorSlashEvent methods */
void   cosmos__distribution__v1beta1__validator_slash_event__init
                     (Cosmos__Distribution__V1beta1__ValidatorSlashEvent         *message);
size_t cosmos__distribution__v1beta1__validator_slash_event__get_packed_size
                     (const Cosmos__Distribution__V1beta1__ValidatorSlashEvent   *message);
size_t cosmos__distribution__v1beta1__validator_slash_event__pack
                     (const Cosmos__Distribution__V1beta1__ValidatorSlashEvent   *message,
                      uint8_t             *out);
size_t cosmos__distribution__v1beta1__validator_slash_event__pack_to_buffer
                     (const Cosmos__Distribution__V1beta1__ValidatorSlashEvent   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Distribution__V1beta1__ValidatorSlashEvent *
       cosmos__distribution__v1beta1__validator_slash_event__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__distribution__v1beta1__validator_slash_event__free_unpacked
                     (Cosmos__Distribution__V1beta1__ValidatorSlashEvent *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__Distribution__V1beta1__ValidatorSlashEvents methods */
void   cosmos__distribution__v1beta1__validator_slash_events__init
                     (Cosmos__Distribution__V1beta1__ValidatorSlashEvents         *message);
size_t cosmos__distribution__v1beta1__validator_slash_events__get_packed_size
                     (const Cosmos__Distribution__V1beta1__ValidatorSlashEvents   *message);
size_t cosmos__distribution__v1beta1__validator_slash_events__pack
                     (const Cosmos__Distribution__V1beta1__ValidatorSlashEvents   *message,
                      uint8_t             *out);
size_t cosmos__distribution__v1beta1__validator_slash_events__pack_to_buffer
                     (const Cosmos__Distribution__V1beta1__ValidatorSlashEvents   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Distribution__V1beta1__ValidatorSlashEvents *
       cosmos__distribution__v1beta1__validator_slash_events__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__distribution__v1beta1__validator_slash_events__free_unpacked
                     (Cosmos__Distribution__V1beta1__ValidatorSlashEvents *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__Distribution__V1beta1__FeePool methods */
void   cosmos__distribution__v1beta1__fee_pool__init
                     (Cosmos__Distribution__V1beta1__FeePool         *message);
size_t cosmos__distribution__v1beta1__fee_pool__get_packed_size
                     (const Cosmos__Distribution__V1beta1__FeePool   *message);
size_t cosmos__distribution__v1beta1__fee_pool__pack
                     (const Cosmos__Distribution__V1beta1__FeePool   *message,
                      uint8_t             *out);
size_t cosmos__distribution__v1beta1__fee_pool__pack_to_buffer
                     (const Cosmos__Distribution__V1beta1__FeePool   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Distribution__V1beta1__FeePool *
       cosmos__distribution__v1beta1__fee_pool__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__distribution__v1beta1__fee_pool__free_unpacked
                     (Cosmos__Distribution__V1beta1__FeePool *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__Distribution__V1beta1__CommunityPoolSpendProposal methods */
void   cosmos__distribution__v1beta1__community_pool_spend_proposal__init
                     (Cosmos__Distribution__V1beta1__CommunityPoolSpendProposal         *message);
size_t cosmos__distribution__v1beta1__community_pool_spend_proposal__get_packed_size
                     (const Cosmos__Distribution__V1beta1__CommunityPoolSpendProposal   *message);
size_t cosmos__distribution__v1beta1__community_pool_spend_proposal__pack
                     (const Cosmos__Distribution__V1beta1__CommunityPoolSpendProposal   *message,
                      uint8_t             *out);
size_t cosmos__distribution__v1beta1__community_pool_spend_proposal__pack_to_buffer
                     (const Cosmos__Distribution__V1beta1__CommunityPoolSpendProposal   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Distribution__V1beta1__CommunityPoolSpendProposal *
       cosmos__distribution__v1beta1__community_pool_spend_proposal__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__distribution__v1beta1__community_pool_spend_proposal__free_unpacked
                     (Cosmos__Distribution__V1beta1__CommunityPoolSpendProposal *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__Distribution__V1beta1__DelegatorStartingInfo methods */
void   cosmos__distribution__v1beta1__delegator_starting_info__init
                     (Cosmos__Distribution__V1beta1__DelegatorStartingInfo         *message);
size_t cosmos__distribution__v1beta1__delegator_starting_info__get_packed_size
                     (const Cosmos__Distribution__V1beta1__DelegatorStartingInfo   *message);
size_t cosmos__distribution__v1beta1__delegator_starting_info__pack
                     (const Cosmos__Distribution__V1beta1__DelegatorStartingInfo   *message,
                      uint8_t             *out);
size_t cosmos__distribution__v1beta1__delegator_starting_info__pack_to_buffer
                     (const Cosmos__Distribution__V1beta1__DelegatorStartingInfo   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Distribution__V1beta1__DelegatorStartingInfo *
       cosmos__distribution__v1beta1__delegator_starting_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__distribution__v1beta1__delegator_starting_info__free_unpacked
                     (Cosmos__Distribution__V1beta1__DelegatorStartingInfo *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__Distribution__V1beta1__DelegationDelegatorReward methods */
void   cosmos__distribution__v1beta1__delegation_delegator_reward__init
                     (Cosmos__Distribution__V1beta1__DelegationDelegatorReward         *message);
size_t cosmos__distribution__v1beta1__delegation_delegator_reward__get_packed_size
                     (const Cosmos__Distribution__V1beta1__DelegationDelegatorReward   *message);
size_t cosmos__distribution__v1beta1__delegation_delegator_reward__pack
                     (const Cosmos__Distribution__V1beta1__DelegationDelegatorReward   *message,
                      uint8_t             *out);
size_t cosmos__distribution__v1beta1__delegation_delegator_reward__pack_to_buffer
                     (const Cosmos__Distribution__V1beta1__DelegationDelegatorReward   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Distribution__V1beta1__DelegationDelegatorReward *
       cosmos__distribution__v1beta1__delegation_delegator_reward__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__distribution__v1beta1__delegation_delegator_reward__free_unpacked
                     (Cosmos__Distribution__V1beta1__DelegationDelegatorReward *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__Distribution__V1beta1__CommunityPoolSpendProposalWithDeposit methods */
void   cosmos__distribution__v1beta1__community_pool_spend_proposal_with_deposit__init
                     (Cosmos__Distribution__V1beta1__CommunityPoolSpendProposalWithDeposit         *message);
size_t cosmos__distribution__v1beta1__community_pool_spend_proposal_with_deposit__get_packed_size
                     (const Cosmos__Distribution__V1beta1__CommunityPoolSpendProposalWithDeposit   *message);
size_t cosmos__distribution__v1beta1__community_pool_spend_proposal_with_deposit__pack
                     (const Cosmos__Distribution__V1beta1__CommunityPoolSpendProposalWithDeposit   *message,
                      uint8_t             *out);
size_t cosmos__distribution__v1beta1__community_pool_spend_proposal_with_deposit__pack_to_buffer
                     (const Cosmos__Distribution__V1beta1__CommunityPoolSpendProposalWithDeposit   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Distribution__V1beta1__CommunityPoolSpendProposalWithDeposit *
       cosmos__distribution__v1beta1__community_pool_spend_proposal_with_deposit__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__distribution__v1beta1__community_pool_spend_proposal_with_deposit__free_unpacked
                     (Cosmos__Distribution__V1beta1__CommunityPoolSpendProposalWithDeposit *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Cosmos__Distribution__V1beta1__Params_Closure)
                 (const Cosmos__Distribution__V1beta1__Params *message,
                  void *closure_data);
typedef void (*Cosmos__Distribution__V1beta1__ValidatorHistoricalRewards_Closure)
                 (const Cosmos__Distribution__V1beta1__ValidatorHistoricalRewards *message,
                  void *closure_data);
typedef void (*Cosmos__Distribution__V1beta1__ValidatorCurrentRewards_Closure)
                 (const Cosmos__Distribution__V1beta1__ValidatorCurrentRewards *message,
                  void *closure_data);
typedef void (*Cosmos__Distribution__V1beta1__ValidatorAccumulatedCommission_Closure)
                 (const Cosmos__Distribution__V1beta1__ValidatorAccumulatedCommission *message,
                  void *closure_data);
typedef void (*Cosmos__Distribution__V1beta1__ValidatorOutstandingRewards_Closure)
                 (const Cosmos__Distribution__V1beta1__ValidatorOutstandingRewards *message,
                  void *closure_data);
typedef void (*Cosmos__Distribution__V1beta1__ValidatorSlashEvent_Closure)
                 (const Cosmos__Distribution__V1beta1__ValidatorSlashEvent *message,
                  void *closure_data);
typedef void (*Cosmos__Distribution__V1beta1__ValidatorSlashEvents_Closure)
                 (const Cosmos__Distribution__V1beta1__ValidatorSlashEvents *message,
                  void *closure_data);
typedef void (*Cosmos__Distribution__V1beta1__FeePool_Closure)
                 (const Cosmos__Distribution__V1beta1__FeePool *message,
                  void *closure_data);
typedef void (*Cosmos__Distribution__V1beta1__CommunityPoolSpendProposal_Closure)
                 (const Cosmos__Distribution__V1beta1__CommunityPoolSpendProposal *message,
                  void *closure_data);
typedef void (*Cosmos__Distribution__V1beta1__DelegatorStartingInfo_Closure)
                 (const Cosmos__Distribution__V1beta1__DelegatorStartingInfo *message,
                  void *closure_data);
typedef void (*Cosmos__Distribution__V1beta1__DelegationDelegatorReward_Closure)
                 (const Cosmos__Distribution__V1beta1__DelegationDelegatorReward *message,
                  void *closure_data);
typedef void (*Cosmos__Distribution__V1beta1__CommunityPoolSpendProposalWithDeposit_Closure)
                 (const Cosmos__Distribution__V1beta1__CommunityPoolSpendProposalWithDeposit *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor cosmos__distribution__v1beta1__params__descriptor;
extern const ProtobufCMessageDescriptor cosmos__distribution__v1beta1__validator_historical_rewards__descriptor;
extern const ProtobufCMessageDescriptor cosmos__distribution__v1beta1__validator_current_rewards__descriptor;
extern const ProtobufCMessageDescriptor cosmos__distribution__v1beta1__validator_accumulated_commission__descriptor;
extern const ProtobufCMessageDescriptor cosmos__distribution__v1beta1__validator_outstanding_rewards__descriptor;
extern const ProtobufCMessageDescriptor cosmos__distribution__v1beta1__validator_slash_event__descriptor;
extern const ProtobufCMessageDescriptor cosmos__distribution__v1beta1__validator_slash_events__descriptor;
extern const ProtobufCMessageDescriptor cosmos__distribution__v1beta1__fee_pool__descriptor;
extern const ProtobufCMessageDescriptor cosmos__distribution__v1beta1__community_pool_spend_proposal__descriptor;
extern const ProtobufCMessageDescriptor cosmos__distribution__v1beta1__delegator_starting_info__descriptor;
extern const ProtobufCMessageDescriptor cosmos__distribution__v1beta1__delegation_delegator_reward__descriptor;
extern const ProtobufCMessageDescriptor cosmos__distribution__v1beta1__community_pool_spend_proposal_with_deposit__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_cosmos_2fdistribution_2fv1beta1_2fdistribution_2eproto__INCLUDED */
