/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: cosmos/distribution/v1beta1/genesis.proto */

#ifndef PROTOBUF_C_cosmos_2fdistribution_2fv1beta1_2fgenesis_2eproto__INCLUDED
#define PROTOBUF_C_cosmos_2fdistribution_2fv1beta1_2fgenesis_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protobuf-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1005002 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protobuf-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protobuf-c.
#endif

#include "gogoproto/gogo.pb-c.h"
#include "cosmos/base/v1beta1/coin.pb-c.h"
#include "cosmos/distribution/v1beta1/distribution.pb-c.h"
#include "cosmos_proto/cosmos.pb-c.h"
#include "amino/amino.pb-c.h"

typedef struct Cosmos__Distribution__V1beta1__DelegatorWithdrawInfo Cosmos__Distribution__V1beta1__DelegatorWithdrawInfo;
typedef struct Cosmos__Distribution__V1beta1__ValidatorOutstandingRewardsRecord Cosmos__Distribution__V1beta1__ValidatorOutstandingRewardsRecord;
typedef struct Cosmos__Distribution__V1beta1__ValidatorAccumulatedCommissionRecord Cosmos__Distribution__V1beta1__ValidatorAccumulatedCommissionRecord;
typedef struct Cosmos__Distribution__V1beta1__ValidatorHistoricalRewardsRecord Cosmos__Distribution__V1beta1__ValidatorHistoricalRewardsRecord;
typedef struct Cosmos__Distribution__V1beta1__ValidatorCurrentRewardsRecord Cosmos__Distribution__V1beta1__ValidatorCurrentRewardsRecord;
typedef struct Cosmos__Distribution__V1beta1__DelegatorStartingInfoRecord Cosmos__Distribution__V1beta1__DelegatorStartingInfoRecord;
typedef struct Cosmos__Distribution__V1beta1__ValidatorSlashEventRecord Cosmos__Distribution__V1beta1__ValidatorSlashEventRecord;
typedef struct Cosmos__Distribution__V1beta1__GenesisState Cosmos__Distribution__V1beta1__GenesisState;


/* --- enums --- */


/* --- messages --- */

/*
 * DelegatorWithdrawInfo is the address for where distributions rewards are
 * withdrawn to by default this struct is only used at genesis to feed in
 * default withdraw addresses.
 */
struct  Cosmos__Distribution__V1beta1__DelegatorWithdrawInfo
{
  ProtobufCMessage base;
  /*
   * delegator_address is the address of the delegator.
   */
  char *delegator_address;
  /*
   * withdraw_address is the address to withdraw the delegation rewards to.
   */
  char *withdraw_address;
};
#define COSMOS__DISTRIBUTION__V1BETA1__DELEGATOR_WITHDRAW_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__distribution__v1beta1__delegator_withdraw_info__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


/*
 * ValidatorOutstandingRewardsRecord is used for import/export via genesis json.
 */
struct  Cosmos__Distribution__V1beta1__ValidatorOutstandingRewardsRecord
{
  ProtobufCMessage base;
  /*
   * validator_address is the address of the validator.
   */
  char *validator_address;
  /*
   * outstanding_rewards represents the outstanding rewards of a validator.
   */
  size_t n_outstanding_rewards;
  Cosmos__Base__V1beta1__DecCoin **outstanding_rewards;
};
#define COSMOS__DISTRIBUTION__V1BETA1__VALIDATOR_OUTSTANDING_REWARDS_RECORD__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__distribution__v1beta1__validator_outstanding_rewards_record__descriptor) \
, (char *)protobuf_c_empty_string, 0,NULL }


/*
 * ValidatorAccumulatedCommissionRecord is used for import / export via genesis
 * json.
 */
struct  Cosmos__Distribution__V1beta1__ValidatorAccumulatedCommissionRecord
{
  ProtobufCMessage base;
  /*
   * validator_address is the address of the validator.
   */
  char *validator_address;
  /*
   * accumulated is the accumulated commission of a validator.
   */
  Cosmos__Distribution__V1beta1__ValidatorAccumulatedCommission *accumulated;
};
#define COSMOS__DISTRIBUTION__V1BETA1__VALIDATOR_ACCUMULATED_COMMISSION_RECORD__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__distribution__v1beta1__validator_accumulated_commission_record__descriptor) \
, (char *)protobuf_c_empty_string, NULL }


/*
 * ValidatorHistoricalRewardsRecord is used for import / export via genesis
 * json.
 */
struct  Cosmos__Distribution__V1beta1__ValidatorHistoricalRewardsRecord
{
  ProtobufCMessage base;
  /*
   * validator_address is the address of the validator.
   */
  char *validator_address;
  /*
   * period defines the period the historical rewards apply to.
   */
  uint64_t period;
  /*
   * rewards defines the historical rewards of a validator.
   */
  Cosmos__Distribution__V1beta1__ValidatorHistoricalRewards *rewards;
};
#define COSMOS__DISTRIBUTION__V1BETA1__VALIDATOR_HISTORICAL_REWARDS_RECORD__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__distribution__v1beta1__validator_historical_rewards_record__descriptor) \
, (char *)protobuf_c_empty_string, 0, NULL }


/*
 * ValidatorCurrentRewardsRecord is used for import / export via genesis json.
 */
struct  Cosmos__Distribution__V1beta1__ValidatorCurrentRewardsRecord
{
  ProtobufCMessage base;
  /*
   * validator_address is the address of the validator.
   */
  char *validator_address;
  /*
   * rewards defines the current rewards of a validator.
   */
  Cosmos__Distribution__V1beta1__ValidatorCurrentRewards *rewards;
};
#define COSMOS__DISTRIBUTION__V1BETA1__VALIDATOR_CURRENT_REWARDS_RECORD__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__distribution__v1beta1__validator_current_rewards_record__descriptor) \
, (char *)protobuf_c_empty_string, NULL }


/*
 * DelegatorStartingInfoRecord used for import / export via genesis json.
 */
struct  Cosmos__Distribution__V1beta1__DelegatorStartingInfoRecord
{
  ProtobufCMessage base;
  /*
   * delegator_address is the address of the delegator.
   */
  char *delegator_address;
  /*
   * validator_address is the address of the validator.
   */
  char *validator_address;
  /*
   * starting_info defines the starting info of a delegator.
   */
  Cosmos__Distribution__V1beta1__DelegatorStartingInfo *starting_info;
};
#define COSMOS__DISTRIBUTION__V1BETA1__DELEGATOR_STARTING_INFO_RECORD__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__distribution__v1beta1__delegator_starting_info_record__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, NULL }


/*
 * ValidatorSlashEventRecord is used for import / export via genesis json.
 */
struct  Cosmos__Distribution__V1beta1__ValidatorSlashEventRecord
{
  ProtobufCMessage base;
  /*
   * validator_address is the address of the validator.
   */
  char *validator_address;
  /*
   * height defines the block height at which the slash event occurred.
   */
  uint64_t height;
  /*
   * period is the period of the slash event.
   */
  uint64_t period;
  /*
   * validator_slash_event describes the slash event.
   */
  Cosmos__Distribution__V1beta1__ValidatorSlashEvent *validator_slash_event;
};
#define COSMOS__DISTRIBUTION__V1BETA1__VALIDATOR_SLASH_EVENT_RECORD__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__distribution__v1beta1__validator_slash_event_record__descriptor) \
, (char *)protobuf_c_empty_string, 0, 0, NULL }


/*
 * GenesisState defines the distribution module's genesis state.
 */
struct  Cosmos__Distribution__V1beta1__GenesisState
{
  ProtobufCMessage base;
  /*
   * params defines all the parameters of the module.
   */
  Cosmos__Distribution__V1beta1__Params *params;
  /*
   * fee_pool defines the fee pool at genesis.
   */
  Cosmos__Distribution__V1beta1__FeePool *fee_pool;
  /*
   * fee_pool defines the delegator withdraw infos at genesis.
   */
  size_t n_delegator_withdraw_infos;
  Cosmos__Distribution__V1beta1__DelegatorWithdrawInfo **delegator_withdraw_infos;
  /*
   * fee_pool defines the previous proposer at genesis.
   */
  char *previous_proposer;
  /*
   * fee_pool defines the outstanding rewards of all validators at genesis.
   */
  size_t n_outstanding_rewards;
  Cosmos__Distribution__V1beta1__ValidatorOutstandingRewardsRecord **outstanding_rewards;
  /*
   * fee_pool defines the accumulated commissions of all validators at genesis.
   */
  size_t n_validator_accumulated_commissions;
  Cosmos__Distribution__V1beta1__ValidatorAccumulatedCommissionRecord **validator_accumulated_commissions;
  /*
   * fee_pool defines the historical rewards of all validators at genesis.
   */
  size_t n_validator_historical_rewards;
  Cosmos__Distribution__V1beta1__ValidatorHistoricalRewardsRecord **validator_historical_rewards;
  /*
   * fee_pool defines the current rewards of all validators at genesis.
   */
  size_t n_validator_current_rewards;
  Cosmos__Distribution__V1beta1__ValidatorCurrentRewardsRecord **validator_current_rewards;
  /*
   * fee_pool defines the delegator starting infos at genesis.
   */
  size_t n_delegator_starting_infos;
  Cosmos__Distribution__V1beta1__DelegatorStartingInfoRecord **delegator_starting_infos;
  /*
   * fee_pool defines the validator slash events at genesis.
   */
  size_t n_validator_slash_events;
  Cosmos__Distribution__V1beta1__ValidatorSlashEventRecord **validator_slash_events;
};
#define COSMOS__DISTRIBUTION__V1BETA1__GENESIS_STATE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__distribution__v1beta1__genesis_state__descriptor) \
, NULL, NULL, 0,NULL, (char *)protobuf_c_empty_string, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL }


/* Cosmos__Distribution__V1beta1__DelegatorWithdrawInfo methods */
void   cosmos__distribution__v1beta1__delegator_withdraw_info__init
                     (Cosmos__Distribution__V1beta1__DelegatorWithdrawInfo         *message);
size_t cosmos__distribution__v1beta1__delegator_withdraw_info__get_packed_size
                     (const Cosmos__Distribution__V1beta1__DelegatorWithdrawInfo   *message);
size_t cosmos__distribution__v1beta1__delegator_withdraw_info__pack
                     (const Cosmos__Distribution__V1beta1__DelegatorWithdrawInfo   *message,
                      uint8_t             *out);
size_t cosmos__distribution__v1beta1__delegator_withdraw_info__pack_to_buffer
                     (const Cosmos__Distribution__V1beta1__DelegatorWithdrawInfo   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Distribution__V1beta1__DelegatorWithdrawInfo *
       cosmos__distribution__v1beta1__delegator_withdraw_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__distribution__v1beta1__delegator_withdraw_info__free_unpacked
                     (Cosmos__Distribution__V1beta1__DelegatorWithdrawInfo *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__Distribution__V1beta1__ValidatorOutstandingRewardsRecord methods */
void   cosmos__distribution__v1beta1__validator_outstanding_rewards_record__init
                     (Cosmos__Distribution__V1beta1__ValidatorOutstandingRewardsRecord         *message);
size_t cosmos__distribution__v1beta1__validator_outstanding_rewards_record__get_packed_size
                     (const Cosmos__Distribution__V1beta1__ValidatorOutstandingRewardsRecord   *message);
size_t cosmos__distribution__v1beta1__validator_outstanding_rewards_record__pack
                     (const Cosmos__Distribution__V1beta1__ValidatorOutstandingRewardsRecord   *message,
                      uint8_t             *out);
size_t cosmos__distribution__v1beta1__validator_outstanding_rewards_record__pack_to_buffer
                     (const Cosmos__Distribution__V1beta1__ValidatorOutstandingRewardsRecord   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Distribution__V1beta1__ValidatorOutstandingRewardsRecord *
       cosmos__distribution__v1beta1__validator_outstanding_rewards_record__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__distribution__v1beta1__validator_outstanding_rewards_record__free_unpacked
                     (Cosmos__Distribution__V1beta1__ValidatorOutstandingRewardsRecord *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__Distribution__V1beta1__ValidatorAccumulatedCommissionRecord methods */
void   cosmos__distribution__v1beta1__validator_accumulated_commission_record__init
                     (Cosmos__Distribution__V1beta1__ValidatorAccumulatedCommissionRecord         *message);
size_t cosmos__distribution__v1beta1__validator_accumulated_commission_record__get_packed_size
                     (const Cosmos__Distribution__V1beta1__ValidatorAccumulatedCommissionRecord   *message);
size_t cosmos__distribution__v1beta1__validator_accumulated_commission_record__pack
                     (const Cosmos__Distribution__V1beta1__ValidatorAccumulatedCommissionRecord   *message,
                      uint8_t             *out);
size_t cosmos__distribution__v1beta1__validator_accumulated_commission_record__pack_to_buffer
                     (const Cosmos__Distribution__V1beta1__ValidatorAccumulatedCommissionRecord   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Distribution__V1beta1__ValidatorAccumulatedCommissionRecord *
       cosmos__distribution__v1beta1__validator_accumulated_commission_record__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__distribution__v1beta1__validator_accumulated_commission_record__free_unpacked
                     (Cosmos__Distribution__V1beta1__ValidatorAccumulatedCommissionRecord *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__Distribution__V1beta1__ValidatorHistoricalRewardsRecord methods */
void   cosmos__distribution__v1beta1__validator_historical_rewards_record__init
                     (Cosmos__Distribution__V1beta1__ValidatorHistoricalRewardsRecord         *message);
size_t cosmos__distribution__v1beta1__validator_historical_rewards_record__get_packed_size
                     (const Cosmos__Distribution__V1beta1__ValidatorHistoricalRewardsRecord   *message);
size_t cosmos__distribution__v1beta1__validator_historical_rewards_record__pack
                     (const Cosmos__Distribution__V1beta1__ValidatorHistoricalRewardsRecord   *message,
                      uint8_t             *out);
size_t cosmos__distribution__v1beta1__validator_historical_rewards_record__pack_to_buffer
                     (const Cosmos__Distribution__V1beta1__ValidatorHistoricalRewardsRecord   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Distribution__V1beta1__ValidatorHistoricalRewardsRecord *
       cosmos__distribution__v1beta1__validator_historical_rewards_record__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__distribution__v1beta1__validator_historical_rewards_record__free_unpacked
                     (Cosmos__Distribution__V1beta1__ValidatorHistoricalRewardsRecord *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__Distribution__V1beta1__ValidatorCurrentRewardsRecord methods */
void   cosmos__distribution__v1beta1__validator_current_rewards_record__init
                     (Cosmos__Distribution__V1beta1__ValidatorCurrentRewardsRecord         *message);
size_t cosmos__distribution__v1beta1__validator_current_rewards_record__get_packed_size
                     (const Cosmos__Distribution__V1beta1__ValidatorCurrentRewardsRecord   *message);
size_t cosmos__distribution__v1beta1__validator_current_rewards_record__pack
                     (const Cosmos__Distribution__V1beta1__ValidatorCurrentRewardsRecord   *message,
                      uint8_t             *out);
size_t cosmos__distribution__v1beta1__validator_current_rewards_record__pack_to_buffer
                     (const Cosmos__Distribution__V1beta1__ValidatorCurrentRewardsRecord   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Distribution__V1beta1__ValidatorCurrentRewardsRecord *
       cosmos__distribution__v1beta1__validator_current_rewards_record__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__distribution__v1beta1__validator_current_rewards_record__free_unpacked
                     (Cosmos__Distribution__V1beta1__ValidatorCurrentRewardsRecord *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__Distribution__V1beta1__DelegatorStartingInfoRecord methods */
void   cosmos__distribution__v1beta1__delegator_starting_info_record__init
                     (Cosmos__Distribution__V1beta1__DelegatorStartingInfoRecord         *message);
size_t cosmos__distribution__v1beta1__delegator_starting_info_record__get_packed_size
                     (const Cosmos__Distribution__V1beta1__DelegatorStartingInfoRecord   *message);
size_t cosmos__distribution__v1beta1__delegator_starting_info_record__pack
                     (const Cosmos__Distribution__V1beta1__DelegatorStartingInfoRecord   *message,
                      uint8_t             *out);
size_t cosmos__distribution__v1beta1__delegator_starting_info_record__pack_to_buffer
                     (const Cosmos__Distribution__V1beta1__DelegatorStartingInfoRecord   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Distribution__V1beta1__DelegatorStartingInfoRecord *
       cosmos__distribution__v1beta1__delegator_starting_info_record__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__distribution__v1beta1__delegator_starting_info_record__free_unpacked
                     (Cosmos__Distribution__V1beta1__DelegatorStartingInfoRecord *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__Distribution__V1beta1__ValidatorSlashEventRecord methods */
void   cosmos__distribution__v1beta1__validator_slash_event_record__init
                     (Cosmos__Distribution__V1beta1__ValidatorSlashEventRecord         *message);
size_t cosmos__distribution__v1beta1__validator_slash_event_record__get_packed_size
                     (const Cosmos__Distribution__V1beta1__ValidatorSlashEventRecord   *message);
size_t cosmos__distribution__v1beta1__validator_slash_event_record__pack
                     (const Cosmos__Distribution__V1beta1__ValidatorSlashEventRecord   *message,
                      uint8_t             *out);
size_t cosmos__distribution__v1beta1__validator_slash_event_record__pack_to_buffer
                     (const Cosmos__Distribution__V1beta1__ValidatorSlashEventRecord   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Distribution__V1beta1__ValidatorSlashEventRecord *
       cosmos__distribution__v1beta1__validator_slash_event_record__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__distribution__v1beta1__validator_slash_event_record__free_unpacked
                     (Cosmos__Distribution__V1beta1__ValidatorSlashEventRecord *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__Distribution__V1beta1__GenesisState methods */
void   cosmos__distribution__v1beta1__genesis_state__init
                     (Cosmos__Distribution__V1beta1__GenesisState         *message);
size_t cosmos__distribution__v1beta1__genesis_state__get_packed_size
                     (const Cosmos__Distribution__V1beta1__GenesisState   *message);
size_t cosmos__distribution__v1beta1__genesis_state__pack
                     (const Cosmos__Distribution__V1beta1__GenesisState   *message,
                      uint8_t             *out);
size_t cosmos__distribution__v1beta1__genesis_state__pack_to_buffer
                     (const Cosmos__Distribution__V1beta1__GenesisState   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Distribution__V1beta1__GenesisState *
       cosmos__distribution__v1beta1__genesis_state__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__distribution__v1beta1__genesis_state__free_unpacked
                     (Cosmos__Distribution__V1beta1__GenesisState *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Cosmos__Distribution__V1beta1__DelegatorWithdrawInfo_Closure)
                 (const Cosmos__Distribution__V1beta1__DelegatorWithdrawInfo *message,
                  void *closure_data);
typedef void (*Cosmos__Distribution__V1beta1__ValidatorOutstandingRewardsRecord_Closure)
                 (const Cosmos__Distribution__V1beta1__ValidatorOutstandingRewardsRecord *message,
                  void *closure_data);
typedef void (*Cosmos__Distribution__V1beta1__ValidatorAccumulatedCommissionRecord_Closure)
                 (const Cosmos__Distribution__V1beta1__ValidatorAccumulatedCommissionRecord *message,
                  void *closure_data);
typedef void (*Cosmos__Distribution__V1beta1__ValidatorHistoricalRewardsRecord_Closure)
                 (const Cosmos__Distribution__V1beta1__ValidatorHistoricalRewardsRecord *message,
                  void *closure_data);
typedef void (*Cosmos__Distribution__V1beta1__ValidatorCurrentRewardsRecord_Closure)
                 (const Cosmos__Distribution__V1beta1__ValidatorCurrentRewardsRecord *message,
                  void *closure_data);
typedef void (*Cosmos__Distribution__V1beta1__DelegatorStartingInfoRecord_Closure)
                 (const Cosmos__Distribution__V1beta1__DelegatorStartingInfoRecord *message,
                  void *closure_data);
typedef void (*Cosmos__Distribution__V1beta1__ValidatorSlashEventRecord_Closure)
                 (const Cosmos__Distribution__V1beta1__ValidatorSlashEventRecord *message,
                  void *closure_data);
typedef void (*Cosmos__Distribution__V1beta1__GenesisState_Closure)
                 (const Cosmos__Distribution__V1beta1__GenesisState *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor cosmos__distribution__v1beta1__delegator_withdraw_info__descriptor;
extern const ProtobufCMessageDescriptor cosmos__distribution__v1beta1__validator_outstanding_rewards_record__descriptor;
extern const ProtobufCMessageDescriptor cosmos__distribution__v1beta1__validator_accumulated_commission_record__descriptor;
extern const ProtobufCMessageDescriptor cosmos__distribution__v1beta1__validator_historical_rewards_record__descriptor;
extern const ProtobufCMessageDescriptor cosmos__distribution__v1beta1__validator_current_rewards_record__descriptor;
extern const ProtobufCMessageDescriptor cosmos__distribution__v1beta1__delegator_starting_info_record__descriptor;
extern const ProtobufCMessageDescriptor cosmos__distribution__v1beta1__validator_slash_event_record__descriptor;
extern const ProtobufCMessageDescriptor cosmos__distribution__v1beta1__genesis_state__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_cosmos_2fdistribution_2fv1beta1_2fgenesis_2eproto__INCLUDED */
