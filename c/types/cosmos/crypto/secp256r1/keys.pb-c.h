/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: cosmos/crypto/secp256r1/keys.proto */

#ifndef PROTOBUF_C_cosmos_2fcrypto_2fsecp256r1_2fkeys_2eproto__INCLUDED
#define PROTOBUF_C_cosmos_2fcrypto_2fsecp256r1_2fkeys_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protobuf-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1005002 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protobuf-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protobuf-c.
#endif

#include "gogoproto/gogo.pb-c.h"

typedef struct Cosmos__Crypto__Secp256r1__PubKey Cosmos__Crypto__Secp256r1__PubKey;
typedef struct Cosmos__Crypto__Secp256r1__PrivKey Cosmos__Crypto__Secp256r1__PrivKey;


/* --- enums --- */


/* --- messages --- */

/*
 * PubKey defines a secp256r1 ECDSA public key.
 */
struct  Cosmos__Crypto__Secp256r1__PubKey
{
  ProtobufCMessage base;
  /*
   * Point on secp256r1 curve in a compressed representation as specified in section
   * 4.3.6 of ANSI X9.62: https://webstore.ansi.org/standards/ascx9/ansix9621998
   */
  ProtobufCBinaryData key;
};
#define COSMOS__CRYPTO__SECP256R1__PUB_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__crypto__secp256r1__pub_key__descriptor) \
, {0,NULL} }


/*
 * PrivKey defines a secp256r1 ECDSA private key.
 */
struct  Cosmos__Crypto__Secp256r1__PrivKey
{
  ProtobufCMessage base;
  /*
   * secret number serialized using big-endian encoding
   */
  ProtobufCBinaryData secret;
};
#define COSMOS__CRYPTO__SECP256R1__PRIV_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__crypto__secp256r1__priv_key__descriptor) \
, {0,NULL} }


/* Cosmos__Crypto__Secp256r1__PubKey methods */
void   cosmos__crypto__secp256r1__pub_key__init
                     (Cosmos__Crypto__Secp256r1__PubKey         *message);
size_t cosmos__crypto__secp256r1__pub_key__get_packed_size
                     (const Cosmos__Crypto__Secp256r1__PubKey   *message);
size_t cosmos__crypto__secp256r1__pub_key__pack
                     (const Cosmos__Crypto__Secp256r1__PubKey   *message,
                      uint8_t             *out);
size_t cosmos__crypto__secp256r1__pub_key__pack_to_buffer
                     (const Cosmos__Crypto__Secp256r1__PubKey   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Crypto__Secp256r1__PubKey *
       cosmos__crypto__secp256r1__pub_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__crypto__secp256r1__pub_key__free_unpacked
                     (Cosmos__Crypto__Secp256r1__PubKey *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__Crypto__Secp256r1__PrivKey methods */
void   cosmos__crypto__secp256r1__priv_key__init
                     (Cosmos__Crypto__Secp256r1__PrivKey         *message);
size_t cosmos__crypto__secp256r1__priv_key__get_packed_size
                     (const Cosmos__Crypto__Secp256r1__PrivKey   *message);
size_t cosmos__crypto__secp256r1__priv_key__pack
                     (const Cosmos__Crypto__Secp256r1__PrivKey   *message,
                      uint8_t             *out);
size_t cosmos__crypto__secp256r1__priv_key__pack_to_buffer
                     (const Cosmos__Crypto__Secp256r1__PrivKey   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Crypto__Secp256r1__PrivKey *
       cosmos__crypto__secp256r1__priv_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__crypto__secp256r1__priv_key__free_unpacked
                     (Cosmos__Crypto__Secp256r1__PrivKey *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Cosmos__Crypto__Secp256r1__PubKey_Closure)
                 (const Cosmos__Crypto__Secp256r1__PubKey *message,
                  void *closure_data);
typedef void (*Cosmos__Crypto__Secp256r1__PrivKey_Closure)
                 (const Cosmos__Crypto__Secp256r1__PrivKey *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor cosmos__crypto__secp256r1__pub_key__descriptor;
extern const ProtobufCMessageDescriptor cosmos__crypto__secp256r1__priv_key__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_cosmos_2fcrypto_2fsecp256r1_2fkeys_2eproto__INCLUDED */
