/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: cosmos/crypto/keyring/v1/record.proto */

#ifndef PROTOBUF_C_cosmos_2fcrypto_2fkeyring_2fv1_2frecord_2eproto__INCLUDED
#define PROTOBUF_C_cosmos_2fcrypto_2fkeyring_2fv1_2frecord_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protobuf-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1005002 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protobuf-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protobuf-c.
#endif

#include "gogoproto/gogo.pb-c.h"
#include "google/protobuf/any.pb-c.h"
#include "cosmos/crypto/hd/v1/hd.pb-c.h"

typedef struct Cosmos__Crypto__Keyring__V1__Record Cosmos__Crypto__Keyring__V1__Record;
typedef struct Cosmos__Crypto__Keyring__V1__Record__Local Cosmos__Crypto__Keyring__V1__Record__Local;
typedef struct Cosmos__Crypto__Keyring__V1__Record__Ledger Cosmos__Crypto__Keyring__V1__Record__Ledger;
typedef struct Cosmos__Crypto__Keyring__V1__Record__Multi Cosmos__Crypto__Keyring__V1__Record__Multi;
typedef struct Cosmos__Crypto__Keyring__V1__Record__Offline Cosmos__Crypto__Keyring__V1__Record__Offline;


/* --- enums --- */


/* --- messages --- */

/*
 * Item is a keyring item stored in a keyring backend.
 * Local item
 */
struct  Cosmos__Crypto__Keyring__V1__Record__Local
{
  ProtobufCMessage base;
  Google__Protobuf__Any *priv_key;
};
#define COSMOS__CRYPTO__KEYRING__V1__RECORD__LOCAL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__crypto__keyring__v1__record__local__descriptor) \
, NULL }


/*
 * Ledger item
 */
struct  Cosmos__Crypto__Keyring__V1__Record__Ledger
{
  ProtobufCMessage base;
  Cosmos__Crypto__Hd__V1__BIP44Params *path;
};
#define COSMOS__CRYPTO__KEYRING__V1__RECORD__LEDGER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__crypto__keyring__v1__record__ledger__descriptor) \
, NULL }


/*
 * Multi item
 */
struct  Cosmos__Crypto__Keyring__V1__Record__Multi
{
  ProtobufCMessage base;
};
#define COSMOS__CRYPTO__KEYRING__V1__RECORD__MULTI__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__crypto__keyring__v1__record__multi__descriptor) \
 }


/*
 * Offline item
 */
struct  Cosmos__Crypto__Keyring__V1__Record__Offline
{
  ProtobufCMessage base;
};
#define COSMOS__CRYPTO__KEYRING__V1__RECORD__OFFLINE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__crypto__keyring__v1__record__offline__descriptor) \
 }


typedef enum {
  COSMOS__CRYPTO__KEYRING__V1__RECORD__ITEM__NOT_SET = 0,
  COSMOS__CRYPTO__KEYRING__V1__RECORD__ITEM_LOCAL = 3,
  COSMOS__CRYPTO__KEYRING__V1__RECORD__ITEM_LEDGER = 4,
  COSMOS__CRYPTO__KEYRING__V1__RECORD__ITEM_MULTI = 5,
  COSMOS__CRYPTO__KEYRING__V1__RECORD__ITEM_OFFLINE = 6
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(COSMOS__CRYPTO__KEYRING__V1__RECORD__ITEM__CASE)
} Cosmos__Crypto__Keyring__V1__Record__ItemCase;

/*
 * Record is used for representing a key in the keyring.
 */
struct  Cosmos__Crypto__Keyring__V1__Record
{
  ProtobufCMessage base;
  /*
   * name represents a name of Record
   */
  char *name;
  /*
   * pub_key represents a public key in any format
   */
  Google__Protobuf__Any *pub_key;
  Cosmos__Crypto__Keyring__V1__Record__ItemCase item_case;
  union {
    /*
     * ledger stores the information about a Ledger key.
     */
    Cosmos__Crypto__Keyring__V1__Record__Ledger *ledger;
    /*
     * local stores the private key locally.
     */
    Cosmos__Crypto__Keyring__V1__Record__Local *local;
    /*
     * Multi does not store any other information.
     */
    Cosmos__Crypto__Keyring__V1__Record__Multi *multi;
    /*
     * Offline does not store any other information.
     */
    Cosmos__Crypto__Keyring__V1__Record__Offline *offline;
  };
};
#define COSMOS__CRYPTO__KEYRING__V1__RECORD__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__crypto__keyring__v1__record__descriptor) \
, (char *)protobuf_c_empty_string, NULL, COSMOS__CRYPTO__KEYRING__V1__RECORD__ITEM__NOT_SET, {0} }


/* Cosmos__Crypto__Keyring__V1__Record__Local methods */
void   cosmos__crypto__keyring__v1__record__local__init
                     (Cosmos__Crypto__Keyring__V1__Record__Local         *message);
/* Cosmos__Crypto__Keyring__V1__Record__Ledger methods */
void   cosmos__crypto__keyring__v1__record__ledger__init
                     (Cosmos__Crypto__Keyring__V1__Record__Ledger         *message);
/* Cosmos__Crypto__Keyring__V1__Record__Multi methods */
void   cosmos__crypto__keyring__v1__record__multi__init
                     (Cosmos__Crypto__Keyring__V1__Record__Multi         *message);
/* Cosmos__Crypto__Keyring__V1__Record__Offline methods */
void   cosmos__crypto__keyring__v1__record__offline__init
                     (Cosmos__Crypto__Keyring__V1__Record__Offline         *message);
/* Cosmos__Crypto__Keyring__V1__Record methods */
void   cosmos__crypto__keyring__v1__record__init
                     (Cosmos__Crypto__Keyring__V1__Record         *message);
size_t cosmos__crypto__keyring__v1__record__get_packed_size
                     (const Cosmos__Crypto__Keyring__V1__Record   *message);
size_t cosmos__crypto__keyring__v1__record__pack
                     (const Cosmos__Crypto__Keyring__V1__Record   *message,
                      uint8_t             *out);
size_t cosmos__crypto__keyring__v1__record__pack_to_buffer
                     (const Cosmos__Crypto__Keyring__V1__Record   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Crypto__Keyring__V1__Record *
       cosmos__crypto__keyring__v1__record__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__crypto__keyring__v1__record__free_unpacked
                     (Cosmos__Crypto__Keyring__V1__Record *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Cosmos__Crypto__Keyring__V1__Record__Local_Closure)
                 (const Cosmos__Crypto__Keyring__V1__Record__Local *message,
                  void *closure_data);
typedef void (*Cosmos__Crypto__Keyring__V1__Record__Ledger_Closure)
                 (const Cosmos__Crypto__Keyring__V1__Record__Ledger *message,
                  void *closure_data);
typedef void (*Cosmos__Crypto__Keyring__V1__Record__Multi_Closure)
                 (const Cosmos__Crypto__Keyring__V1__Record__Multi *message,
                  void *closure_data);
typedef void (*Cosmos__Crypto__Keyring__V1__Record__Offline_Closure)
                 (const Cosmos__Crypto__Keyring__V1__Record__Offline *message,
                  void *closure_data);
typedef void (*Cosmos__Crypto__Keyring__V1__Record_Closure)
                 (const Cosmos__Crypto__Keyring__V1__Record *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor cosmos__crypto__keyring__v1__record__descriptor;
extern const ProtobufCMessageDescriptor cosmos__crypto__keyring__v1__record__local__descriptor;
extern const ProtobufCMessageDescriptor cosmos__crypto__keyring__v1__record__ledger__descriptor;
extern const ProtobufCMessageDescriptor cosmos__crypto__keyring__v1__record__multi__descriptor;
extern const ProtobufCMessageDescriptor cosmos__crypto__keyring__v1__record__offline__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_cosmos_2fcrypto_2fkeyring_2fv1_2frecord_2eproto__INCLUDED */
