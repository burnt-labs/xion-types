/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: cosmos/crypto/ed25519/keys.proto */

#ifndef PROTOBUF_C_cosmos_2fcrypto_2fed25519_2fkeys_2eproto__INCLUDED
#define PROTOBUF_C_cosmos_2fcrypto_2fed25519_2fkeys_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protobuf-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1005002 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protobuf-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protobuf-c.
#endif

#include "amino/amino.pb-c.h"
#include "gogoproto/gogo.pb-c.h"

typedef struct Cosmos__Crypto__Ed25519__PubKey Cosmos__Crypto__Ed25519__PubKey;
typedef struct Cosmos__Crypto__Ed25519__PrivKey Cosmos__Crypto__Ed25519__PrivKey;


/* --- enums --- */


/* --- messages --- */

/*
 * PubKey is an ed25519 public key for handling Tendermint keys in SDK.
 * It's needed for Any serialization and SDK compatibility.
 * It must not be used in a non Tendermint key context because it doesn't implement
 * ADR-28. Nevertheless, you will like to use ed25519 in app user level
 * then you must create a new proto message and follow ADR-28 for Address construction.
 */
struct  Cosmos__Crypto__Ed25519__PubKey
{
  ProtobufCMessage base;
  ProtobufCBinaryData key;
};
#define COSMOS__CRYPTO__ED25519__PUB_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__crypto__ed25519__pub_key__descriptor) \
, {0,NULL} }


/*
 * PrivKey defines a ed25519 private key.
 * NOTE: ed25519 keys must not be used in SDK apps except in a tendermint validator context.
 */
struct  Cosmos__Crypto__Ed25519__PrivKey
{
  ProtobufCMessage base;
  ProtobufCBinaryData key;
};
#define COSMOS__CRYPTO__ED25519__PRIV_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__crypto__ed25519__priv_key__descriptor) \
, {0,NULL} }


/* Cosmos__Crypto__Ed25519__PubKey methods */
void   cosmos__crypto__ed25519__pub_key__init
                     (Cosmos__Crypto__Ed25519__PubKey         *message);
size_t cosmos__crypto__ed25519__pub_key__get_packed_size
                     (const Cosmos__Crypto__Ed25519__PubKey   *message);
size_t cosmos__crypto__ed25519__pub_key__pack
                     (const Cosmos__Crypto__Ed25519__PubKey   *message,
                      uint8_t             *out);
size_t cosmos__crypto__ed25519__pub_key__pack_to_buffer
                     (const Cosmos__Crypto__Ed25519__PubKey   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Crypto__Ed25519__PubKey *
       cosmos__crypto__ed25519__pub_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__crypto__ed25519__pub_key__free_unpacked
                     (Cosmos__Crypto__Ed25519__PubKey *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__Crypto__Ed25519__PrivKey methods */
void   cosmos__crypto__ed25519__priv_key__init
                     (Cosmos__Crypto__Ed25519__PrivKey         *message);
size_t cosmos__crypto__ed25519__priv_key__get_packed_size
                     (const Cosmos__Crypto__Ed25519__PrivKey   *message);
size_t cosmos__crypto__ed25519__priv_key__pack
                     (const Cosmos__Crypto__Ed25519__PrivKey   *message,
                      uint8_t             *out);
size_t cosmos__crypto__ed25519__priv_key__pack_to_buffer
                     (const Cosmos__Crypto__Ed25519__PrivKey   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Crypto__Ed25519__PrivKey *
       cosmos__crypto__ed25519__priv_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__crypto__ed25519__priv_key__free_unpacked
                     (Cosmos__Crypto__Ed25519__PrivKey *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Cosmos__Crypto__Ed25519__PubKey_Closure)
                 (const Cosmos__Crypto__Ed25519__PubKey *message,
                  void *closure_data);
typedef void (*Cosmos__Crypto__Ed25519__PrivKey_Closure)
                 (const Cosmos__Crypto__Ed25519__PrivKey *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor cosmos__crypto__ed25519__pub_key__descriptor;
extern const ProtobufCMessageDescriptor cosmos__crypto__ed25519__priv_key__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_cosmos_2fcrypto_2fed25519_2fkeys_2eproto__INCLUDED */
