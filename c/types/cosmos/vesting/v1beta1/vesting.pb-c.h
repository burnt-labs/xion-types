/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: cosmos/vesting/v1beta1/vesting.proto */

#ifndef PROTOBUF_C_cosmos_2fvesting_2fv1beta1_2fvesting_2eproto__INCLUDED
#define PROTOBUF_C_cosmos_2fvesting_2fv1beta1_2fvesting_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protobuf-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1005002 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protobuf-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protobuf-c.
#endif

#include "amino/amino.pb-c.h"
#include "gogoproto/gogo.pb-c.h"
#include "cosmos/base/v1beta1/coin.pb-c.h"
#include "cosmos_proto/cosmos.pb-c.h"
#include "cosmos/auth/v1beta1/auth.pb-c.h"

typedef struct Cosmos__Vesting__V1beta1__BaseVestingAccount Cosmos__Vesting__V1beta1__BaseVestingAccount;
typedef struct Cosmos__Vesting__V1beta1__ContinuousVestingAccount Cosmos__Vesting__V1beta1__ContinuousVestingAccount;
typedef struct Cosmos__Vesting__V1beta1__DelayedVestingAccount Cosmos__Vesting__V1beta1__DelayedVestingAccount;
typedef struct Cosmos__Vesting__V1beta1__Period Cosmos__Vesting__V1beta1__Period;
typedef struct Cosmos__Vesting__V1beta1__PeriodicVestingAccount Cosmos__Vesting__V1beta1__PeriodicVestingAccount;
typedef struct Cosmos__Vesting__V1beta1__PermanentLockedAccount Cosmos__Vesting__V1beta1__PermanentLockedAccount;


/* --- enums --- */


/* --- messages --- */

/*
 * BaseVestingAccount implements the VestingAccount interface. It contains all
 * the necessary fields needed for any vesting account implementation.
 */
struct  Cosmos__Vesting__V1beta1__BaseVestingAccount
{
  ProtobufCMessage base;
  Cosmos__Auth__V1beta1__BaseAccount *base_account;
  size_t n_original_vesting;
  Cosmos__Base__V1beta1__Coin **original_vesting;
  size_t n_delegated_free;
  Cosmos__Base__V1beta1__Coin **delegated_free;
  size_t n_delegated_vesting;
  Cosmos__Base__V1beta1__Coin **delegated_vesting;
  /*
   * Vesting end time, as unix timestamp (in seconds).
   */
  int64_t end_time;
};
#define COSMOS__VESTING__V1BETA1__BASE_VESTING_ACCOUNT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__vesting__v1beta1__base_vesting_account__descriptor) \
, NULL, 0,NULL, 0,NULL, 0,NULL, 0 }


/*
 * ContinuousVestingAccount implements the VestingAccount interface. It
 * continuously vests by unlocking coins linearly with respect to time.
 */
struct  Cosmos__Vesting__V1beta1__ContinuousVestingAccount
{
  ProtobufCMessage base;
  Cosmos__Vesting__V1beta1__BaseVestingAccount *base_vesting_account;
  /*
   * Vesting start time, as unix timestamp (in seconds).
   */
  int64_t start_time;
};
#define COSMOS__VESTING__V1BETA1__CONTINUOUS_VESTING_ACCOUNT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__vesting__v1beta1__continuous_vesting_account__descriptor) \
, NULL, 0 }


/*
 * DelayedVestingAccount implements the VestingAccount interface. It vests all
 * coins after a specific time, but non prior. In other words, it keeps them
 * locked until a specified time.
 */
struct  Cosmos__Vesting__V1beta1__DelayedVestingAccount
{
  ProtobufCMessage base;
  Cosmos__Vesting__V1beta1__BaseVestingAccount *base_vesting_account;
};
#define COSMOS__VESTING__V1BETA1__DELAYED_VESTING_ACCOUNT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__vesting__v1beta1__delayed_vesting_account__descriptor) \
, NULL }


/*
 * Period defines a length of time and amount of coins that will vest.
 */
struct  Cosmos__Vesting__V1beta1__Period
{
  ProtobufCMessage base;
  /*
   * Period duration in seconds.
   */
  int64_t length;
  size_t n_amount;
  Cosmos__Base__V1beta1__Coin **amount;
};
#define COSMOS__VESTING__V1BETA1__PERIOD__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__vesting__v1beta1__period__descriptor) \
, 0, 0,NULL }


/*
 * PeriodicVestingAccount implements the VestingAccount interface. It
 * periodically vests by unlocking coins during each specified period.
 */
struct  Cosmos__Vesting__V1beta1__PeriodicVestingAccount
{
  ProtobufCMessage base;
  Cosmos__Vesting__V1beta1__BaseVestingAccount *base_vesting_account;
  int64_t start_time;
  size_t n_vesting_periods;
  Cosmos__Vesting__V1beta1__Period **vesting_periods;
};
#define COSMOS__VESTING__V1BETA1__PERIODIC_VESTING_ACCOUNT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__vesting__v1beta1__periodic_vesting_account__descriptor) \
, NULL, 0, 0,NULL }


/*
 * PermanentLockedAccount implements the VestingAccount interface. It does
 * not ever release coins, locking them indefinitely. Coins in this account can
 * still be used for delegating and for governance votes even while locked.
 */
struct  Cosmos__Vesting__V1beta1__PermanentLockedAccount
{
  ProtobufCMessage base;
  Cosmos__Vesting__V1beta1__BaseVestingAccount *base_vesting_account;
};
#define COSMOS__VESTING__V1BETA1__PERMANENT_LOCKED_ACCOUNT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__vesting__v1beta1__permanent_locked_account__descriptor) \
, NULL }


/* Cosmos__Vesting__V1beta1__BaseVestingAccount methods */
void   cosmos__vesting__v1beta1__base_vesting_account__init
                     (Cosmos__Vesting__V1beta1__BaseVestingAccount         *message);
size_t cosmos__vesting__v1beta1__base_vesting_account__get_packed_size
                     (const Cosmos__Vesting__V1beta1__BaseVestingAccount   *message);
size_t cosmos__vesting__v1beta1__base_vesting_account__pack
                     (const Cosmos__Vesting__V1beta1__BaseVestingAccount   *message,
                      uint8_t             *out);
size_t cosmos__vesting__v1beta1__base_vesting_account__pack_to_buffer
                     (const Cosmos__Vesting__V1beta1__BaseVestingAccount   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Vesting__V1beta1__BaseVestingAccount *
       cosmos__vesting__v1beta1__base_vesting_account__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__vesting__v1beta1__base_vesting_account__free_unpacked
                     (Cosmos__Vesting__V1beta1__BaseVestingAccount *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__Vesting__V1beta1__ContinuousVestingAccount methods */
void   cosmos__vesting__v1beta1__continuous_vesting_account__init
                     (Cosmos__Vesting__V1beta1__ContinuousVestingAccount         *message);
size_t cosmos__vesting__v1beta1__continuous_vesting_account__get_packed_size
                     (const Cosmos__Vesting__V1beta1__ContinuousVestingAccount   *message);
size_t cosmos__vesting__v1beta1__continuous_vesting_account__pack
                     (const Cosmos__Vesting__V1beta1__ContinuousVestingAccount   *message,
                      uint8_t             *out);
size_t cosmos__vesting__v1beta1__continuous_vesting_account__pack_to_buffer
                     (const Cosmos__Vesting__V1beta1__ContinuousVestingAccount   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Vesting__V1beta1__ContinuousVestingAccount *
       cosmos__vesting__v1beta1__continuous_vesting_account__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__vesting__v1beta1__continuous_vesting_account__free_unpacked
                     (Cosmos__Vesting__V1beta1__ContinuousVestingAccount *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__Vesting__V1beta1__DelayedVestingAccount methods */
void   cosmos__vesting__v1beta1__delayed_vesting_account__init
                     (Cosmos__Vesting__V1beta1__DelayedVestingAccount         *message);
size_t cosmos__vesting__v1beta1__delayed_vesting_account__get_packed_size
                     (const Cosmos__Vesting__V1beta1__DelayedVestingAccount   *message);
size_t cosmos__vesting__v1beta1__delayed_vesting_account__pack
                     (const Cosmos__Vesting__V1beta1__DelayedVestingAccount   *message,
                      uint8_t             *out);
size_t cosmos__vesting__v1beta1__delayed_vesting_account__pack_to_buffer
                     (const Cosmos__Vesting__V1beta1__DelayedVestingAccount   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Vesting__V1beta1__DelayedVestingAccount *
       cosmos__vesting__v1beta1__delayed_vesting_account__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__vesting__v1beta1__delayed_vesting_account__free_unpacked
                     (Cosmos__Vesting__V1beta1__DelayedVestingAccount *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__Vesting__V1beta1__Period methods */
void   cosmos__vesting__v1beta1__period__init
                     (Cosmos__Vesting__V1beta1__Period         *message);
size_t cosmos__vesting__v1beta1__period__get_packed_size
                     (const Cosmos__Vesting__V1beta1__Period   *message);
size_t cosmos__vesting__v1beta1__period__pack
                     (const Cosmos__Vesting__V1beta1__Period   *message,
                      uint8_t             *out);
size_t cosmos__vesting__v1beta1__period__pack_to_buffer
                     (const Cosmos__Vesting__V1beta1__Period   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Vesting__V1beta1__Period *
       cosmos__vesting__v1beta1__period__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__vesting__v1beta1__period__free_unpacked
                     (Cosmos__Vesting__V1beta1__Period *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__Vesting__V1beta1__PeriodicVestingAccount methods */
void   cosmos__vesting__v1beta1__periodic_vesting_account__init
                     (Cosmos__Vesting__V1beta1__PeriodicVestingAccount         *message);
size_t cosmos__vesting__v1beta1__periodic_vesting_account__get_packed_size
                     (const Cosmos__Vesting__V1beta1__PeriodicVestingAccount   *message);
size_t cosmos__vesting__v1beta1__periodic_vesting_account__pack
                     (const Cosmos__Vesting__V1beta1__PeriodicVestingAccount   *message,
                      uint8_t             *out);
size_t cosmos__vesting__v1beta1__periodic_vesting_account__pack_to_buffer
                     (const Cosmos__Vesting__V1beta1__PeriodicVestingAccount   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Vesting__V1beta1__PeriodicVestingAccount *
       cosmos__vesting__v1beta1__periodic_vesting_account__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__vesting__v1beta1__periodic_vesting_account__free_unpacked
                     (Cosmos__Vesting__V1beta1__PeriodicVestingAccount *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__Vesting__V1beta1__PermanentLockedAccount methods */
void   cosmos__vesting__v1beta1__permanent_locked_account__init
                     (Cosmos__Vesting__V1beta1__PermanentLockedAccount         *message);
size_t cosmos__vesting__v1beta1__permanent_locked_account__get_packed_size
                     (const Cosmos__Vesting__V1beta1__PermanentLockedAccount   *message);
size_t cosmos__vesting__v1beta1__permanent_locked_account__pack
                     (const Cosmos__Vesting__V1beta1__PermanentLockedAccount   *message,
                      uint8_t             *out);
size_t cosmos__vesting__v1beta1__permanent_locked_account__pack_to_buffer
                     (const Cosmos__Vesting__V1beta1__PermanentLockedAccount   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Vesting__V1beta1__PermanentLockedAccount *
       cosmos__vesting__v1beta1__permanent_locked_account__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__vesting__v1beta1__permanent_locked_account__free_unpacked
                     (Cosmos__Vesting__V1beta1__PermanentLockedAccount *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Cosmos__Vesting__V1beta1__BaseVestingAccount_Closure)
                 (const Cosmos__Vesting__V1beta1__BaseVestingAccount *message,
                  void *closure_data);
typedef void (*Cosmos__Vesting__V1beta1__ContinuousVestingAccount_Closure)
                 (const Cosmos__Vesting__V1beta1__ContinuousVestingAccount *message,
                  void *closure_data);
typedef void (*Cosmos__Vesting__V1beta1__DelayedVestingAccount_Closure)
                 (const Cosmos__Vesting__V1beta1__DelayedVestingAccount *message,
                  void *closure_data);
typedef void (*Cosmos__Vesting__V1beta1__Period_Closure)
                 (const Cosmos__Vesting__V1beta1__Period *message,
                  void *closure_data);
typedef void (*Cosmos__Vesting__V1beta1__PeriodicVestingAccount_Closure)
                 (const Cosmos__Vesting__V1beta1__PeriodicVestingAccount *message,
                  void *closure_data);
typedef void (*Cosmos__Vesting__V1beta1__PermanentLockedAccount_Closure)
                 (const Cosmos__Vesting__V1beta1__PermanentLockedAccount *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor cosmos__vesting__v1beta1__base_vesting_account__descriptor;
extern const ProtobufCMessageDescriptor cosmos__vesting__v1beta1__continuous_vesting_account__descriptor;
extern const ProtobufCMessageDescriptor cosmos__vesting__v1beta1__delayed_vesting_account__descriptor;
extern const ProtobufCMessageDescriptor cosmos__vesting__v1beta1__period__descriptor;
extern const ProtobufCMessageDescriptor cosmos__vesting__v1beta1__periodic_vesting_account__descriptor;
extern const ProtobufCMessageDescriptor cosmos__vesting__v1beta1__permanent_locked_account__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_cosmos_2fvesting_2fv1beta1_2fvesting_2eproto__INCLUDED */
