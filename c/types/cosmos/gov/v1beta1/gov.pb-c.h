/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: cosmos/gov/v1beta1/gov.proto */

#ifndef PROTOBUF_C_cosmos_2fgov_2fv1beta1_2fgov_2eproto__INCLUDED
#define PROTOBUF_C_cosmos_2fgov_2fv1beta1_2fgov_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protobuf-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1005002 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protobuf-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protobuf-c.
#endif

#include "cosmos/base/v1beta1/coin.pb-c.h"
#include "gogoproto/gogo.pb-c.h"
#include "google/protobuf/timestamp.pb-c.h"
#include "google/protobuf/any.pb-c.h"
#include "google/protobuf/duration.pb-c.h"
#include "cosmos_proto/cosmos.pb-c.h"
#include "amino/amino.pb-c.h"

typedef struct Cosmos__Gov__V1beta1__WeightedVoteOption Cosmos__Gov__V1beta1__WeightedVoteOption;
typedef struct Cosmos__Gov__V1beta1__TextProposal Cosmos__Gov__V1beta1__TextProposal;
typedef struct Cosmos__Gov__V1beta1__Deposit Cosmos__Gov__V1beta1__Deposit;
typedef struct Cosmos__Gov__V1beta1__Proposal Cosmos__Gov__V1beta1__Proposal;
typedef struct Cosmos__Gov__V1beta1__TallyResult Cosmos__Gov__V1beta1__TallyResult;
typedef struct Cosmos__Gov__V1beta1__Vote Cosmos__Gov__V1beta1__Vote;
typedef struct Cosmos__Gov__V1beta1__DepositParams Cosmos__Gov__V1beta1__DepositParams;
typedef struct Cosmos__Gov__V1beta1__VotingParams Cosmos__Gov__V1beta1__VotingParams;
typedef struct Cosmos__Gov__V1beta1__TallyParams Cosmos__Gov__V1beta1__TallyParams;


/* --- enums --- */

/*
 * VoteOption enumerates the valid vote options for a given governance proposal.
 */
typedef enum _Cosmos__Gov__V1beta1__VoteOption {
  /*
   * VOTE_OPTION_UNSPECIFIED defines a no-op vote option.
   */
  COSMOS__GOV__V1BETA1__VOTE_OPTION__VOTE_OPTION_UNSPECIFIED = 0,
  /*
   * VOTE_OPTION_YES defines a yes vote option.
   */
  COSMOS__GOV__V1BETA1__VOTE_OPTION__VOTE_OPTION_YES = 1,
  /*
   * VOTE_OPTION_ABSTAIN defines an abstain vote option.
   */
  COSMOS__GOV__V1BETA1__VOTE_OPTION__VOTE_OPTION_ABSTAIN = 2,
  /*
   * VOTE_OPTION_NO defines a no vote option.
   */
  COSMOS__GOV__V1BETA1__VOTE_OPTION__VOTE_OPTION_NO = 3,
  /*
   * VOTE_OPTION_NO_WITH_VETO defines a no with veto vote option.
   */
  COSMOS__GOV__V1BETA1__VOTE_OPTION__VOTE_OPTION_NO_WITH_VETO = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(COSMOS__GOV__V1BETA1__VOTE_OPTION)
} Cosmos__Gov__V1beta1__VoteOption;
/*
 * ProposalStatus enumerates the valid statuses of a proposal.
 */
typedef enum _Cosmos__Gov__V1beta1__ProposalStatus {
  /*
   * PROPOSAL_STATUS_UNSPECIFIED defines the default proposal status.
   */
  COSMOS__GOV__V1BETA1__PROPOSAL_STATUS__PROPOSAL_STATUS_UNSPECIFIED = 0,
  /*
   * PROPOSAL_STATUS_DEPOSIT_PERIOD defines a proposal status during the deposit
   * period.
   */
  COSMOS__GOV__V1BETA1__PROPOSAL_STATUS__PROPOSAL_STATUS_DEPOSIT_PERIOD = 1,
  /*
   * PROPOSAL_STATUS_VOTING_PERIOD defines a proposal status during the voting
   * period.
   */
  COSMOS__GOV__V1BETA1__PROPOSAL_STATUS__PROPOSAL_STATUS_VOTING_PERIOD = 2,
  /*
   * PROPOSAL_STATUS_PASSED defines a proposal status of a proposal that has
   * passed.
   */
  COSMOS__GOV__V1BETA1__PROPOSAL_STATUS__PROPOSAL_STATUS_PASSED = 3,
  /*
   * PROPOSAL_STATUS_REJECTED defines a proposal status of a proposal that has
   * been rejected.
   */
  COSMOS__GOV__V1BETA1__PROPOSAL_STATUS__PROPOSAL_STATUS_REJECTED = 4,
  /*
   * PROPOSAL_STATUS_FAILED defines a proposal status of a proposal that has
   * failed.
   */
  COSMOS__GOV__V1BETA1__PROPOSAL_STATUS__PROPOSAL_STATUS_FAILED = 5
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(COSMOS__GOV__V1BETA1__PROPOSAL_STATUS)
} Cosmos__Gov__V1beta1__ProposalStatus;

/* --- messages --- */

/*
 * WeightedVoteOption defines a unit of vote for vote split.
 */
struct  Cosmos__Gov__V1beta1__WeightedVoteOption
{
  ProtobufCMessage base;
  /*
   * option defines the valid vote options, it must not contain duplicate vote options.
   */
  Cosmos__Gov__V1beta1__VoteOption option;
  /*
   * weight is the vote weight associated with the vote option.
   */
  char *weight;
};
#define COSMOS__GOV__V1BETA1__WEIGHTED_VOTE_OPTION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__gov__v1beta1__weighted_vote_option__descriptor) \
, COSMOS__GOV__V1BETA1__VOTE_OPTION__VOTE_OPTION_UNSPECIFIED, (char *)protobuf_c_empty_string }


/*
 * TextProposal defines a standard text proposal whose changes need to be
 * manually updated in case of approval.
 */
struct  Cosmos__Gov__V1beta1__TextProposal
{
  ProtobufCMessage base;
  /*
   * title of the proposal.
   */
  char *title;
  /*
   * description associated with the proposal.
   */
  char *description;
};
#define COSMOS__GOV__V1BETA1__TEXT_PROPOSAL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__gov__v1beta1__text_proposal__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


/*
 * Deposit defines an amount deposited by an account address to an active
 * proposal.
 */
struct  Cosmos__Gov__V1beta1__Deposit
{
  ProtobufCMessage base;
  /*
   * proposal_id defines the unique id of the proposal.
   */
  uint64_t proposal_id;
  /*
   * depositor defines the deposit addresses from the proposals.
   */
  char *depositor;
  /*
   * amount to be deposited by depositor.
   */
  size_t n_amount;
  Cosmos__Base__V1beta1__Coin **amount;
};
#define COSMOS__GOV__V1BETA1__DEPOSIT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__gov__v1beta1__deposit__descriptor) \
, 0, (char *)protobuf_c_empty_string, 0,NULL }


/*
 * Proposal defines the core field members of a governance proposal.
 */
struct  Cosmos__Gov__V1beta1__Proposal
{
  ProtobufCMessage base;
  /*
   * proposal_id defines the unique id of the proposal.
   */
  uint64_t proposal_id;
  /*
   * content is the proposal's content.
   */
  Google__Protobuf__Any *content;
  /*
   * status defines the proposal status.
   */
  Cosmos__Gov__V1beta1__ProposalStatus status;
  /*
   * final_tally_result is the final tally result of the proposal. When
   * querying a proposal via gRPC, this field is not populated until the
   * proposal's voting period has ended.
   */
  Cosmos__Gov__V1beta1__TallyResult *final_tally_result;
  /*
   * submit_time is the time of proposal submission.
   */
  Google__Protobuf__Timestamp *submit_time;
  /*
   * deposit_end_time is the end time for deposition.
   */
  Google__Protobuf__Timestamp *deposit_end_time;
  /*
   * total_deposit is the total deposit on the proposal.
   */
  size_t n_total_deposit;
  Cosmos__Base__V1beta1__Coin **total_deposit;
  /*
   * voting_start_time is the starting time to vote on a proposal.
   */
  Google__Protobuf__Timestamp *voting_start_time;
  /*
   * voting_end_time is the end time of voting on a proposal.
   */
  Google__Protobuf__Timestamp *voting_end_time;
};
#define COSMOS__GOV__V1BETA1__PROPOSAL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__gov__v1beta1__proposal__descriptor) \
, 0, NULL, COSMOS__GOV__V1BETA1__PROPOSAL_STATUS__PROPOSAL_STATUS_UNSPECIFIED, NULL, NULL, NULL, 0,NULL, NULL, NULL }


/*
 * TallyResult defines a standard tally for a governance proposal.
 */
struct  Cosmos__Gov__V1beta1__TallyResult
{
  ProtobufCMessage base;
  /*
   * yes is the number of yes votes on a proposal.
   */
  char *yes;
  /*
   * abstain is the number of abstain votes on a proposal.
   */
  char *abstain;
  /*
   * no is the number of no votes on a proposal.
   */
  char *no;
  /*
   * no_with_veto is the number of no with veto votes on a proposal.
   */
  char *no_with_veto;
};
#define COSMOS__GOV__V1BETA1__TALLY_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__gov__v1beta1__tally_result__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


/*
 * Vote defines a vote on a governance proposal.
 * A Vote consists of a proposal ID, the voter, and the vote option.
 */
struct  Cosmos__Gov__V1beta1__Vote
{
  ProtobufCMessage base;
  /*
   * proposal_id defines the unique id of the proposal.
   */
  uint64_t proposal_id;
  /*
   * voter is the voter address of the proposal.
   */
  char *voter;
  /*
   * Deprecated: Prefer to use `options` instead. This field is set in queries
   * if and only if `len(options) == 1` and that option has weight 1. In all
   * other cases, this field will default to VOTE_OPTION_UNSPECIFIED.
   */
  Cosmos__Gov__V1beta1__VoteOption option PROTOBUF_C__DEPRECATED;
  /*
   * options is the weighted vote options.
   */
  size_t n_options;
  Cosmos__Gov__V1beta1__WeightedVoteOption **options;
};
#define COSMOS__GOV__V1BETA1__VOTE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__gov__v1beta1__vote__descriptor) \
, 0, (char *)protobuf_c_empty_string, COSMOS__GOV__V1BETA1__VOTE_OPTION__VOTE_OPTION_UNSPECIFIED, 0,NULL }


/*
 * DepositParams defines the params for deposits on governance proposals.
 */
struct  Cosmos__Gov__V1beta1__DepositParams
{
  ProtobufCMessage base;
  /*
   * Minimum deposit for a proposal to enter voting period.
   */
  size_t n_min_deposit;
  Cosmos__Base__V1beta1__Coin **min_deposit;
  /*
   * Maximum period for Atom holders to deposit on a proposal. Initial value: 2
   * months.
   */
  Google__Protobuf__Duration *max_deposit_period;
};
#define COSMOS__GOV__V1BETA1__DEPOSIT_PARAMS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__gov__v1beta1__deposit_params__descriptor) \
, 0,NULL, NULL }


/*
 * VotingParams defines the params for voting on governance proposals.
 */
struct  Cosmos__Gov__V1beta1__VotingParams
{
  ProtobufCMessage base;
  /*
   * Duration of the voting period.
   */
  Google__Protobuf__Duration *voting_period;
};
#define COSMOS__GOV__V1BETA1__VOTING_PARAMS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__gov__v1beta1__voting_params__descriptor) \
, NULL }


/*
 * TallyParams defines the params for tallying votes on governance proposals.
 */
struct  Cosmos__Gov__V1beta1__TallyParams
{
  ProtobufCMessage base;
  /*
   * Minimum percentage of total stake needed to vote for a result to be
   * considered valid.
   */
  ProtobufCBinaryData quorum;
  /*
   * Minimum proportion of Yes votes for proposal to pass. Default value: 0.5.
   */
  ProtobufCBinaryData threshold;
  /*
   * Minimum value of Veto votes to Total votes ratio for proposal to be
   * vetoed. Default value: 1/3.
   */
  ProtobufCBinaryData veto_threshold;
};
#define COSMOS__GOV__V1BETA1__TALLY_PARAMS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__gov__v1beta1__tally_params__descriptor) \
, {0,NULL}, {0,NULL}, {0,NULL} }


/* Cosmos__Gov__V1beta1__WeightedVoteOption methods */
void   cosmos__gov__v1beta1__weighted_vote_option__init
                     (Cosmos__Gov__V1beta1__WeightedVoteOption         *message);
size_t cosmos__gov__v1beta1__weighted_vote_option__get_packed_size
                     (const Cosmos__Gov__V1beta1__WeightedVoteOption   *message);
size_t cosmos__gov__v1beta1__weighted_vote_option__pack
                     (const Cosmos__Gov__V1beta1__WeightedVoteOption   *message,
                      uint8_t             *out);
size_t cosmos__gov__v1beta1__weighted_vote_option__pack_to_buffer
                     (const Cosmos__Gov__V1beta1__WeightedVoteOption   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Gov__V1beta1__WeightedVoteOption *
       cosmos__gov__v1beta1__weighted_vote_option__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__gov__v1beta1__weighted_vote_option__free_unpacked
                     (Cosmos__Gov__V1beta1__WeightedVoteOption *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__Gov__V1beta1__TextProposal methods */
void   cosmos__gov__v1beta1__text_proposal__init
                     (Cosmos__Gov__V1beta1__TextProposal         *message);
size_t cosmos__gov__v1beta1__text_proposal__get_packed_size
                     (const Cosmos__Gov__V1beta1__TextProposal   *message);
size_t cosmos__gov__v1beta1__text_proposal__pack
                     (const Cosmos__Gov__V1beta1__TextProposal   *message,
                      uint8_t             *out);
size_t cosmos__gov__v1beta1__text_proposal__pack_to_buffer
                     (const Cosmos__Gov__V1beta1__TextProposal   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Gov__V1beta1__TextProposal *
       cosmos__gov__v1beta1__text_proposal__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__gov__v1beta1__text_proposal__free_unpacked
                     (Cosmos__Gov__V1beta1__TextProposal *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__Gov__V1beta1__Deposit methods */
void   cosmos__gov__v1beta1__deposit__init
                     (Cosmos__Gov__V1beta1__Deposit         *message);
size_t cosmos__gov__v1beta1__deposit__get_packed_size
                     (const Cosmos__Gov__V1beta1__Deposit   *message);
size_t cosmos__gov__v1beta1__deposit__pack
                     (const Cosmos__Gov__V1beta1__Deposit   *message,
                      uint8_t             *out);
size_t cosmos__gov__v1beta1__deposit__pack_to_buffer
                     (const Cosmos__Gov__V1beta1__Deposit   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Gov__V1beta1__Deposit *
       cosmos__gov__v1beta1__deposit__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__gov__v1beta1__deposit__free_unpacked
                     (Cosmos__Gov__V1beta1__Deposit *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__Gov__V1beta1__Proposal methods */
void   cosmos__gov__v1beta1__proposal__init
                     (Cosmos__Gov__V1beta1__Proposal         *message);
size_t cosmos__gov__v1beta1__proposal__get_packed_size
                     (const Cosmos__Gov__V1beta1__Proposal   *message);
size_t cosmos__gov__v1beta1__proposal__pack
                     (const Cosmos__Gov__V1beta1__Proposal   *message,
                      uint8_t             *out);
size_t cosmos__gov__v1beta1__proposal__pack_to_buffer
                     (const Cosmos__Gov__V1beta1__Proposal   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Gov__V1beta1__Proposal *
       cosmos__gov__v1beta1__proposal__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__gov__v1beta1__proposal__free_unpacked
                     (Cosmos__Gov__V1beta1__Proposal *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__Gov__V1beta1__TallyResult methods */
void   cosmos__gov__v1beta1__tally_result__init
                     (Cosmos__Gov__V1beta1__TallyResult         *message);
size_t cosmos__gov__v1beta1__tally_result__get_packed_size
                     (const Cosmos__Gov__V1beta1__TallyResult   *message);
size_t cosmos__gov__v1beta1__tally_result__pack
                     (const Cosmos__Gov__V1beta1__TallyResult   *message,
                      uint8_t             *out);
size_t cosmos__gov__v1beta1__tally_result__pack_to_buffer
                     (const Cosmos__Gov__V1beta1__TallyResult   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Gov__V1beta1__TallyResult *
       cosmos__gov__v1beta1__tally_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__gov__v1beta1__tally_result__free_unpacked
                     (Cosmos__Gov__V1beta1__TallyResult *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__Gov__V1beta1__Vote methods */
void   cosmos__gov__v1beta1__vote__init
                     (Cosmos__Gov__V1beta1__Vote         *message);
size_t cosmos__gov__v1beta1__vote__get_packed_size
                     (const Cosmos__Gov__V1beta1__Vote   *message);
size_t cosmos__gov__v1beta1__vote__pack
                     (const Cosmos__Gov__V1beta1__Vote   *message,
                      uint8_t             *out);
size_t cosmos__gov__v1beta1__vote__pack_to_buffer
                     (const Cosmos__Gov__V1beta1__Vote   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Gov__V1beta1__Vote *
       cosmos__gov__v1beta1__vote__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__gov__v1beta1__vote__free_unpacked
                     (Cosmos__Gov__V1beta1__Vote *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__Gov__V1beta1__DepositParams methods */
void   cosmos__gov__v1beta1__deposit_params__init
                     (Cosmos__Gov__V1beta1__DepositParams         *message);
size_t cosmos__gov__v1beta1__deposit_params__get_packed_size
                     (const Cosmos__Gov__V1beta1__DepositParams   *message);
size_t cosmos__gov__v1beta1__deposit_params__pack
                     (const Cosmos__Gov__V1beta1__DepositParams   *message,
                      uint8_t             *out);
size_t cosmos__gov__v1beta1__deposit_params__pack_to_buffer
                     (const Cosmos__Gov__V1beta1__DepositParams   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Gov__V1beta1__DepositParams *
       cosmos__gov__v1beta1__deposit_params__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__gov__v1beta1__deposit_params__free_unpacked
                     (Cosmos__Gov__V1beta1__DepositParams *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__Gov__V1beta1__VotingParams methods */
void   cosmos__gov__v1beta1__voting_params__init
                     (Cosmos__Gov__V1beta1__VotingParams         *message);
size_t cosmos__gov__v1beta1__voting_params__get_packed_size
                     (const Cosmos__Gov__V1beta1__VotingParams   *message);
size_t cosmos__gov__v1beta1__voting_params__pack
                     (const Cosmos__Gov__V1beta1__VotingParams   *message,
                      uint8_t             *out);
size_t cosmos__gov__v1beta1__voting_params__pack_to_buffer
                     (const Cosmos__Gov__V1beta1__VotingParams   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Gov__V1beta1__VotingParams *
       cosmos__gov__v1beta1__voting_params__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__gov__v1beta1__voting_params__free_unpacked
                     (Cosmos__Gov__V1beta1__VotingParams *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__Gov__V1beta1__TallyParams methods */
void   cosmos__gov__v1beta1__tally_params__init
                     (Cosmos__Gov__V1beta1__TallyParams         *message);
size_t cosmos__gov__v1beta1__tally_params__get_packed_size
                     (const Cosmos__Gov__V1beta1__TallyParams   *message);
size_t cosmos__gov__v1beta1__tally_params__pack
                     (const Cosmos__Gov__V1beta1__TallyParams   *message,
                      uint8_t             *out);
size_t cosmos__gov__v1beta1__tally_params__pack_to_buffer
                     (const Cosmos__Gov__V1beta1__TallyParams   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Gov__V1beta1__TallyParams *
       cosmos__gov__v1beta1__tally_params__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__gov__v1beta1__tally_params__free_unpacked
                     (Cosmos__Gov__V1beta1__TallyParams *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Cosmos__Gov__V1beta1__WeightedVoteOption_Closure)
                 (const Cosmos__Gov__V1beta1__WeightedVoteOption *message,
                  void *closure_data);
typedef void (*Cosmos__Gov__V1beta1__TextProposal_Closure)
                 (const Cosmos__Gov__V1beta1__TextProposal *message,
                  void *closure_data);
typedef void (*Cosmos__Gov__V1beta1__Deposit_Closure)
                 (const Cosmos__Gov__V1beta1__Deposit *message,
                  void *closure_data);
typedef void (*Cosmos__Gov__V1beta1__Proposal_Closure)
                 (const Cosmos__Gov__V1beta1__Proposal *message,
                  void *closure_data);
typedef void (*Cosmos__Gov__V1beta1__TallyResult_Closure)
                 (const Cosmos__Gov__V1beta1__TallyResult *message,
                  void *closure_data);
typedef void (*Cosmos__Gov__V1beta1__Vote_Closure)
                 (const Cosmos__Gov__V1beta1__Vote *message,
                  void *closure_data);
typedef void (*Cosmos__Gov__V1beta1__DepositParams_Closure)
                 (const Cosmos__Gov__V1beta1__DepositParams *message,
                  void *closure_data);
typedef void (*Cosmos__Gov__V1beta1__VotingParams_Closure)
                 (const Cosmos__Gov__V1beta1__VotingParams *message,
                  void *closure_data);
typedef void (*Cosmos__Gov__V1beta1__TallyParams_Closure)
                 (const Cosmos__Gov__V1beta1__TallyParams *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    cosmos__gov__v1beta1__vote_option__descriptor;
extern const ProtobufCEnumDescriptor    cosmos__gov__v1beta1__proposal_status__descriptor;
extern const ProtobufCMessageDescriptor cosmos__gov__v1beta1__weighted_vote_option__descriptor;
extern const ProtobufCMessageDescriptor cosmos__gov__v1beta1__text_proposal__descriptor;
extern const ProtobufCMessageDescriptor cosmos__gov__v1beta1__deposit__descriptor;
extern const ProtobufCMessageDescriptor cosmos__gov__v1beta1__proposal__descriptor;
extern const ProtobufCMessageDescriptor cosmos__gov__v1beta1__tally_result__descriptor;
extern const ProtobufCMessageDescriptor cosmos__gov__v1beta1__vote__descriptor;
extern const ProtobufCMessageDescriptor cosmos__gov__v1beta1__deposit_params__descriptor;
extern const ProtobufCMessageDescriptor cosmos__gov__v1beta1__voting_params__descriptor;
extern const ProtobufCMessageDescriptor cosmos__gov__v1beta1__tally_params__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_cosmos_2fgov_2fv1beta1_2fgov_2eproto__INCLUDED */
