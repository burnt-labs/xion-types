/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: cosmos/protocolpool/v1/types.proto */

#ifndef PROTOBUF_C_cosmos_2fprotocolpool_2fv1_2ftypes_2eproto__INCLUDED
#define PROTOBUF_C_cosmos_2fprotocolpool_2fv1_2ftypes_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protobuf-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1005002 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protobuf-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protobuf-c.
#endif

#include "gogoproto/gogo.pb-c.h"
#include "cosmos_proto/cosmos.pb-c.h"
#include "google/protobuf/timestamp.pb-c.h"

typedef struct Cosmos__Protocolpool__V1__ContinuousFund Cosmos__Protocolpool__V1__ContinuousFund;
typedef struct Cosmos__Protocolpool__V1__Params Cosmos__Protocolpool__V1__Params;


/* --- enums --- */


/* --- messages --- */

/*
 * ContinuousFund defines the fields of continuous fund proposal.
 */
struct  Cosmos__Protocolpool__V1__ContinuousFund
{
  ProtobufCMessage base;
  /*
   * Recipient is the address string of the account receiving funds.
   */
  char *recipient;
  /*
   * Percentage is the percentage of funds to be allocated from Community pool.
   */
  char *percentage;
  /*
   * Optional, if expiry is set, removes the state object when expired.
   */
  Google__Protobuf__Timestamp *expiry;
};
#define COSMOS__PROTOCOLPOOL__V1__CONTINUOUS_FUND__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__protocolpool__v1__continuous_fund__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, NULL }


/*
 * Params defines the parameters for the protocolpool module.
 */
struct  Cosmos__Protocolpool__V1__Params
{
  ProtobufCMessage base;
  /*
   * EnabledDistributionDenoms lists the denoms that are allowed to be distributed.
   * This is to avoid spending time distributing undesired tokens to continuous funds and budgets.
   */
  size_t n_enabled_distribution_denoms;
  char **enabled_distribution_denoms;
  /*
   * DistributionFrequency is the frequency (in terms of blocks) that funds are distributed out from the
   * x/protocolpool module.
   */
  uint64_t distribution_frequency;
};
#define COSMOS__PROTOCOLPOOL__V1__PARAMS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__protocolpool__v1__params__descriptor) \
, 0,NULL, 0 }


/* Cosmos__Protocolpool__V1__ContinuousFund methods */
void   cosmos__protocolpool__v1__continuous_fund__init
                     (Cosmos__Protocolpool__V1__ContinuousFund         *message);
size_t cosmos__protocolpool__v1__continuous_fund__get_packed_size
                     (const Cosmos__Protocolpool__V1__ContinuousFund   *message);
size_t cosmos__protocolpool__v1__continuous_fund__pack
                     (const Cosmos__Protocolpool__V1__ContinuousFund   *message,
                      uint8_t             *out);
size_t cosmos__protocolpool__v1__continuous_fund__pack_to_buffer
                     (const Cosmos__Protocolpool__V1__ContinuousFund   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Protocolpool__V1__ContinuousFund *
       cosmos__protocolpool__v1__continuous_fund__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__protocolpool__v1__continuous_fund__free_unpacked
                     (Cosmos__Protocolpool__V1__ContinuousFund *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__Protocolpool__V1__Params methods */
void   cosmos__protocolpool__v1__params__init
                     (Cosmos__Protocolpool__V1__Params         *message);
size_t cosmos__protocolpool__v1__params__get_packed_size
                     (const Cosmos__Protocolpool__V1__Params   *message);
size_t cosmos__protocolpool__v1__params__pack
                     (const Cosmos__Protocolpool__V1__Params   *message,
                      uint8_t             *out);
size_t cosmos__protocolpool__v1__params__pack_to_buffer
                     (const Cosmos__Protocolpool__V1__Params   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Protocolpool__V1__Params *
       cosmos__protocolpool__v1__params__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__protocolpool__v1__params__free_unpacked
                     (Cosmos__Protocolpool__V1__Params *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Cosmos__Protocolpool__V1__ContinuousFund_Closure)
                 (const Cosmos__Protocolpool__V1__ContinuousFund *message,
                  void *closure_data);
typedef void (*Cosmos__Protocolpool__V1__Params_Closure)
                 (const Cosmos__Protocolpool__V1__Params *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor cosmos__protocolpool__v1__continuous_fund__descriptor;
extern const ProtobufCMessageDescriptor cosmos__protocolpool__v1__params__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_cosmos_2fprotocolpool_2fv1_2ftypes_2eproto__INCLUDED */
