/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: cosmos/protocolpool/v1/tx.proto */

#ifndef PROTOBUF_C_cosmos_2fprotocolpool_2fv1_2ftx_2eproto__INCLUDED
#define PROTOBUF_C_cosmos_2fprotocolpool_2fv1_2ftx_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protobuf-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1005002 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protobuf-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protobuf-c.
#endif

#include "cosmos/protocolpool/v1/types.pb-c.h"
#include "gogoproto/gogo.pb-c.h"
#include "cosmos/base/v1beta1/coin.pb-c.h"
#include "cosmos_proto/cosmos.pb-c.h"
#include "cosmos/msg/v1/msg.pb-c.h"
#include "google/protobuf/timestamp.pb-c.h"

typedef struct Cosmos__Protocolpool__V1__MsgFundCommunityPool Cosmos__Protocolpool__V1__MsgFundCommunityPool;
typedef struct Cosmos__Protocolpool__V1__MsgFundCommunityPoolResponse Cosmos__Protocolpool__V1__MsgFundCommunityPoolResponse;
typedef struct Cosmos__Protocolpool__V1__MsgCommunityPoolSpend Cosmos__Protocolpool__V1__MsgCommunityPoolSpend;
typedef struct Cosmos__Protocolpool__V1__MsgCommunityPoolSpendResponse Cosmos__Protocolpool__V1__MsgCommunityPoolSpendResponse;
typedef struct Cosmos__Protocolpool__V1__MsgCreateContinuousFund Cosmos__Protocolpool__V1__MsgCreateContinuousFund;
typedef struct Cosmos__Protocolpool__V1__MsgCreateContinuousFundResponse Cosmos__Protocolpool__V1__MsgCreateContinuousFundResponse;
typedef struct Cosmos__Protocolpool__V1__MsgCancelContinuousFund Cosmos__Protocolpool__V1__MsgCancelContinuousFund;
typedef struct Cosmos__Protocolpool__V1__MsgCancelContinuousFundResponse Cosmos__Protocolpool__V1__MsgCancelContinuousFundResponse;
typedef struct Cosmos__Protocolpool__V1__MsgUpdateParams Cosmos__Protocolpool__V1__MsgUpdateParams;
typedef struct Cosmos__Protocolpool__V1__MsgUpdateParamsResponse Cosmos__Protocolpool__V1__MsgUpdateParamsResponse;


/* --- enums --- */


/* --- messages --- */

/*
 * MsgFundCommunityPool allows an account to directly
 * fund the community pool.
 */
struct  Cosmos__Protocolpool__V1__MsgFundCommunityPool
{
  ProtobufCMessage base;
  char *depositor;
  size_t n_amount;
  Cosmos__Base__V1beta1__Coin **amount;
};
#define COSMOS__PROTOCOLPOOL__V1__MSG_FUND_COMMUNITY_POOL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__protocolpool__v1__msg_fund_community_pool__descriptor) \
, (char *)protobuf_c_empty_string, 0,NULL }


/*
 * MsgFundCommunityPoolResponse defines the Msg/FundCommunityPool response type.
 */
struct  Cosmos__Protocolpool__V1__MsgFundCommunityPoolResponse
{
  ProtobufCMessage base;
};
#define COSMOS__PROTOCOLPOOL__V1__MSG_FUND_COMMUNITY_POOL_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__protocolpool__v1__msg_fund_community_pool_response__descriptor) \
 }


/*
 * MsgCommunityPoolSpend defines a message for sending tokens from the community
 * pool to another account. This message is typically executed via a governance
 * proposal with the governance module being the executing authority.
 */
struct  Cosmos__Protocolpool__V1__MsgCommunityPoolSpend
{
  ProtobufCMessage base;
  /*
   * Authority is the address that controls the module (defaults to x/gov unless overwritten).
   */
  char *authority;
  char *recipient;
  size_t n_amount;
  Cosmos__Base__V1beta1__Coin **amount;
};
#define COSMOS__PROTOCOLPOOL__V1__MSG_COMMUNITY_POOL_SPEND__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__protocolpool__v1__msg_community_pool_spend__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0,NULL }


/*
 * MsgCommunityPoolSpendResponse defines the response to executing a
 * MsgCommunityPoolSpend message.
 */
struct  Cosmos__Protocolpool__V1__MsgCommunityPoolSpendResponse
{
  ProtobufCMessage base;
};
#define COSMOS__PROTOCOLPOOL__V1__MSG_COMMUNITY_POOL_SPEND_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__protocolpool__v1__msg_community_pool_spend_response__descriptor) \
 }


/*
 * MsgCreateContinuousFund defines a message for adding continuous funds.
 */
struct  Cosmos__Protocolpool__V1__MsgCreateContinuousFund
{
  ProtobufCMessage base;
  /*
   * Authority is the address that controls the module (defaults to x/gov unless overwritten).
   */
  char *authority;
  /*
   * Recipient address of the account receiving funds.
   */
  char *recipient;
  /*
   * Percentage is the percentage of funds to be allocated from Community pool.
   */
  char *percentage;
  /*
   * Optional, if expiry is set, removes the state object when expired.
   */
  Google__Protobuf__Timestamp *expiry;
};
#define COSMOS__PROTOCOLPOOL__V1__MSG_CREATE_CONTINUOUS_FUND__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__protocolpool__v1__msg_create_continuous_fund__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, NULL }


/*
 * MsgCreateContinuousFundResponse defines the response to executing a
 * MsgCreateContinuousFund message.
 */
struct  Cosmos__Protocolpool__V1__MsgCreateContinuousFundResponse
{
  ProtobufCMessage base;
};
#define COSMOS__PROTOCOLPOOL__V1__MSG_CREATE_CONTINUOUS_FUND_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__protocolpool__v1__msg_create_continuous_fund_response__descriptor) \
 }


/*
 * MsgCancelContinuousFund defines a message to cancel continuous funds for a specific recipient.
 */
struct  Cosmos__Protocolpool__V1__MsgCancelContinuousFund
{
  ProtobufCMessage base;
  /*
   * Authority is the account address of authority.
   */
  char *authority;
  /*
   * Recipient is the account address string of the recipient whose funds are to be cancelled.
   */
  char *recipient;
};
#define COSMOS__PROTOCOLPOOL__V1__MSG_CANCEL_CONTINUOUS_FUND__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__protocolpool__v1__msg_cancel_continuous_fund__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


/*
 * MsgCancelContinuousFundResponse defines the response to executing a
 * MsgCancelContinuousFund message.
 */
struct  Cosmos__Protocolpool__V1__MsgCancelContinuousFundResponse
{
  ProtobufCMessage base;
  /*
   * CanceledTime is the canceled time.
   */
  Google__Protobuf__Timestamp *canceled_time;
  /*
   * CanceledHeight defines the canceled block height.
   */
  uint64_t canceled_height;
  /*
   * Recipient is the account address string of the recipient whose funds are cancelled.
   */
  char *recipient;
};
#define COSMOS__PROTOCOLPOOL__V1__MSG_CANCEL_CONTINUOUS_FUND_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__protocolpool__v1__msg_cancel_continuous_fund_response__descriptor) \
, NULL, 0, (char *)protobuf_c_empty_string }


/*
 * MsgUpdateParams is the Msg/UpdateParams request type.
 */
struct  Cosmos__Protocolpool__V1__MsgUpdateParams
{
  ProtobufCMessage base;
  /*
   * authority is the address that controls the module (defaults to x/gov unless overwritten).
   */
  char *authority;
  /*
   * params defines the x/protocolpool parameters to update.
   * NOTE: All parameters must be supplied.
   */
  Cosmos__Protocolpool__V1__Params *params;
};
#define COSMOS__PROTOCOLPOOL__V1__MSG_UPDATE_PARAMS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__protocolpool__v1__msg_update_params__descriptor) \
, (char *)protobuf_c_empty_string, NULL }


/*
 * MsgUpdateParamsResponse defines the response structure for executing a
 * MsgUpdateParams message.
 */
struct  Cosmos__Protocolpool__V1__MsgUpdateParamsResponse
{
  ProtobufCMessage base;
};
#define COSMOS__PROTOCOLPOOL__V1__MSG_UPDATE_PARAMS_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__protocolpool__v1__msg_update_params_response__descriptor) \
 }


/* Cosmos__Protocolpool__V1__MsgFundCommunityPool methods */
void   cosmos__protocolpool__v1__msg_fund_community_pool__init
                     (Cosmos__Protocolpool__V1__MsgFundCommunityPool         *message);
size_t cosmos__protocolpool__v1__msg_fund_community_pool__get_packed_size
                     (const Cosmos__Protocolpool__V1__MsgFundCommunityPool   *message);
size_t cosmos__protocolpool__v1__msg_fund_community_pool__pack
                     (const Cosmos__Protocolpool__V1__MsgFundCommunityPool   *message,
                      uint8_t             *out);
size_t cosmos__protocolpool__v1__msg_fund_community_pool__pack_to_buffer
                     (const Cosmos__Protocolpool__V1__MsgFundCommunityPool   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Protocolpool__V1__MsgFundCommunityPool *
       cosmos__protocolpool__v1__msg_fund_community_pool__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__protocolpool__v1__msg_fund_community_pool__free_unpacked
                     (Cosmos__Protocolpool__V1__MsgFundCommunityPool *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__Protocolpool__V1__MsgFundCommunityPoolResponse methods */
void   cosmos__protocolpool__v1__msg_fund_community_pool_response__init
                     (Cosmos__Protocolpool__V1__MsgFundCommunityPoolResponse         *message);
size_t cosmos__protocolpool__v1__msg_fund_community_pool_response__get_packed_size
                     (const Cosmos__Protocolpool__V1__MsgFundCommunityPoolResponse   *message);
size_t cosmos__protocolpool__v1__msg_fund_community_pool_response__pack
                     (const Cosmos__Protocolpool__V1__MsgFundCommunityPoolResponse   *message,
                      uint8_t             *out);
size_t cosmos__protocolpool__v1__msg_fund_community_pool_response__pack_to_buffer
                     (const Cosmos__Protocolpool__V1__MsgFundCommunityPoolResponse   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Protocolpool__V1__MsgFundCommunityPoolResponse *
       cosmos__protocolpool__v1__msg_fund_community_pool_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__protocolpool__v1__msg_fund_community_pool_response__free_unpacked
                     (Cosmos__Protocolpool__V1__MsgFundCommunityPoolResponse *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__Protocolpool__V1__MsgCommunityPoolSpend methods */
void   cosmos__protocolpool__v1__msg_community_pool_spend__init
                     (Cosmos__Protocolpool__V1__MsgCommunityPoolSpend         *message);
size_t cosmos__protocolpool__v1__msg_community_pool_spend__get_packed_size
                     (const Cosmos__Protocolpool__V1__MsgCommunityPoolSpend   *message);
size_t cosmos__protocolpool__v1__msg_community_pool_spend__pack
                     (const Cosmos__Protocolpool__V1__MsgCommunityPoolSpend   *message,
                      uint8_t             *out);
size_t cosmos__protocolpool__v1__msg_community_pool_spend__pack_to_buffer
                     (const Cosmos__Protocolpool__V1__MsgCommunityPoolSpend   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Protocolpool__V1__MsgCommunityPoolSpend *
       cosmos__protocolpool__v1__msg_community_pool_spend__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__protocolpool__v1__msg_community_pool_spend__free_unpacked
                     (Cosmos__Protocolpool__V1__MsgCommunityPoolSpend *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__Protocolpool__V1__MsgCommunityPoolSpendResponse methods */
void   cosmos__protocolpool__v1__msg_community_pool_spend_response__init
                     (Cosmos__Protocolpool__V1__MsgCommunityPoolSpendResponse         *message);
size_t cosmos__protocolpool__v1__msg_community_pool_spend_response__get_packed_size
                     (const Cosmos__Protocolpool__V1__MsgCommunityPoolSpendResponse   *message);
size_t cosmos__protocolpool__v1__msg_community_pool_spend_response__pack
                     (const Cosmos__Protocolpool__V1__MsgCommunityPoolSpendResponse   *message,
                      uint8_t             *out);
size_t cosmos__protocolpool__v1__msg_community_pool_spend_response__pack_to_buffer
                     (const Cosmos__Protocolpool__V1__MsgCommunityPoolSpendResponse   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Protocolpool__V1__MsgCommunityPoolSpendResponse *
       cosmos__protocolpool__v1__msg_community_pool_spend_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__protocolpool__v1__msg_community_pool_spend_response__free_unpacked
                     (Cosmos__Protocolpool__V1__MsgCommunityPoolSpendResponse *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__Protocolpool__V1__MsgCreateContinuousFund methods */
void   cosmos__protocolpool__v1__msg_create_continuous_fund__init
                     (Cosmos__Protocolpool__V1__MsgCreateContinuousFund         *message);
size_t cosmos__protocolpool__v1__msg_create_continuous_fund__get_packed_size
                     (const Cosmos__Protocolpool__V1__MsgCreateContinuousFund   *message);
size_t cosmos__protocolpool__v1__msg_create_continuous_fund__pack
                     (const Cosmos__Protocolpool__V1__MsgCreateContinuousFund   *message,
                      uint8_t             *out);
size_t cosmos__protocolpool__v1__msg_create_continuous_fund__pack_to_buffer
                     (const Cosmos__Protocolpool__V1__MsgCreateContinuousFund   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Protocolpool__V1__MsgCreateContinuousFund *
       cosmos__protocolpool__v1__msg_create_continuous_fund__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__protocolpool__v1__msg_create_continuous_fund__free_unpacked
                     (Cosmos__Protocolpool__V1__MsgCreateContinuousFund *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__Protocolpool__V1__MsgCreateContinuousFundResponse methods */
void   cosmos__protocolpool__v1__msg_create_continuous_fund_response__init
                     (Cosmos__Protocolpool__V1__MsgCreateContinuousFundResponse         *message);
size_t cosmos__protocolpool__v1__msg_create_continuous_fund_response__get_packed_size
                     (const Cosmos__Protocolpool__V1__MsgCreateContinuousFundResponse   *message);
size_t cosmos__protocolpool__v1__msg_create_continuous_fund_response__pack
                     (const Cosmos__Protocolpool__V1__MsgCreateContinuousFundResponse   *message,
                      uint8_t             *out);
size_t cosmos__protocolpool__v1__msg_create_continuous_fund_response__pack_to_buffer
                     (const Cosmos__Protocolpool__V1__MsgCreateContinuousFundResponse   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Protocolpool__V1__MsgCreateContinuousFundResponse *
       cosmos__protocolpool__v1__msg_create_continuous_fund_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__protocolpool__v1__msg_create_continuous_fund_response__free_unpacked
                     (Cosmos__Protocolpool__V1__MsgCreateContinuousFundResponse *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__Protocolpool__V1__MsgCancelContinuousFund methods */
void   cosmos__protocolpool__v1__msg_cancel_continuous_fund__init
                     (Cosmos__Protocolpool__V1__MsgCancelContinuousFund         *message);
size_t cosmos__protocolpool__v1__msg_cancel_continuous_fund__get_packed_size
                     (const Cosmos__Protocolpool__V1__MsgCancelContinuousFund   *message);
size_t cosmos__protocolpool__v1__msg_cancel_continuous_fund__pack
                     (const Cosmos__Protocolpool__V1__MsgCancelContinuousFund   *message,
                      uint8_t             *out);
size_t cosmos__protocolpool__v1__msg_cancel_continuous_fund__pack_to_buffer
                     (const Cosmos__Protocolpool__V1__MsgCancelContinuousFund   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Protocolpool__V1__MsgCancelContinuousFund *
       cosmos__protocolpool__v1__msg_cancel_continuous_fund__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__protocolpool__v1__msg_cancel_continuous_fund__free_unpacked
                     (Cosmos__Protocolpool__V1__MsgCancelContinuousFund *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__Protocolpool__V1__MsgCancelContinuousFundResponse methods */
void   cosmos__protocolpool__v1__msg_cancel_continuous_fund_response__init
                     (Cosmos__Protocolpool__V1__MsgCancelContinuousFundResponse         *message);
size_t cosmos__protocolpool__v1__msg_cancel_continuous_fund_response__get_packed_size
                     (const Cosmos__Protocolpool__V1__MsgCancelContinuousFundResponse   *message);
size_t cosmos__protocolpool__v1__msg_cancel_continuous_fund_response__pack
                     (const Cosmos__Protocolpool__V1__MsgCancelContinuousFundResponse   *message,
                      uint8_t             *out);
size_t cosmos__protocolpool__v1__msg_cancel_continuous_fund_response__pack_to_buffer
                     (const Cosmos__Protocolpool__V1__MsgCancelContinuousFundResponse   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Protocolpool__V1__MsgCancelContinuousFundResponse *
       cosmos__protocolpool__v1__msg_cancel_continuous_fund_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__protocolpool__v1__msg_cancel_continuous_fund_response__free_unpacked
                     (Cosmos__Protocolpool__V1__MsgCancelContinuousFundResponse *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__Protocolpool__V1__MsgUpdateParams methods */
void   cosmos__protocolpool__v1__msg_update_params__init
                     (Cosmos__Protocolpool__V1__MsgUpdateParams         *message);
size_t cosmos__protocolpool__v1__msg_update_params__get_packed_size
                     (const Cosmos__Protocolpool__V1__MsgUpdateParams   *message);
size_t cosmos__protocolpool__v1__msg_update_params__pack
                     (const Cosmos__Protocolpool__V1__MsgUpdateParams   *message,
                      uint8_t             *out);
size_t cosmos__protocolpool__v1__msg_update_params__pack_to_buffer
                     (const Cosmos__Protocolpool__V1__MsgUpdateParams   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Protocolpool__V1__MsgUpdateParams *
       cosmos__protocolpool__v1__msg_update_params__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__protocolpool__v1__msg_update_params__free_unpacked
                     (Cosmos__Protocolpool__V1__MsgUpdateParams *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__Protocolpool__V1__MsgUpdateParamsResponse methods */
void   cosmos__protocolpool__v1__msg_update_params_response__init
                     (Cosmos__Protocolpool__V1__MsgUpdateParamsResponse         *message);
size_t cosmos__protocolpool__v1__msg_update_params_response__get_packed_size
                     (const Cosmos__Protocolpool__V1__MsgUpdateParamsResponse   *message);
size_t cosmos__protocolpool__v1__msg_update_params_response__pack
                     (const Cosmos__Protocolpool__V1__MsgUpdateParamsResponse   *message,
                      uint8_t             *out);
size_t cosmos__protocolpool__v1__msg_update_params_response__pack_to_buffer
                     (const Cosmos__Protocolpool__V1__MsgUpdateParamsResponse   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Protocolpool__V1__MsgUpdateParamsResponse *
       cosmos__protocolpool__v1__msg_update_params_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__protocolpool__v1__msg_update_params_response__free_unpacked
                     (Cosmos__Protocolpool__V1__MsgUpdateParamsResponse *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Cosmos__Protocolpool__V1__MsgFundCommunityPool_Closure)
                 (const Cosmos__Protocolpool__V1__MsgFundCommunityPool *message,
                  void *closure_data);
typedef void (*Cosmos__Protocolpool__V1__MsgFundCommunityPoolResponse_Closure)
                 (const Cosmos__Protocolpool__V1__MsgFundCommunityPoolResponse *message,
                  void *closure_data);
typedef void (*Cosmos__Protocolpool__V1__MsgCommunityPoolSpend_Closure)
                 (const Cosmos__Protocolpool__V1__MsgCommunityPoolSpend *message,
                  void *closure_data);
typedef void (*Cosmos__Protocolpool__V1__MsgCommunityPoolSpendResponse_Closure)
                 (const Cosmos__Protocolpool__V1__MsgCommunityPoolSpendResponse *message,
                  void *closure_data);
typedef void (*Cosmos__Protocolpool__V1__MsgCreateContinuousFund_Closure)
                 (const Cosmos__Protocolpool__V1__MsgCreateContinuousFund *message,
                  void *closure_data);
typedef void (*Cosmos__Protocolpool__V1__MsgCreateContinuousFundResponse_Closure)
                 (const Cosmos__Protocolpool__V1__MsgCreateContinuousFundResponse *message,
                  void *closure_data);
typedef void (*Cosmos__Protocolpool__V1__MsgCancelContinuousFund_Closure)
                 (const Cosmos__Protocolpool__V1__MsgCancelContinuousFund *message,
                  void *closure_data);
typedef void (*Cosmos__Protocolpool__V1__MsgCancelContinuousFundResponse_Closure)
                 (const Cosmos__Protocolpool__V1__MsgCancelContinuousFundResponse *message,
                  void *closure_data);
typedef void (*Cosmos__Protocolpool__V1__MsgUpdateParams_Closure)
                 (const Cosmos__Protocolpool__V1__MsgUpdateParams *message,
                  void *closure_data);
typedef void (*Cosmos__Protocolpool__V1__MsgUpdateParamsResponse_Closure)
                 (const Cosmos__Protocolpool__V1__MsgUpdateParamsResponse *message,
                  void *closure_data);

/* --- services --- */

typedef struct Cosmos__Protocolpool__V1__Msg_Service Cosmos__Protocolpool__V1__Msg_Service;
struct Cosmos__Protocolpool__V1__Msg_Service
{
  ProtobufCService base;
  void (*fund_community_pool)(Cosmos__Protocolpool__V1__Msg_Service *service,
                              const Cosmos__Protocolpool__V1__MsgFundCommunityPool *input,
                              Cosmos__Protocolpool__V1__MsgFundCommunityPoolResponse_Closure closure,
                              void *closure_data);
  void (*community_pool_spend)(Cosmos__Protocolpool__V1__Msg_Service *service,
                               const Cosmos__Protocolpool__V1__MsgCommunityPoolSpend *input,
                               Cosmos__Protocolpool__V1__MsgCommunityPoolSpendResponse_Closure closure,
                               void *closure_data);
  void (*create_continuous_fund)(Cosmos__Protocolpool__V1__Msg_Service *service,
                                 const Cosmos__Protocolpool__V1__MsgCreateContinuousFund *input,
                                 Cosmos__Protocolpool__V1__MsgCreateContinuousFundResponse_Closure closure,
                                 void *closure_data);
  void (*cancel_continuous_fund)(Cosmos__Protocolpool__V1__Msg_Service *service,
                                 const Cosmos__Protocolpool__V1__MsgCancelContinuousFund *input,
                                 Cosmos__Protocolpool__V1__MsgCancelContinuousFundResponse_Closure closure,
                                 void *closure_data);
  void (*update_params)(Cosmos__Protocolpool__V1__Msg_Service *service,
                        const Cosmos__Protocolpool__V1__MsgUpdateParams *input,
                        Cosmos__Protocolpool__V1__MsgUpdateParamsResponse_Closure closure,
                        void *closure_data);
};
typedef void (*Cosmos__Protocolpool__V1__Msg_ServiceDestroy)(Cosmos__Protocolpool__V1__Msg_Service *);
void cosmos__protocolpool__v1__msg__init (Cosmos__Protocolpool__V1__Msg_Service *service,
                                          Cosmos__Protocolpool__V1__Msg_ServiceDestroy destroy);
#define COSMOS__PROTOCOLPOOL__V1__MSG__BASE_INIT \
    { &cosmos__protocolpool__v1__msg__descriptor, protobuf_c_service_invoke_internal, NULL }
#define COSMOS__PROTOCOLPOOL__V1__MSG__INIT(function_prefix__) \
    { COSMOS__PROTOCOLPOOL__V1__MSG__BASE_INIT,\
      function_prefix__ ## fund_community_pool,\
      function_prefix__ ## community_pool_spend,\
      function_prefix__ ## create_continuous_fund,\
      function_prefix__ ## cancel_continuous_fund,\
      function_prefix__ ## update_params  }
void cosmos__protocolpool__v1__msg__fund_community_pool(ProtobufCService *service,
                                                        const Cosmos__Protocolpool__V1__MsgFundCommunityPool *input,
                                                        Cosmos__Protocolpool__V1__MsgFundCommunityPoolResponse_Closure closure,
                                                        void *closure_data);
void cosmos__protocolpool__v1__msg__community_pool_spend(ProtobufCService *service,
                                                         const Cosmos__Protocolpool__V1__MsgCommunityPoolSpend *input,
                                                         Cosmos__Protocolpool__V1__MsgCommunityPoolSpendResponse_Closure closure,
                                                         void *closure_data);
void cosmos__protocolpool__v1__msg__create_continuous_fund(ProtobufCService *service,
                                                           const Cosmos__Protocolpool__V1__MsgCreateContinuousFund *input,
                                                           Cosmos__Protocolpool__V1__MsgCreateContinuousFundResponse_Closure closure,
                                                           void *closure_data);
void cosmos__protocolpool__v1__msg__cancel_continuous_fund(ProtobufCService *service,
                                                           const Cosmos__Protocolpool__V1__MsgCancelContinuousFund *input,
                                                           Cosmos__Protocolpool__V1__MsgCancelContinuousFundResponse_Closure closure,
                                                           void *closure_data);
void cosmos__protocolpool__v1__msg__update_params(ProtobufCService *service,
                                                  const Cosmos__Protocolpool__V1__MsgUpdateParams *input,
                                                  Cosmos__Protocolpool__V1__MsgUpdateParamsResponse_Closure closure,
                                                  void *closure_data);

/* --- descriptors --- */

extern const ProtobufCMessageDescriptor cosmos__protocolpool__v1__msg_fund_community_pool__descriptor;
extern const ProtobufCMessageDescriptor cosmos__protocolpool__v1__msg_fund_community_pool_response__descriptor;
extern const ProtobufCMessageDescriptor cosmos__protocolpool__v1__msg_community_pool_spend__descriptor;
extern const ProtobufCMessageDescriptor cosmos__protocolpool__v1__msg_community_pool_spend_response__descriptor;
extern const ProtobufCMessageDescriptor cosmos__protocolpool__v1__msg_create_continuous_fund__descriptor;
extern const ProtobufCMessageDescriptor cosmos__protocolpool__v1__msg_create_continuous_fund_response__descriptor;
extern const ProtobufCMessageDescriptor cosmos__protocolpool__v1__msg_cancel_continuous_fund__descriptor;
extern const ProtobufCMessageDescriptor cosmos__protocolpool__v1__msg_cancel_continuous_fund_response__descriptor;
extern const ProtobufCMessageDescriptor cosmos__protocolpool__v1__msg_update_params__descriptor;
extern const ProtobufCMessageDescriptor cosmos__protocolpool__v1__msg_update_params_response__descriptor;
extern const ProtobufCServiceDescriptor cosmos__protocolpool__v1__msg__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_cosmos_2fprotocolpool_2fv1_2ftx_2eproto__INCLUDED */
