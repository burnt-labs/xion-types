/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: cosmos/benchmark/module/v1/module.proto */

#ifndef PROTOBUF_C_cosmos_2fbenchmark_2fmodule_2fv1_2fmodule_2eproto__INCLUDED
#define PROTOBUF_C_cosmos_2fbenchmark_2fmodule_2fv1_2fmodule_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protobuf-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1005002 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protobuf-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protobuf-c.
#endif

#include "cosmos/app/v1alpha1/module.pb-c.h"

typedef struct Cosmos__Benchmark__Module__V1__Module Cosmos__Benchmark__Module__V1__Module;
typedef struct Cosmos__Benchmark__Module__V1__GeneratorParams Cosmos__Benchmark__Module__V1__GeneratorParams;


/* --- enums --- */


/* --- messages --- */

/*
 * Module is the config object of the benchmark module.
 */
struct  Cosmos__Benchmark__Module__V1__Module
{
  ProtobufCMessage base;
  Cosmos__Benchmark__Module__V1__GeneratorParams *genesis_params;
};
#define COSMOS__BENCHMARK__MODULE__V1__MODULE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__benchmark__module__v1__module__descriptor) \
, NULL }


/*
 * GenesisParams defines the genesis parameters for the benchmark module.
 */
struct  Cosmos__Benchmark__Module__V1__GeneratorParams
{
  ProtobufCMessage base;
  /*
   * seed is the seed for the random number generator.
   */
  uint64_t seed;
  /*
   * bucket_count is the number of store keys to uniformly distribute genesis_count keys across.
   */
  uint64_t bucket_count;
  /*
   * key_mean is the mean size (in normal distribution) of keys in each bucket.
   */
  uint64_t key_mean;
  /*
   * key_std_dev is the standard deviation of key sizes in each bucket.
   */
  uint64_t key_std_dev;
  /*
   * value_mean is the mean size (in normal distribution) of values in each bucket.
   */
  uint64_t value_mean;
  /*
   * value_std_dev is the standard deviation of value sizes in each bucket.
   */
  uint64_t value_std_dev;
  /*
   * genesis_count is the number of keys to insert in the store, distributed across all buckets.
   */
  uint64_t genesis_count;
  /*
   * insert_weight is the weight of insert operations.
   */
  float insert_weight;
  /*
   * update_weight is the weight of update operations.
   */
  float update_weight;
  /*
   * get_weight is the weight of get operations.
   */
  float get_weight;
  /*
   * delete_weight is the weight of delete operations.
   */
  float delete_weight;
};
#define COSMOS__BENCHMARK__MODULE__V1__GENERATOR_PARAMS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__benchmark__module__v1__generator_params__descriptor) \
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }


/* Cosmos__Benchmark__Module__V1__Module methods */
void   cosmos__benchmark__module__v1__module__init
                     (Cosmos__Benchmark__Module__V1__Module         *message);
size_t cosmos__benchmark__module__v1__module__get_packed_size
                     (const Cosmos__Benchmark__Module__V1__Module   *message);
size_t cosmos__benchmark__module__v1__module__pack
                     (const Cosmos__Benchmark__Module__V1__Module   *message,
                      uint8_t             *out);
size_t cosmos__benchmark__module__v1__module__pack_to_buffer
                     (const Cosmos__Benchmark__Module__V1__Module   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Benchmark__Module__V1__Module *
       cosmos__benchmark__module__v1__module__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__benchmark__module__v1__module__free_unpacked
                     (Cosmos__Benchmark__Module__V1__Module *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__Benchmark__Module__V1__GeneratorParams methods */
void   cosmos__benchmark__module__v1__generator_params__init
                     (Cosmos__Benchmark__Module__V1__GeneratorParams         *message);
size_t cosmos__benchmark__module__v1__generator_params__get_packed_size
                     (const Cosmos__Benchmark__Module__V1__GeneratorParams   *message);
size_t cosmos__benchmark__module__v1__generator_params__pack
                     (const Cosmos__Benchmark__Module__V1__GeneratorParams   *message,
                      uint8_t             *out);
size_t cosmos__benchmark__module__v1__generator_params__pack_to_buffer
                     (const Cosmos__Benchmark__Module__V1__GeneratorParams   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Benchmark__Module__V1__GeneratorParams *
       cosmos__benchmark__module__v1__generator_params__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__benchmark__module__v1__generator_params__free_unpacked
                     (Cosmos__Benchmark__Module__V1__GeneratorParams *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Cosmos__Benchmark__Module__V1__Module_Closure)
                 (const Cosmos__Benchmark__Module__V1__Module *message,
                  void *closure_data);
typedef void (*Cosmos__Benchmark__Module__V1__GeneratorParams_Closure)
                 (const Cosmos__Benchmark__Module__V1__GeneratorParams *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor cosmos__benchmark__module__v1__module__descriptor;
extern const ProtobufCMessageDescriptor cosmos__benchmark__module__v1__generator_params__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_cosmos_2fbenchmark_2fmodule_2fv1_2fmodule_2eproto__INCLUDED */
