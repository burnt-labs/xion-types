/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: cosmos/counter/v1/query.proto */

#ifndef PROTOBUF_C_cosmos_2fcounter_2fv1_2fquery_2eproto__INCLUDED
#define PROTOBUF_C_cosmos_2fcounter_2fv1_2fquery_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protobuf-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1005002 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protobuf-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protobuf-c.
#endif


typedef struct Cosmos__Counter__V1__QueryGetCountRequest Cosmos__Counter__V1__QueryGetCountRequest;
typedef struct Cosmos__Counter__V1__QueryGetCountResponse Cosmos__Counter__V1__QueryGetCountResponse;


/* --- enums --- */


/* --- messages --- */

/*
 * QueryGetCountRequest defines the request type for querying x/mock count.
 */
struct  Cosmos__Counter__V1__QueryGetCountRequest
{
  ProtobufCMessage base;
};
#define COSMOS__COUNTER__V1__QUERY_GET_COUNT_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__counter__v1__query_get_count_request__descriptor) \
 }


/*
 * QueryGetCountResponse defines the response type for querying x/mock count.
 */
struct  Cosmos__Counter__V1__QueryGetCountResponse
{
  ProtobufCMessage base;
  int64_t total_count;
};
#define COSMOS__COUNTER__V1__QUERY_GET_COUNT_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__counter__v1__query_get_count_response__descriptor) \
, 0 }


/* Cosmos__Counter__V1__QueryGetCountRequest methods */
void   cosmos__counter__v1__query_get_count_request__init
                     (Cosmos__Counter__V1__QueryGetCountRequest         *message);
size_t cosmos__counter__v1__query_get_count_request__get_packed_size
                     (const Cosmos__Counter__V1__QueryGetCountRequest   *message);
size_t cosmos__counter__v1__query_get_count_request__pack
                     (const Cosmos__Counter__V1__QueryGetCountRequest   *message,
                      uint8_t             *out);
size_t cosmos__counter__v1__query_get_count_request__pack_to_buffer
                     (const Cosmos__Counter__V1__QueryGetCountRequest   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Counter__V1__QueryGetCountRequest *
       cosmos__counter__v1__query_get_count_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__counter__v1__query_get_count_request__free_unpacked
                     (Cosmos__Counter__V1__QueryGetCountRequest *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__Counter__V1__QueryGetCountResponse methods */
void   cosmos__counter__v1__query_get_count_response__init
                     (Cosmos__Counter__V1__QueryGetCountResponse         *message);
size_t cosmos__counter__v1__query_get_count_response__get_packed_size
                     (const Cosmos__Counter__V1__QueryGetCountResponse   *message);
size_t cosmos__counter__v1__query_get_count_response__pack
                     (const Cosmos__Counter__V1__QueryGetCountResponse   *message,
                      uint8_t             *out);
size_t cosmos__counter__v1__query_get_count_response__pack_to_buffer
                     (const Cosmos__Counter__V1__QueryGetCountResponse   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Counter__V1__QueryGetCountResponse *
       cosmos__counter__v1__query_get_count_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__counter__v1__query_get_count_response__free_unpacked
                     (Cosmos__Counter__V1__QueryGetCountResponse *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Cosmos__Counter__V1__QueryGetCountRequest_Closure)
                 (const Cosmos__Counter__V1__QueryGetCountRequest *message,
                  void *closure_data);
typedef void (*Cosmos__Counter__V1__QueryGetCountResponse_Closure)
                 (const Cosmos__Counter__V1__QueryGetCountResponse *message,
                  void *closure_data);

/* --- services --- */

typedef struct Cosmos__Counter__V1__Query_Service Cosmos__Counter__V1__Query_Service;
struct Cosmos__Counter__V1__Query_Service
{
  ProtobufCService base;
  void (*get_count)(Cosmos__Counter__V1__Query_Service *service,
                    const Cosmos__Counter__V1__QueryGetCountRequest *input,
                    Cosmos__Counter__V1__QueryGetCountResponse_Closure closure,
                    void *closure_data);
};
typedef void (*Cosmos__Counter__V1__Query_ServiceDestroy)(Cosmos__Counter__V1__Query_Service *);
void cosmos__counter__v1__query__init (Cosmos__Counter__V1__Query_Service *service,
                                       Cosmos__Counter__V1__Query_ServiceDestroy destroy);
#define COSMOS__COUNTER__V1__QUERY__BASE_INIT \
    { &cosmos__counter__v1__query__descriptor, protobuf_c_service_invoke_internal, NULL }
#define COSMOS__COUNTER__V1__QUERY__INIT(function_prefix__) \
    { COSMOS__COUNTER__V1__QUERY__BASE_INIT,\
      function_prefix__ ## get_count  }
void cosmos__counter__v1__query__get_count(ProtobufCService *service,
                                           const Cosmos__Counter__V1__QueryGetCountRequest *input,
                                           Cosmos__Counter__V1__QueryGetCountResponse_Closure closure,
                                           void *closure_data);

/* --- descriptors --- */

extern const ProtobufCMessageDescriptor cosmos__counter__v1__query_get_count_request__descriptor;
extern const ProtobufCMessageDescriptor cosmos__counter__v1__query_get_count_response__descriptor;
extern const ProtobufCServiceDescriptor cosmos__counter__v1__query__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_cosmos_2fcounter_2fv1_2fquery_2eproto__INCLUDED */
