/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: cosmos/counter/v1/tx.proto */

#ifndef PROTOBUF_C_cosmos_2fcounter_2fv1_2ftx_2eproto__INCLUDED
#define PROTOBUF_C_cosmos_2fcounter_2fv1_2ftx_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protobuf-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1005002 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protobuf-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protobuf-c.
#endif

#include "cosmos_proto/cosmos.pb-c.h"
#include "cosmos/msg/v1/msg.pb-c.h"
#include "amino/amino.pb-c.h"

typedef struct Cosmos__Counter__V1__MsgIncreaseCounter Cosmos__Counter__V1__MsgIncreaseCounter;
typedef struct Cosmos__Counter__V1__MsgIncreaseCountResponse Cosmos__Counter__V1__MsgIncreaseCountResponse;


/* --- enums --- */


/* --- messages --- */

/*
 * MsgIncreaseCounter defines a count Msg service counter.
 */
struct  Cosmos__Counter__V1__MsgIncreaseCounter
{
  ProtobufCMessage base;
  /*
   * signer is the address that controls the module (defaults to x/gov unless overwritten).
   */
  char *signer;
  /*
   * count is the number of times to increment the counter.
   */
  int64_t count;
};
#define COSMOS__COUNTER__V1__MSG_INCREASE_COUNTER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__counter__v1__msg_increase_counter__descriptor) \
, (char *)protobuf_c_empty_string, 0 }


/*
 * MsgIncreaseCountResponse is the Msg/Counter response type.
 */
struct  Cosmos__Counter__V1__MsgIncreaseCountResponse
{
  ProtobufCMessage base;
  /*
   * new_count is the number of times the counter was incremented.
   */
  int64_t new_count;
};
#define COSMOS__COUNTER__V1__MSG_INCREASE_COUNT_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__counter__v1__msg_increase_count_response__descriptor) \
, 0 }


/* Cosmos__Counter__V1__MsgIncreaseCounter methods */
void   cosmos__counter__v1__msg_increase_counter__init
                     (Cosmos__Counter__V1__MsgIncreaseCounter         *message);
size_t cosmos__counter__v1__msg_increase_counter__get_packed_size
                     (const Cosmos__Counter__V1__MsgIncreaseCounter   *message);
size_t cosmos__counter__v1__msg_increase_counter__pack
                     (const Cosmos__Counter__V1__MsgIncreaseCounter   *message,
                      uint8_t             *out);
size_t cosmos__counter__v1__msg_increase_counter__pack_to_buffer
                     (const Cosmos__Counter__V1__MsgIncreaseCounter   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Counter__V1__MsgIncreaseCounter *
       cosmos__counter__v1__msg_increase_counter__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__counter__v1__msg_increase_counter__free_unpacked
                     (Cosmos__Counter__V1__MsgIncreaseCounter *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__Counter__V1__MsgIncreaseCountResponse methods */
void   cosmos__counter__v1__msg_increase_count_response__init
                     (Cosmos__Counter__V1__MsgIncreaseCountResponse         *message);
size_t cosmos__counter__v1__msg_increase_count_response__get_packed_size
                     (const Cosmos__Counter__V1__MsgIncreaseCountResponse   *message);
size_t cosmos__counter__v1__msg_increase_count_response__pack
                     (const Cosmos__Counter__V1__MsgIncreaseCountResponse   *message,
                      uint8_t             *out);
size_t cosmos__counter__v1__msg_increase_count_response__pack_to_buffer
                     (const Cosmos__Counter__V1__MsgIncreaseCountResponse   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Counter__V1__MsgIncreaseCountResponse *
       cosmos__counter__v1__msg_increase_count_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__counter__v1__msg_increase_count_response__free_unpacked
                     (Cosmos__Counter__V1__MsgIncreaseCountResponse *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Cosmos__Counter__V1__MsgIncreaseCounter_Closure)
                 (const Cosmos__Counter__V1__MsgIncreaseCounter *message,
                  void *closure_data);
typedef void (*Cosmos__Counter__V1__MsgIncreaseCountResponse_Closure)
                 (const Cosmos__Counter__V1__MsgIncreaseCountResponse *message,
                  void *closure_data);

/* --- services --- */

typedef struct Cosmos__Counter__V1__Msg_Service Cosmos__Counter__V1__Msg_Service;
struct Cosmos__Counter__V1__Msg_Service
{
  ProtobufCService base;
  void (*increase_count)(Cosmos__Counter__V1__Msg_Service *service,
                         const Cosmos__Counter__V1__MsgIncreaseCounter *input,
                         Cosmos__Counter__V1__MsgIncreaseCountResponse_Closure closure,
                         void *closure_data);
};
typedef void (*Cosmos__Counter__V1__Msg_ServiceDestroy)(Cosmos__Counter__V1__Msg_Service *);
void cosmos__counter__v1__msg__init (Cosmos__Counter__V1__Msg_Service *service,
                                     Cosmos__Counter__V1__Msg_ServiceDestroy destroy);
#define COSMOS__COUNTER__V1__MSG__BASE_INIT \
    { &cosmos__counter__v1__msg__descriptor, protobuf_c_service_invoke_internal, NULL }
#define COSMOS__COUNTER__V1__MSG__INIT(function_prefix__) \
    { COSMOS__COUNTER__V1__MSG__BASE_INIT,\
      function_prefix__ ## increase_count  }
void cosmos__counter__v1__msg__increase_count(ProtobufCService *service,
                                              const Cosmos__Counter__V1__MsgIncreaseCounter *input,
                                              Cosmos__Counter__V1__MsgIncreaseCountResponse_Closure closure,
                                              void *closure_data);

/* --- descriptors --- */

extern const ProtobufCMessageDescriptor cosmos__counter__v1__msg_increase_counter__descriptor;
extern const ProtobufCMessageDescriptor cosmos__counter__v1__msg_increase_count_response__descriptor;
extern const ProtobufCServiceDescriptor cosmos__counter__v1__msg__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_cosmos_2fcounter_2fv1_2ftx_2eproto__INCLUDED */
