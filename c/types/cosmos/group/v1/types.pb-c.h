/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: cosmos/group/v1/types.proto */

#ifndef PROTOBUF_C_cosmos_2fgroup_2fv1_2ftypes_2eproto__INCLUDED
#define PROTOBUF_C_cosmos_2fgroup_2fv1_2ftypes_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protobuf-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1005002 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protobuf-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protobuf-c.
#endif

#include "gogoproto/gogo.pb-c.h"
#include "google/protobuf/duration.pb-c.h"
#include "google/protobuf/timestamp.pb-c.h"
#include "cosmos_proto/cosmos.pb-c.h"
#include "google/protobuf/any.pb-c.h"
#include "amino/amino.pb-c.h"

typedef struct Cosmos__Group__V1__Member Cosmos__Group__V1__Member;
typedef struct Cosmos__Group__V1__MemberRequest Cosmos__Group__V1__MemberRequest;
typedef struct Cosmos__Group__V1__ThresholdDecisionPolicy Cosmos__Group__V1__ThresholdDecisionPolicy;
typedef struct Cosmos__Group__V1__PercentageDecisionPolicy Cosmos__Group__V1__PercentageDecisionPolicy;
typedef struct Cosmos__Group__V1__DecisionPolicyWindows Cosmos__Group__V1__DecisionPolicyWindows;
typedef struct Cosmos__Group__V1__GroupInfo Cosmos__Group__V1__GroupInfo;
typedef struct Cosmos__Group__V1__GroupMember Cosmos__Group__V1__GroupMember;
typedef struct Cosmos__Group__V1__GroupPolicyInfo Cosmos__Group__V1__GroupPolicyInfo;
typedef struct Cosmos__Group__V1__Proposal Cosmos__Group__V1__Proposal;
typedef struct Cosmos__Group__V1__TallyResult Cosmos__Group__V1__TallyResult;
typedef struct Cosmos__Group__V1__Vote Cosmos__Group__V1__Vote;


/* --- enums --- */

/*
 * VoteOption enumerates the valid vote options for a given proposal.
 */
typedef enum _Cosmos__Group__V1__VoteOption {
  /*
   * VOTE_OPTION_UNSPECIFIED defines an unspecified vote option which will
   * return an error.
   */
  COSMOS__GROUP__V1__VOTE_OPTION__VOTE_OPTION_UNSPECIFIED = 0,
  /*
   * VOTE_OPTION_YES defines a yes vote option.
   */
  COSMOS__GROUP__V1__VOTE_OPTION__VOTE_OPTION_YES = 1,
  /*
   * VOTE_OPTION_ABSTAIN defines an abstain vote option.
   */
  COSMOS__GROUP__V1__VOTE_OPTION__VOTE_OPTION_ABSTAIN = 2,
  /*
   * VOTE_OPTION_NO defines a no vote option.
   */
  COSMOS__GROUP__V1__VOTE_OPTION__VOTE_OPTION_NO = 3,
  /*
   * VOTE_OPTION_NO_WITH_VETO defines a no with veto vote option.
   */
  COSMOS__GROUP__V1__VOTE_OPTION__VOTE_OPTION_NO_WITH_VETO = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(COSMOS__GROUP__V1__VOTE_OPTION)
} Cosmos__Group__V1__VoteOption;
/*
 * ProposalStatus defines proposal statuses.
 */
typedef enum _Cosmos__Group__V1__ProposalStatus {
  /*
   * An empty value is invalid and not allowed.
   */
  COSMOS__GROUP__V1__PROPOSAL_STATUS__PROPOSAL_STATUS_UNSPECIFIED = 0,
  /*
   * Initial status of a proposal when submitted.
   */
  COSMOS__GROUP__V1__PROPOSAL_STATUS__PROPOSAL_STATUS_SUBMITTED = 1,
  /*
   * Final status of a proposal when the final tally is done and the outcome
   * passes the group policy's decision policy.
   */
  COSMOS__GROUP__V1__PROPOSAL_STATUS__PROPOSAL_STATUS_ACCEPTED = 2,
  /*
   * Final status of a proposal when the final tally is done and the outcome
   * is rejected by the group policy's decision policy.
   */
  COSMOS__GROUP__V1__PROPOSAL_STATUS__PROPOSAL_STATUS_REJECTED = 3,
  /*
   * Final status of a proposal when the group policy is modified before the
   * final tally.
   */
  COSMOS__GROUP__V1__PROPOSAL_STATUS__PROPOSAL_STATUS_ABORTED = 4,
  /*
   * A proposal can be withdrawn before the voting start time by the owner.
   * When this happens the final status is Withdrawn.
   */
  COSMOS__GROUP__V1__PROPOSAL_STATUS__PROPOSAL_STATUS_WITHDRAWN = 5
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(COSMOS__GROUP__V1__PROPOSAL_STATUS)
} Cosmos__Group__V1__ProposalStatus;
/*
 * ProposalExecutorResult defines types of proposal executor results.
 */
typedef enum _Cosmos__Group__V1__ProposalExecutorResult {
  /*
   * An empty value is not allowed.
   */
  COSMOS__GROUP__V1__PROPOSAL_EXECUTOR_RESULT__PROPOSAL_EXECUTOR_RESULT_UNSPECIFIED = 0,
  /*
   * We have not yet run the executor.
   */
  COSMOS__GROUP__V1__PROPOSAL_EXECUTOR_RESULT__PROPOSAL_EXECUTOR_RESULT_NOT_RUN = 1,
  /*
   * The executor was successful and proposed action updated state.
   */
  COSMOS__GROUP__V1__PROPOSAL_EXECUTOR_RESULT__PROPOSAL_EXECUTOR_RESULT_SUCCESS = 2,
  /*
   * The executor returned an error and proposed action didn't update state.
   */
  COSMOS__GROUP__V1__PROPOSAL_EXECUTOR_RESULT__PROPOSAL_EXECUTOR_RESULT_FAILURE = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(COSMOS__GROUP__V1__PROPOSAL_EXECUTOR_RESULT)
} Cosmos__Group__V1__ProposalExecutorResult;

/* --- messages --- */

/*
 * Member represents a group member with an account address,
 * non-zero weight, metadata and added_at timestamp.
 */
struct  Cosmos__Group__V1__Member
{
  ProtobufCMessage base;
  /*
   * address is the member's account address.
   */
  char *address;
  /*
   * weight is the member's voting weight that should be greater than 0.
   */
  char *weight;
  /*
   * metadata is any arbitrary metadata attached to the member.
   */
  char *metadata;
  /*
   * added_at is a timestamp specifying when a member was added.
   */
  Google__Protobuf__Timestamp *added_at;
};
#define COSMOS__GROUP__V1__MEMBER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__group__v1__member__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, NULL }


/*
 * MemberRequest represents a group member to be used in Msg server requests.
 * Contrary to `Member`, it doesn't have any `added_at` field
 * since this field cannot be set as part of requests.
 */
struct  Cosmos__Group__V1__MemberRequest
{
  ProtobufCMessage base;
  /*
   * address is the member's account address.
   */
  char *address;
  /*
   * weight is the member's voting weight that should be greater than 0.
   */
  char *weight;
  /*
   * metadata is any arbitrary metadata attached to the member.
   */
  char *metadata;
};
#define COSMOS__GROUP__V1__MEMBER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__group__v1__member_request__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


/*
 * ThresholdDecisionPolicy is a decision policy where a proposal passes when it
 * satisfies the two following conditions:
 * 1. The sum of all `YES` voter's weights is greater or equal than the defined
 *    `threshold`.
 * 2. The voting and execution periods of the proposal respect the parameters
 *    given by `windows`.
 */
struct  Cosmos__Group__V1__ThresholdDecisionPolicy
{
  ProtobufCMessage base;
  /*
   * threshold is the minimum weighted sum of `YES` votes that must be met or
   * exceeded for a proposal to succeed.
   */
  char *threshold;
  /*
   * windows defines the different windows for voting and execution.
   */
  Cosmos__Group__V1__DecisionPolicyWindows *windows;
};
#define COSMOS__GROUP__V1__THRESHOLD_DECISION_POLICY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__group__v1__threshold_decision_policy__descriptor) \
, (char *)protobuf_c_empty_string, NULL }


/*
 * PercentageDecisionPolicy is a decision policy where a proposal passes when
 * it satisfies the two following conditions:
 * 1. The percentage of all `YES` voters' weights out of the total group weight
 *    is greater or equal than the given `percentage`.
 * 2. The voting and execution periods of the proposal respect the parameters
 *    given by `windows`.
 */
struct  Cosmos__Group__V1__PercentageDecisionPolicy
{
  ProtobufCMessage base;
  /*
   * percentage is the minimum percentage of the weighted sum of `YES` votes must
   * meet for a proposal to succeed.
   */
  char *percentage;
  /*
   * windows defines the different windows for voting and execution.
   */
  Cosmos__Group__V1__DecisionPolicyWindows *windows;
};
#define COSMOS__GROUP__V1__PERCENTAGE_DECISION_POLICY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__group__v1__percentage_decision_policy__descriptor) \
, (char *)protobuf_c_empty_string, NULL }


/*
 * DecisionPolicyWindows defines the different windows for voting and execution.
 */
struct  Cosmos__Group__V1__DecisionPolicyWindows
{
  ProtobufCMessage base;
  /*
   * voting_period is the duration from submission of a proposal to the end of voting period
   * Within this times votes can be submitted with MsgVote.
   */
  Google__Protobuf__Duration *voting_period;
  /*
   * min_execution_period is the minimum duration after the proposal submission
   * where members can start sending MsgExec. This means that the window for
   * sending a MsgExec transaction is:
   * `[ submission + min_execution_period ; submission + voting_period + max_execution_period]`
   * where max_execution_period is a app-specific config, defined in the keeper.
   * If not set, min_execution_period will default to 0.
   * Please make sure to set a `min_execution_period` that is smaller than
   * `voting_period + max_execution_period`, or else the above execution window
   * is empty, meaning that all proposals created with this decision policy
   * won't be able to be executed.
   */
  Google__Protobuf__Duration *min_execution_period;
};
#define COSMOS__GROUP__V1__DECISION_POLICY_WINDOWS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__group__v1__decision_policy_windows__descriptor) \
, NULL, NULL }


/*
 * GroupInfo represents the high-level on-chain information for a group.
 */
struct  Cosmos__Group__V1__GroupInfo
{
  ProtobufCMessage base;
  /*
   * id is the unique ID of the group.
   */
  uint64_t id;
  /*
   * admin is the account address of the group's admin.
   */
  char *admin;
  /*
   * metadata is any arbitrary metadata to attached to the group.
   * the recommended format of the metadata is to be found here: https://docs.cosmos.network/v0.47/modules/group#group-1
   */
  char *metadata;
  /*
   * version is used to track changes to a group's membership structure that
   * would break existing proposals. Whenever any members weight is changed,
   * or any member is added or removed this version is incremented and will
   * cause proposals based on older versions of this group to fail
   */
  uint64_t version;
  /*
   * total_weight is the sum of the group members' weights.
   */
  char *total_weight;
  /*
   * created_at is a timestamp specifying when a group was created.
   */
  Google__Protobuf__Timestamp *created_at;
};
#define COSMOS__GROUP__V1__GROUP_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__group__v1__group_info__descriptor) \
, 0, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0, (char *)protobuf_c_empty_string, NULL }


/*
 * GroupMember represents the relationship between a group and a member.
 */
struct  Cosmos__Group__V1__GroupMember
{
  ProtobufCMessage base;
  /*
   * group_id is the unique ID of the group.
   */
  uint64_t group_id;
  /*
   * member is the member data.
   */
  Cosmos__Group__V1__Member *member;
};
#define COSMOS__GROUP__V1__GROUP_MEMBER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__group__v1__group_member__descriptor) \
, 0, NULL }


/*
 * GroupPolicyInfo represents the high-level on-chain information for a group policy.
 */
struct  Cosmos__Group__V1__GroupPolicyInfo
{
  ProtobufCMessage base;
  /*
   * address is the account address of group policy.
   */
  char *address;
  /*
   * group_id is the unique ID of the group.
   */
  uint64_t group_id;
  /*
   * admin is the account address of the group admin.
   */
  char *admin;
  /*
   * metadata is any arbitrary metadata attached to the group policy.
   * the recommended format of the metadata is to be found here:
   * https://docs.cosmos.network/v0.47/modules/group#decision-policy-1
   */
  char *metadata;
  /*
   * version is used to track changes to a group's GroupPolicyInfo structure that
   * would create a different result on a running proposal.
   */
  uint64_t version;
  /*
   * decision_policy specifies the group policy's decision policy.
   */
  Google__Protobuf__Any *decision_policy;
  /*
   * created_at is a timestamp specifying when a group policy was created.
   */
  Google__Protobuf__Timestamp *created_at;
};
#define COSMOS__GROUP__V1__GROUP_POLICY_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__group__v1__group_policy_info__descriptor) \
, (char *)protobuf_c_empty_string, 0, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0, NULL, NULL }


/*
 * Proposal defines a group proposal. Any member of a group can submit a proposal
 * for a group policy to decide upon.
 * A proposal consists of a set of `sdk.Msg`s that will be executed if the proposal
 * passes as well as some optional metadata associated with the proposal.
 */
struct  Cosmos__Group__V1__Proposal
{
  ProtobufCMessage base;
  /*
   * id is the unique id of the proposal.
   */
  uint64_t id;
  /*
   * group_policy_address is the account address of group policy.
   */
  char *group_policy_address;
  /*
   * metadata is any arbitrary metadata attached to the proposal.
   * the recommended format of the metadata is to be found here:
   * https://docs.cosmos.network/v0.47/modules/group#proposal-4
   */
  char *metadata;
  /*
   * proposers are the account addresses of the proposers.
   */
  size_t n_proposers;
  char **proposers;
  /*
   * submit_time is a timestamp specifying when a proposal was submitted.
   */
  Google__Protobuf__Timestamp *submit_time;
  /*
   * group_version tracks the version of the group at proposal submission.
   * This field is here for informational purposes only.
   */
  uint64_t group_version;
  /*
   * group_policy_version tracks the version of the group policy at proposal submission.
   * When a decision policy is changed, existing proposals from previous policy
   * versions will become invalid with the `ABORTED` status.
   * This field is here for informational purposes only.
   */
  uint64_t group_policy_version;
  /*
   * status represents the high level position in the life cycle of the proposal. Initial value is Submitted.
   */
  Cosmos__Group__V1__ProposalStatus status;
  /*
   * final_tally_result contains the sums of all weighted votes for this
   * proposal for each vote option. It is empty at submission, and only
   * populated after tallying, at voting period end or at proposal execution,
   * whichever happens first.
   */
  Cosmos__Group__V1__TallyResult *final_tally_result;
  /*
   * voting_period_end is the timestamp before which voting must be done.
   * Unless a successful MsgExec is called before (to execute a proposal whose
   * tally is successful before the voting period ends), tallying will be done
   * at this point, and the `final_tally_result`and `status` fields will be
   * accordingly updated.
   */
  Google__Protobuf__Timestamp *voting_period_end;
  /*
   * executor_result is the final result of the proposal execution. Initial value is NotRun.
   */
  Cosmos__Group__V1__ProposalExecutorResult executor_result;
  /*
   * messages is a list of `sdk.Msg`s that will be executed if the proposal passes.
   */
  size_t n_messages;
  Google__Protobuf__Any **messages;
  /*
   * title is the title of the proposal
   */
  char *title;
  /*
   * summary is a short summary of the proposal
   */
  char *summary;
};
#define COSMOS__GROUP__V1__PROPOSAL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__group__v1__proposal__descriptor) \
, 0, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0,NULL, NULL, 0, 0, COSMOS__GROUP__V1__PROPOSAL_STATUS__PROPOSAL_STATUS_UNSPECIFIED, NULL, NULL, COSMOS__GROUP__V1__PROPOSAL_EXECUTOR_RESULT__PROPOSAL_EXECUTOR_RESULT_UNSPECIFIED, 0,NULL, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


/*
 * TallyResult represents the sum of weighted votes for each vote option.
 */
struct  Cosmos__Group__V1__TallyResult
{
  ProtobufCMessage base;
  /*
   * yes_count is the weighted sum of yes votes.
   */
  char *yes_count;
  /*
   * abstain_count is the weighted sum of abstainers.
   */
  char *abstain_count;
  /*
   * no_count is the weighted sum of no votes.
   */
  char *no_count;
  /*
   * no_with_veto_count is the weighted sum of veto.
   */
  char *no_with_veto_count;
};
#define COSMOS__GROUP__V1__TALLY_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__group__v1__tally_result__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


/*
 * Vote represents a vote for a proposal.string metadata
 */
struct  Cosmos__Group__V1__Vote
{
  ProtobufCMessage base;
  /*
   * proposal is the unique ID of the proposal.
   */
  uint64_t proposal_id;
  /*
   * voter is the account address of the voter.
   */
  char *voter;
  /*
   * option is the voter's choice on the proposal.
   */
  Cosmos__Group__V1__VoteOption option;
  /*
   * metadata is any arbitrary metadata attached to the vote.
   * the recommended format of the metadata is to be found here: https://docs.cosmos.network/v0.47/modules/group#vote-2
   */
  char *metadata;
  /*
   * submit_time is the timestamp when the vote was submitted.
   */
  Google__Protobuf__Timestamp *submit_time;
};
#define COSMOS__GROUP__V1__VOTE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__group__v1__vote__descriptor) \
, 0, (char *)protobuf_c_empty_string, COSMOS__GROUP__V1__VOTE_OPTION__VOTE_OPTION_UNSPECIFIED, (char *)protobuf_c_empty_string, NULL }


/* Cosmos__Group__V1__Member methods */
void   cosmos__group__v1__member__init
                     (Cosmos__Group__V1__Member         *message);
size_t cosmos__group__v1__member__get_packed_size
                     (const Cosmos__Group__V1__Member   *message);
size_t cosmos__group__v1__member__pack
                     (const Cosmos__Group__V1__Member   *message,
                      uint8_t             *out);
size_t cosmos__group__v1__member__pack_to_buffer
                     (const Cosmos__Group__V1__Member   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Group__V1__Member *
       cosmos__group__v1__member__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__group__v1__member__free_unpacked
                     (Cosmos__Group__V1__Member *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__Group__V1__MemberRequest methods */
void   cosmos__group__v1__member_request__init
                     (Cosmos__Group__V1__MemberRequest         *message);
size_t cosmos__group__v1__member_request__get_packed_size
                     (const Cosmos__Group__V1__MemberRequest   *message);
size_t cosmos__group__v1__member_request__pack
                     (const Cosmos__Group__V1__MemberRequest   *message,
                      uint8_t             *out);
size_t cosmos__group__v1__member_request__pack_to_buffer
                     (const Cosmos__Group__V1__MemberRequest   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Group__V1__MemberRequest *
       cosmos__group__v1__member_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__group__v1__member_request__free_unpacked
                     (Cosmos__Group__V1__MemberRequest *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__Group__V1__ThresholdDecisionPolicy methods */
void   cosmos__group__v1__threshold_decision_policy__init
                     (Cosmos__Group__V1__ThresholdDecisionPolicy         *message);
size_t cosmos__group__v1__threshold_decision_policy__get_packed_size
                     (const Cosmos__Group__V1__ThresholdDecisionPolicy   *message);
size_t cosmos__group__v1__threshold_decision_policy__pack
                     (const Cosmos__Group__V1__ThresholdDecisionPolicy   *message,
                      uint8_t             *out);
size_t cosmos__group__v1__threshold_decision_policy__pack_to_buffer
                     (const Cosmos__Group__V1__ThresholdDecisionPolicy   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Group__V1__ThresholdDecisionPolicy *
       cosmos__group__v1__threshold_decision_policy__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__group__v1__threshold_decision_policy__free_unpacked
                     (Cosmos__Group__V1__ThresholdDecisionPolicy *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__Group__V1__PercentageDecisionPolicy methods */
void   cosmos__group__v1__percentage_decision_policy__init
                     (Cosmos__Group__V1__PercentageDecisionPolicy         *message);
size_t cosmos__group__v1__percentage_decision_policy__get_packed_size
                     (const Cosmos__Group__V1__PercentageDecisionPolicy   *message);
size_t cosmos__group__v1__percentage_decision_policy__pack
                     (const Cosmos__Group__V1__PercentageDecisionPolicy   *message,
                      uint8_t             *out);
size_t cosmos__group__v1__percentage_decision_policy__pack_to_buffer
                     (const Cosmos__Group__V1__PercentageDecisionPolicy   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Group__V1__PercentageDecisionPolicy *
       cosmos__group__v1__percentage_decision_policy__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__group__v1__percentage_decision_policy__free_unpacked
                     (Cosmos__Group__V1__PercentageDecisionPolicy *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__Group__V1__DecisionPolicyWindows methods */
void   cosmos__group__v1__decision_policy_windows__init
                     (Cosmos__Group__V1__DecisionPolicyWindows         *message);
size_t cosmos__group__v1__decision_policy_windows__get_packed_size
                     (const Cosmos__Group__V1__DecisionPolicyWindows   *message);
size_t cosmos__group__v1__decision_policy_windows__pack
                     (const Cosmos__Group__V1__DecisionPolicyWindows   *message,
                      uint8_t             *out);
size_t cosmos__group__v1__decision_policy_windows__pack_to_buffer
                     (const Cosmos__Group__V1__DecisionPolicyWindows   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Group__V1__DecisionPolicyWindows *
       cosmos__group__v1__decision_policy_windows__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__group__v1__decision_policy_windows__free_unpacked
                     (Cosmos__Group__V1__DecisionPolicyWindows *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__Group__V1__GroupInfo methods */
void   cosmos__group__v1__group_info__init
                     (Cosmos__Group__V1__GroupInfo         *message);
size_t cosmos__group__v1__group_info__get_packed_size
                     (const Cosmos__Group__V1__GroupInfo   *message);
size_t cosmos__group__v1__group_info__pack
                     (const Cosmos__Group__V1__GroupInfo   *message,
                      uint8_t             *out);
size_t cosmos__group__v1__group_info__pack_to_buffer
                     (const Cosmos__Group__V1__GroupInfo   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Group__V1__GroupInfo *
       cosmos__group__v1__group_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__group__v1__group_info__free_unpacked
                     (Cosmos__Group__V1__GroupInfo *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__Group__V1__GroupMember methods */
void   cosmos__group__v1__group_member__init
                     (Cosmos__Group__V1__GroupMember         *message);
size_t cosmos__group__v1__group_member__get_packed_size
                     (const Cosmos__Group__V1__GroupMember   *message);
size_t cosmos__group__v1__group_member__pack
                     (const Cosmos__Group__V1__GroupMember   *message,
                      uint8_t             *out);
size_t cosmos__group__v1__group_member__pack_to_buffer
                     (const Cosmos__Group__V1__GroupMember   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Group__V1__GroupMember *
       cosmos__group__v1__group_member__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__group__v1__group_member__free_unpacked
                     (Cosmos__Group__V1__GroupMember *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__Group__V1__GroupPolicyInfo methods */
void   cosmos__group__v1__group_policy_info__init
                     (Cosmos__Group__V1__GroupPolicyInfo         *message);
size_t cosmos__group__v1__group_policy_info__get_packed_size
                     (const Cosmos__Group__V1__GroupPolicyInfo   *message);
size_t cosmos__group__v1__group_policy_info__pack
                     (const Cosmos__Group__V1__GroupPolicyInfo   *message,
                      uint8_t             *out);
size_t cosmos__group__v1__group_policy_info__pack_to_buffer
                     (const Cosmos__Group__V1__GroupPolicyInfo   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Group__V1__GroupPolicyInfo *
       cosmos__group__v1__group_policy_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__group__v1__group_policy_info__free_unpacked
                     (Cosmos__Group__V1__GroupPolicyInfo *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__Group__V1__Proposal methods */
void   cosmos__group__v1__proposal__init
                     (Cosmos__Group__V1__Proposal         *message);
size_t cosmos__group__v1__proposal__get_packed_size
                     (const Cosmos__Group__V1__Proposal   *message);
size_t cosmos__group__v1__proposal__pack
                     (const Cosmos__Group__V1__Proposal   *message,
                      uint8_t             *out);
size_t cosmos__group__v1__proposal__pack_to_buffer
                     (const Cosmos__Group__V1__Proposal   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Group__V1__Proposal *
       cosmos__group__v1__proposal__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__group__v1__proposal__free_unpacked
                     (Cosmos__Group__V1__Proposal *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__Group__V1__TallyResult methods */
void   cosmos__group__v1__tally_result__init
                     (Cosmos__Group__V1__TallyResult         *message);
size_t cosmos__group__v1__tally_result__get_packed_size
                     (const Cosmos__Group__V1__TallyResult   *message);
size_t cosmos__group__v1__tally_result__pack
                     (const Cosmos__Group__V1__TallyResult   *message,
                      uint8_t             *out);
size_t cosmos__group__v1__tally_result__pack_to_buffer
                     (const Cosmos__Group__V1__TallyResult   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Group__V1__TallyResult *
       cosmos__group__v1__tally_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__group__v1__tally_result__free_unpacked
                     (Cosmos__Group__V1__TallyResult *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__Group__V1__Vote methods */
void   cosmos__group__v1__vote__init
                     (Cosmos__Group__V1__Vote         *message);
size_t cosmos__group__v1__vote__get_packed_size
                     (const Cosmos__Group__V1__Vote   *message);
size_t cosmos__group__v1__vote__pack
                     (const Cosmos__Group__V1__Vote   *message,
                      uint8_t             *out);
size_t cosmos__group__v1__vote__pack_to_buffer
                     (const Cosmos__Group__V1__Vote   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Group__V1__Vote *
       cosmos__group__v1__vote__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__group__v1__vote__free_unpacked
                     (Cosmos__Group__V1__Vote *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Cosmos__Group__V1__Member_Closure)
                 (const Cosmos__Group__V1__Member *message,
                  void *closure_data);
typedef void (*Cosmos__Group__V1__MemberRequest_Closure)
                 (const Cosmos__Group__V1__MemberRequest *message,
                  void *closure_data);
typedef void (*Cosmos__Group__V1__ThresholdDecisionPolicy_Closure)
                 (const Cosmos__Group__V1__ThresholdDecisionPolicy *message,
                  void *closure_data);
typedef void (*Cosmos__Group__V1__PercentageDecisionPolicy_Closure)
                 (const Cosmos__Group__V1__PercentageDecisionPolicy *message,
                  void *closure_data);
typedef void (*Cosmos__Group__V1__DecisionPolicyWindows_Closure)
                 (const Cosmos__Group__V1__DecisionPolicyWindows *message,
                  void *closure_data);
typedef void (*Cosmos__Group__V1__GroupInfo_Closure)
                 (const Cosmos__Group__V1__GroupInfo *message,
                  void *closure_data);
typedef void (*Cosmos__Group__V1__GroupMember_Closure)
                 (const Cosmos__Group__V1__GroupMember *message,
                  void *closure_data);
typedef void (*Cosmos__Group__V1__GroupPolicyInfo_Closure)
                 (const Cosmos__Group__V1__GroupPolicyInfo *message,
                  void *closure_data);
typedef void (*Cosmos__Group__V1__Proposal_Closure)
                 (const Cosmos__Group__V1__Proposal *message,
                  void *closure_data);
typedef void (*Cosmos__Group__V1__TallyResult_Closure)
                 (const Cosmos__Group__V1__TallyResult *message,
                  void *closure_data);
typedef void (*Cosmos__Group__V1__Vote_Closure)
                 (const Cosmos__Group__V1__Vote *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    cosmos__group__v1__vote_option__descriptor;
extern const ProtobufCEnumDescriptor    cosmos__group__v1__proposal_status__descriptor;
extern const ProtobufCEnumDescriptor    cosmos__group__v1__proposal_executor_result__descriptor;
extern const ProtobufCMessageDescriptor cosmos__group__v1__member__descriptor;
extern const ProtobufCMessageDescriptor cosmos__group__v1__member_request__descriptor;
extern const ProtobufCMessageDescriptor cosmos__group__v1__threshold_decision_policy__descriptor;
extern const ProtobufCMessageDescriptor cosmos__group__v1__percentage_decision_policy__descriptor;
extern const ProtobufCMessageDescriptor cosmos__group__v1__decision_policy_windows__descriptor;
extern const ProtobufCMessageDescriptor cosmos__group__v1__group_info__descriptor;
extern const ProtobufCMessageDescriptor cosmos__group__v1__group_member__descriptor;
extern const ProtobufCMessageDescriptor cosmos__group__v1__group_policy_info__descriptor;
extern const ProtobufCMessageDescriptor cosmos__group__v1__proposal__descriptor;
extern const ProtobufCMessageDescriptor cosmos__group__v1__tally_result__descriptor;
extern const ProtobufCMessageDescriptor cosmos__group__v1__vote__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_cosmos_2fgroup_2fv1_2ftypes_2eproto__INCLUDED */
