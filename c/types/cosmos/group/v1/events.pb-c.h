/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: cosmos/group/v1/events.proto */

#ifndef PROTOBUF_C_cosmos_2fgroup_2fv1_2fevents_2eproto__INCLUDED
#define PROTOBUF_C_cosmos_2fgroup_2fv1_2fevents_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protobuf-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1005002 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protobuf-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protobuf-c.
#endif

#include "cosmos_proto/cosmos.pb-c.h"
#include "cosmos/group/v1/types.pb-c.h"

typedef struct Cosmos__Group__V1__EventCreateGroup Cosmos__Group__V1__EventCreateGroup;
typedef struct Cosmos__Group__V1__EventUpdateGroup Cosmos__Group__V1__EventUpdateGroup;
typedef struct Cosmos__Group__V1__EventCreateGroupPolicy Cosmos__Group__V1__EventCreateGroupPolicy;
typedef struct Cosmos__Group__V1__EventUpdateGroupPolicy Cosmos__Group__V1__EventUpdateGroupPolicy;
typedef struct Cosmos__Group__V1__EventSubmitProposal Cosmos__Group__V1__EventSubmitProposal;
typedef struct Cosmos__Group__V1__EventWithdrawProposal Cosmos__Group__V1__EventWithdrawProposal;
typedef struct Cosmos__Group__V1__EventVote Cosmos__Group__V1__EventVote;
typedef struct Cosmos__Group__V1__EventExec Cosmos__Group__V1__EventExec;
typedef struct Cosmos__Group__V1__EventLeaveGroup Cosmos__Group__V1__EventLeaveGroup;
typedef struct Cosmos__Group__V1__EventProposalPruned Cosmos__Group__V1__EventProposalPruned;
typedef struct Cosmos__Group__V1__EventTallyError Cosmos__Group__V1__EventTallyError;


/* --- enums --- */


/* --- messages --- */

/*
 * EventCreateGroup is an event emitted when a group is created.
 */
struct  Cosmos__Group__V1__EventCreateGroup
{
  ProtobufCMessage base;
  /*
   * group_id is the unique ID of the group.
   */
  uint64_t group_id;
};
#define COSMOS__GROUP__V1__EVENT_CREATE_GROUP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__group__v1__event_create_group__descriptor) \
, 0 }


/*
 * EventUpdateGroup is an event emitted when a group is updated.
 */
struct  Cosmos__Group__V1__EventUpdateGroup
{
  ProtobufCMessage base;
  /*
   * group_id is the unique ID of the group.
   */
  uint64_t group_id;
};
#define COSMOS__GROUP__V1__EVENT_UPDATE_GROUP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__group__v1__event_update_group__descriptor) \
, 0 }


/*
 * EventCreateGroupPolicy is an event emitted when a group policy is created.
 */
struct  Cosmos__Group__V1__EventCreateGroupPolicy
{
  ProtobufCMessage base;
  /*
   * address is the account address of the group policy.
   */
  char *address;
};
#define COSMOS__GROUP__V1__EVENT_CREATE_GROUP_POLICY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__group__v1__event_create_group_policy__descriptor) \
, (char *)protobuf_c_empty_string }


/*
 * EventUpdateGroupPolicy is an event emitted when a group policy is updated.
 */
struct  Cosmos__Group__V1__EventUpdateGroupPolicy
{
  ProtobufCMessage base;
  /*
   * address is the account address of the group policy.
   */
  char *address;
};
#define COSMOS__GROUP__V1__EVENT_UPDATE_GROUP_POLICY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__group__v1__event_update_group_policy__descriptor) \
, (char *)protobuf_c_empty_string }


/*
 * EventSubmitProposal is an event emitted when a proposal is created.
 */
struct  Cosmos__Group__V1__EventSubmitProposal
{
  ProtobufCMessage base;
  /*
   * proposal_id is the unique ID of the proposal.
   */
  uint64_t proposal_id;
};
#define COSMOS__GROUP__V1__EVENT_SUBMIT_PROPOSAL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__group__v1__event_submit_proposal__descriptor) \
, 0 }


/*
 * EventWithdrawProposal is an event emitted when a proposal is withdrawn.
 */
struct  Cosmos__Group__V1__EventWithdrawProposal
{
  ProtobufCMessage base;
  /*
   * proposal_id is the unique ID of the proposal.
   */
  uint64_t proposal_id;
};
#define COSMOS__GROUP__V1__EVENT_WITHDRAW_PROPOSAL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__group__v1__event_withdraw_proposal__descriptor) \
, 0 }


/*
 * EventVote is an event emitted when a voter votes on a proposal.
 */
struct  Cosmos__Group__V1__EventVote
{
  ProtobufCMessage base;
  /*
   * proposal_id is the unique ID of the proposal.
   */
  uint64_t proposal_id;
};
#define COSMOS__GROUP__V1__EVENT_VOTE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__group__v1__event_vote__descriptor) \
, 0 }


/*
 * EventExec is an event emitted when a proposal is executed.
 */
struct  Cosmos__Group__V1__EventExec
{
  ProtobufCMessage base;
  /*
   * proposal_id is the unique ID of the proposal.
   */
  uint64_t proposal_id;
  /*
   * result is the proposal execution result.
   */
  Cosmos__Group__V1__ProposalExecutorResult result;
  /*
   * logs contains error logs in case the execution result is FAILURE.
   */
  char *logs;
};
#define COSMOS__GROUP__V1__EVENT_EXEC__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__group__v1__event_exec__descriptor) \
, 0, COSMOS__GROUP__V1__PROPOSAL_EXECUTOR_RESULT__PROPOSAL_EXECUTOR_RESULT_UNSPECIFIED, (char *)protobuf_c_empty_string }


/*
 * EventLeaveGroup is an event emitted when group member leaves the group.
 */
struct  Cosmos__Group__V1__EventLeaveGroup
{
  ProtobufCMessage base;
  /*
   * group_id is the unique ID of the group.
   */
  uint64_t group_id;
  /*
   * address is the account address of the group member.
   */
  char *address;
};
#define COSMOS__GROUP__V1__EVENT_LEAVE_GROUP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__group__v1__event_leave_group__descriptor) \
, 0, (char *)protobuf_c_empty_string }


/*
 * EventProposalPruned is an event emitted when a proposal is pruned.
 */
struct  Cosmos__Group__V1__EventProposalPruned
{
  ProtobufCMessage base;
  /*
   * proposal_id is the unique ID of the proposal.
   */
  uint64_t proposal_id;
  /*
   * status is the proposal status (UNSPECIFIED, SUBMITTED, ACCEPTED, REJECTED, ABORTED, WITHDRAWN).
   */
  Cosmos__Group__V1__ProposalStatus status;
  /*
   * tally_result is the proposal tally result (when applicable).
   */
  Cosmos__Group__V1__TallyResult *tally_result;
};
#define COSMOS__GROUP__V1__EVENT_PROPOSAL_PRUNED__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__group__v1__event_proposal_pruned__descriptor) \
, 0, COSMOS__GROUP__V1__PROPOSAL_STATUS__PROPOSAL_STATUS_UNSPECIFIED, NULL }


/*
 * EventTallyError is an event emitted when a proposal tally failed with an error.
 */
struct  Cosmos__Group__V1__EventTallyError
{
  ProtobufCMessage base;
  /*
   * proposal_id is the unique ID of the proposal.
   */
  uint64_t proposal_id;
  /*
   * error_message is the raw error output
   */
  char *error_message;
};
#define COSMOS__GROUP__V1__EVENT_TALLY_ERROR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__group__v1__event_tally_error__descriptor) \
, 0, (char *)protobuf_c_empty_string }


/* Cosmos__Group__V1__EventCreateGroup methods */
void   cosmos__group__v1__event_create_group__init
                     (Cosmos__Group__V1__EventCreateGroup         *message);
size_t cosmos__group__v1__event_create_group__get_packed_size
                     (const Cosmos__Group__V1__EventCreateGroup   *message);
size_t cosmos__group__v1__event_create_group__pack
                     (const Cosmos__Group__V1__EventCreateGroup   *message,
                      uint8_t             *out);
size_t cosmos__group__v1__event_create_group__pack_to_buffer
                     (const Cosmos__Group__V1__EventCreateGroup   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Group__V1__EventCreateGroup *
       cosmos__group__v1__event_create_group__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__group__v1__event_create_group__free_unpacked
                     (Cosmos__Group__V1__EventCreateGroup *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__Group__V1__EventUpdateGroup methods */
void   cosmos__group__v1__event_update_group__init
                     (Cosmos__Group__V1__EventUpdateGroup         *message);
size_t cosmos__group__v1__event_update_group__get_packed_size
                     (const Cosmos__Group__V1__EventUpdateGroup   *message);
size_t cosmos__group__v1__event_update_group__pack
                     (const Cosmos__Group__V1__EventUpdateGroup   *message,
                      uint8_t             *out);
size_t cosmos__group__v1__event_update_group__pack_to_buffer
                     (const Cosmos__Group__V1__EventUpdateGroup   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Group__V1__EventUpdateGroup *
       cosmos__group__v1__event_update_group__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__group__v1__event_update_group__free_unpacked
                     (Cosmos__Group__V1__EventUpdateGroup *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__Group__V1__EventCreateGroupPolicy methods */
void   cosmos__group__v1__event_create_group_policy__init
                     (Cosmos__Group__V1__EventCreateGroupPolicy         *message);
size_t cosmos__group__v1__event_create_group_policy__get_packed_size
                     (const Cosmos__Group__V1__EventCreateGroupPolicy   *message);
size_t cosmos__group__v1__event_create_group_policy__pack
                     (const Cosmos__Group__V1__EventCreateGroupPolicy   *message,
                      uint8_t             *out);
size_t cosmos__group__v1__event_create_group_policy__pack_to_buffer
                     (const Cosmos__Group__V1__EventCreateGroupPolicy   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Group__V1__EventCreateGroupPolicy *
       cosmos__group__v1__event_create_group_policy__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__group__v1__event_create_group_policy__free_unpacked
                     (Cosmos__Group__V1__EventCreateGroupPolicy *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__Group__V1__EventUpdateGroupPolicy methods */
void   cosmos__group__v1__event_update_group_policy__init
                     (Cosmos__Group__V1__EventUpdateGroupPolicy         *message);
size_t cosmos__group__v1__event_update_group_policy__get_packed_size
                     (const Cosmos__Group__V1__EventUpdateGroupPolicy   *message);
size_t cosmos__group__v1__event_update_group_policy__pack
                     (const Cosmos__Group__V1__EventUpdateGroupPolicy   *message,
                      uint8_t             *out);
size_t cosmos__group__v1__event_update_group_policy__pack_to_buffer
                     (const Cosmos__Group__V1__EventUpdateGroupPolicy   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Group__V1__EventUpdateGroupPolicy *
       cosmos__group__v1__event_update_group_policy__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__group__v1__event_update_group_policy__free_unpacked
                     (Cosmos__Group__V1__EventUpdateGroupPolicy *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__Group__V1__EventSubmitProposal methods */
void   cosmos__group__v1__event_submit_proposal__init
                     (Cosmos__Group__V1__EventSubmitProposal         *message);
size_t cosmos__group__v1__event_submit_proposal__get_packed_size
                     (const Cosmos__Group__V1__EventSubmitProposal   *message);
size_t cosmos__group__v1__event_submit_proposal__pack
                     (const Cosmos__Group__V1__EventSubmitProposal   *message,
                      uint8_t             *out);
size_t cosmos__group__v1__event_submit_proposal__pack_to_buffer
                     (const Cosmos__Group__V1__EventSubmitProposal   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Group__V1__EventSubmitProposal *
       cosmos__group__v1__event_submit_proposal__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__group__v1__event_submit_proposal__free_unpacked
                     (Cosmos__Group__V1__EventSubmitProposal *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__Group__V1__EventWithdrawProposal methods */
void   cosmos__group__v1__event_withdraw_proposal__init
                     (Cosmos__Group__V1__EventWithdrawProposal         *message);
size_t cosmos__group__v1__event_withdraw_proposal__get_packed_size
                     (const Cosmos__Group__V1__EventWithdrawProposal   *message);
size_t cosmos__group__v1__event_withdraw_proposal__pack
                     (const Cosmos__Group__V1__EventWithdrawProposal   *message,
                      uint8_t             *out);
size_t cosmos__group__v1__event_withdraw_proposal__pack_to_buffer
                     (const Cosmos__Group__V1__EventWithdrawProposal   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Group__V1__EventWithdrawProposal *
       cosmos__group__v1__event_withdraw_proposal__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__group__v1__event_withdraw_proposal__free_unpacked
                     (Cosmos__Group__V1__EventWithdrawProposal *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__Group__V1__EventVote methods */
void   cosmos__group__v1__event_vote__init
                     (Cosmos__Group__V1__EventVote         *message);
size_t cosmos__group__v1__event_vote__get_packed_size
                     (const Cosmos__Group__V1__EventVote   *message);
size_t cosmos__group__v1__event_vote__pack
                     (const Cosmos__Group__V1__EventVote   *message,
                      uint8_t             *out);
size_t cosmos__group__v1__event_vote__pack_to_buffer
                     (const Cosmos__Group__V1__EventVote   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Group__V1__EventVote *
       cosmos__group__v1__event_vote__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__group__v1__event_vote__free_unpacked
                     (Cosmos__Group__V1__EventVote *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__Group__V1__EventExec methods */
void   cosmos__group__v1__event_exec__init
                     (Cosmos__Group__V1__EventExec         *message);
size_t cosmos__group__v1__event_exec__get_packed_size
                     (const Cosmos__Group__V1__EventExec   *message);
size_t cosmos__group__v1__event_exec__pack
                     (const Cosmos__Group__V1__EventExec   *message,
                      uint8_t             *out);
size_t cosmos__group__v1__event_exec__pack_to_buffer
                     (const Cosmos__Group__V1__EventExec   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Group__V1__EventExec *
       cosmos__group__v1__event_exec__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__group__v1__event_exec__free_unpacked
                     (Cosmos__Group__V1__EventExec *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__Group__V1__EventLeaveGroup methods */
void   cosmos__group__v1__event_leave_group__init
                     (Cosmos__Group__V1__EventLeaveGroup         *message);
size_t cosmos__group__v1__event_leave_group__get_packed_size
                     (const Cosmos__Group__V1__EventLeaveGroup   *message);
size_t cosmos__group__v1__event_leave_group__pack
                     (const Cosmos__Group__V1__EventLeaveGroup   *message,
                      uint8_t             *out);
size_t cosmos__group__v1__event_leave_group__pack_to_buffer
                     (const Cosmos__Group__V1__EventLeaveGroup   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Group__V1__EventLeaveGroup *
       cosmos__group__v1__event_leave_group__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__group__v1__event_leave_group__free_unpacked
                     (Cosmos__Group__V1__EventLeaveGroup *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__Group__V1__EventProposalPruned methods */
void   cosmos__group__v1__event_proposal_pruned__init
                     (Cosmos__Group__V1__EventProposalPruned         *message);
size_t cosmos__group__v1__event_proposal_pruned__get_packed_size
                     (const Cosmos__Group__V1__EventProposalPruned   *message);
size_t cosmos__group__v1__event_proposal_pruned__pack
                     (const Cosmos__Group__V1__EventProposalPruned   *message,
                      uint8_t             *out);
size_t cosmos__group__v1__event_proposal_pruned__pack_to_buffer
                     (const Cosmos__Group__V1__EventProposalPruned   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Group__V1__EventProposalPruned *
       cosmos__group__v1__event_proposal_pruned__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__group__v1__event_proposal_pruned__free_unpacked
                     (Cosmos__Group__V1__EventProposalPruned *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__Group__V1__EventTallyError methods */
void   cosmos__group__v1__event_tally_error__init
                     (Cosmos__Group__V1__EventTallyError         *message);
size_t cosmos__group__v1__event_tally_error__get_packed_size
                     (const Cosmos__Group__V1__EventTallyError   *message);
size_t cosmos__group__v1__event_tally_error__pack
                     (const Cosmos__Group__V1__EventTallyError   *message,
                      uint8_t             *out);
size_t cosmos__group__v1__event_tally_error__pack_to_buffer
                     (const Cosmos__Group__V1__EventTallyError   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Group__V1__EventTallyError *
       cosmos__group__v1__event_tally_error__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__group__v1__event_tally_error__free_unpacked
                     (Cosmos__Group__V1__EventTallyError *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Cosmos__Group__V1__EventCreateGroup_Closure)
                 (const Cosmos__Group__V1__EventCreateGroup *message,
                  void *closure_data);
typedef void (*Cosmos__Group__V1__EventUpdateGroup_Closure)
                 (const Cosmos__Group__V1__EventUpdateGroup *message,
                  void *closure_data);
typedef void (*Cosmos__Group__V1__EventCreateGroupPolicy_Closure)
                 (const Cosmos__Group__V1__EventCreateGroupPolicy *message,
                  void *closure_data);
typedef void (*Cosmos__Group__V1__EventUpdateGroupPolicy_Closure)
                 (const Cosmos__Group__V1__EventUpdateGroupPolicy *message,
                  void *closure_data);
typedef void (*Cosmos__Group__V1__EventSubmitProposal_Closure)
                 (const Cosmos__Group__V1__EventSubmitProposal *message,
                  void *closure_data);
typedef void (*Cosmos__Group__V1__EventWithdrawProposal_Closure)
                 (const Cosmos__Group__V1__EventWithdrawProposal *message,
                  void *closure_data);
typedef void (*Cosmos__Group__V1__EventVote_Closure)
                 (const Cosmos__Group__V1__EventVote *message,
                  void *closure_data);
typedef void (*Cosmos__Group__V1__EventExec_Closure)
                 (const Cosmos__Group__V1__EventExec *message,
                  void *closure_data);
typedef void (*Cosmos__Group__V1__EventLeaveGroup_Closure)
                 (const Cosmos__Group__V1__EventLeaveGroup *message,
                  void *closure_data);
typedef void (*Cosmos__Group__V1__EventProposalPruned_Closure)
                 (const Cosmos__Group__V1__EventProposalPruned *message,
                  void *closure_data);
typedef void (*Cosmos__Group__V1__EventTallyError_Closure)
                 (const Cosmos__Group__V1__EventTallyError *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor cosmos__group__v1__event_create_group__descriptor;
extern const ProtobufCMessageDescriptor cosmos__group__v1__event_update_group__descriptor;
extern const ProtobufCMessageDescriptor cosmos__group__v1__event_create_group_policy__descriptor;
extern const ProtobufCMessageDescriptor cosmos__group__v1__event_update_group_policy__descriptor;
extern const ProtobufCMessageDescriptor cosmos__group__v1__event_submit_proposal__descriptor;
extern const ProtobufCMessageDescriptor cosmos__group__v1__event_withdraw_proposal__descriptor;
extern const ProtobufCMessageDescriptor cosmos__group__v1__event_vote__descriptor;
extern const ProtobufCMessageDescriptor cosmos__group__v1__event_exec__descriptor;
extern const ProtobufCMessageDescriptor cosmos__group__v1__event_leave_group__descriptor;
extern const ProtobufCMessageDescriptor cosmos__group__v1__event_proposal_pruned__descriptor;
extern const ProtobufCMessageDescriptor cosmos__group__v1__event_tally_error__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_cosmos_2fgroup_2fv1_2fevents_2eproto__INCLUDED */
