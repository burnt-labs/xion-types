/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: cosmos/group/v1/tx.proto */

#ifndef PROTOBUF_C_cosmos_2fgroup_2fv1_2ftx_2eproto__INCLUDED
#define PROTOBUF_C_cosmos_2fgroup_2fv1_2ftx_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protobuf-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1005002 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protobuf-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protobuf-c.
#endif

#include "gogoproto/gogo.pb-c.h"
#include "cosmos_proto/cosmos.pb-c.h"
#include "google/protobuf/any.pb-c.h"
#include "cosmos/group/v1/types.pb-c.h"
#include "cosmos/msg/v1/msg.pb-c.h"
#include "amino/amino.pb-c.h"

typedef struct Cosmos__Group__V1__MsgCreateGroup Cosmos__Group__V1__MsgCreateGroup;
typedef struct Cosmos__Group__V1__MsgCreateGroupResponse Cosmos__Group__V1__MsgCreateGroupResponse;
typedef struct Cosmos__Group__V1__MsgUpdateGroupMembers Cosmos__Group__V1__MsgUpdateGroupMembers;
typedef struct Cosmos__Group__V1__MsgUpdateGroupMembersResponse Cosmos__Group__V1__MsgUpdateGroupMembersResponse;
typedef struct Cosmos__Group__V1__MsgUpdateGroupAdmin Cosmos__Group__V1__MsgUpdateGroupAdmin;
typedef struct Cosmos__Group__V1__MsgUpdateGroupAdminResponse Cosmos__Group__V1__MsgUpdateGroupAdminResponse;
typedef struct Cosmos__Group__V1__MsgUpdateGroupMetadata Cosmos__Group__V1__MsgUpdateGroupMetadata;
typedef struct Cosmos__Group__V1__MsgUpdateGroupMetadataResponse Cosmos__Group__V1__MsgUpdateGroupMetadataResponse;
typedef struct Cosmos__Group__V1__MsgCreateGroupPolicy Cosmos__Group__V1__MsgCreateGroupPolicy;
typedef struct Cosmos__Group__V1__MsgCreateGroupPolicyResponse Cosmos__Group__V1__MsgCreateGroupPolicyResponse;
typedef struct Cosmos__Group__V1__MsgUpdateGroupPolicyAdmin Cosmos__Group__V1__MsgUpdateGroupPolicyAdmin;
typedef struct Cosmos__Group__V1__MsgUpdateGroupPolicyAdminResponse Cosmos__Group__V1__MsgUpdateGroupPolicyAdminResponse;
typedef struct Cosmos__Group__V1__MsgCreateGroupWithPolicy Cosmos__Group__V1__MsgCreateGroupWithPolicy;
typedef struct Cosmos__Group__V1__MsgCreateGroupWithPolicyResponse Cosmos__Group__V1__MsgCreateGroupWithPolicyResponse;
typedef struct Cosmos__Group__V1__MsgUpdateGroupPolicyDecisionPolicy Cosmos__Group__V1__MsgUpdateGroupPolicyDecisionPolicy;
typedef struct Cosmos__Group__V1__MsgUpdateGroupPolicyDecisionPolicyResponse Cosmos__Group__V1__MsgUpdateGroupPolicyDecisionPolicyResponse;
typedef struct Cosmos__Group__V1__MsgUpdateGroupPolicyMetadata Cosmos__Group__V1__MsgUpdateGroupPolicyMetadata;
typedef struct Cosmos__Group__V1__MsgUpdateGroupPolicyMetadataResponse Cosmos__Group__V1__MsgUpdateGroupPolicyMetadataResponse;
typedef struct Cosmos__Group__V1__MsgSubmitProposal Cosmos__Group__V1__MsgSubmitProposal;
typedef struct Cosmos__Group__V1__MsgSubmitProposalResponse Cosmos__Group__V1__MsgSubmitProposalResponse;
typedef struct Cosmos__Group__V1__MsgWithdrawProposal Cosmos__Group__V1__MsgWithdrawProposal;
typedef struct Cosmos__Group__V1__MsgWithdrawProposalResponse Cosmos__Group__V1__MsgWithdrawProposalResponse;
typedef struct Cosmos__Group__V1__MsgVote Cosmos__Group__V1__MsgVote;
typedef struct Cosmos__Group__V1__MsgVoteResponse Cosmos__Group__V1__MsgVoteResponse;
typedef struct Cosmos__Group__V1__MsgExec Cosmos__Group__V1__MsgExec;
typedef struct Cosmos__Group__V1__MsgExecResponse Cosmos__Group__V1__MsgExecResponse;
typedef struct Cosmos__Group__V1__MsgLeaveGroup Cosmos__Group__V1__MsgLeaveGroup;
typedef struct Cosmos__Group__V1__MsgLeaveGroupResponse Cosmos__Group__V1__MsgLeaveGroupResponse;


/* --- enums --- */

/*
 * Exec defines modes of execution of a proposal on creation or on new vote.
 */
typedef enum _Cosmos__Group__V1__Exec {
  /*
   * An empty value means that there should be a separate
   * MsgExec request for the proposal to execute.
   */
  COSMOS__GROUP__V1__EXEC__EXEC_UNSPECIFIED = 0,
  /*
   * Try to execute the proposal immediately.
   * If the proposal is not allowed per the DecisionPolicy,
   * the proposal will still be open and could
   * be executed at a later point.
   */
  COSMOS__GROUP__V1__EXEC__EXEC_TRY = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(COSMOS__GROUP__V1__EXEC)
} Cosmos__Group__V1__Exec;

/* --- messages --- */

/*
 * MsgCreateGroup is the Msg/CreateGroup request type.
 */
struct  Cosmos__Group__V1__MsgCreateGroup
{
  ProtobufCMessage base;
  /*
   * admin is the account address of the group admin.
   */
  char *admin;
  /*
   * members defines the group members.
   */
  size_t n_members;
  Cosmos__Group__V1__MemberRequest **members;
  /*
   * metadata is any arbitrary metadata to attached to the group.
   */
  char *metadata;
};
#define COSMOS__GROUP__V1__MSG_CREATE_GROUP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__group__v1__msg_create_group__descriptor) \
, (char *)protobuf_c_empty_string, 0,NULL, (char *)protobuf_c_empty_string }


/*
 * MsgCreateGroupResponse is the Msg/CreateGroup response type.
 */
struct  Cosmos__Group__V1__MsgCreateGroupResponse
{
  ProtobufCMessage base;
  /*
   * group_id is the unique ID of the newly created group.
   */
  uint64_t group_id;
};
#define COSMOS__GROUP__V1__MSG_CREATE_GROUP_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__group__v1__msg_create_group_response__descriptor) \
, 0 }


/*
 * MsgUpdateGroupMembers is the Msg/UpdateGroupMembers request type.
 */
struct  Cosmos__Group__V1__MsgUpdateGroupMembers
{
  ProtobufCMessage base;
  /*
   * admin is the account address of the group admin.
   */
  char *admin;
  /*
   * group_id is the unique ID of the group.
   */
  uint64_t group_id;
  /*
   * member_updates is the list of members to update,
   * set weight to 0 to remove a member.
   */
  size_t n_member_updates;
  Cosmos__Group__V1__MemberRequest **member_updates;
};
#define COSMOS__GROUP__V1__MSG_UPDATE_GROUP_MEMBERS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__group__v1__msg_update_group_members__descriptor) \
, (char *)protobuf_c_empty_string, 0, 0,NULL }


/*
 * MsgUpdateGroupMembersResponse is the Msg/UpdateGroupMembers response type.
 */
struct  Cosmos__Group__V1__MsgUpdateGroupMembersResponse
{
  ProtobufCMessage base;
};
#define COSMOS__GROUP__V1__MSG_UPDATE_GROUP_MEMBERS_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__group__v1__msg_update_group_members_response__descriptor) \
 }


/*
 * MsgUpdateGroupAdmin is the Msg/UpdateGroupAdmin request type.
 */
struct  Cosmos__Group__V1__MsgUpdateGroupAdmin
{
  ProtobufCMessage base;
  /*
   * admin is the current account address of the group admin.
   */
  char *admin;
  /*
   * group_id is the unique ID of the group.
   */
  uint64_t group_id;
  /*
   * new_admin is the group new admin account address.
   */
  char *new_admin;
};
#define COSMOS__GROUP__V1__MSG_UPDATE_GROUP_ADMIN__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__group__v1__msg_update_group_admin__descriptor) \
, (char *)protobuf_c_empty_string, 0, (char *)protobuf_c_empty_string }


/*
 * MsgUpdateGroupAdminResponse is the Msg/UpdateGroupAdmin response type.
 */
struct  Cosmos__Group__V1__MsgUpdateGroupAdminResponse
{
  ProtobufCMessage base;
};
#define COSMOS__GROUP__V1__MSG_UPDATE_GROUP_ADMIN_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__group__v1__msg_update_group_admin_response__descriptor) \
 }


/*
 * MsgUpdateGroupMetadata is the Msg/UpdateGroupMetadata request type.
 */
struct  Cosmos__Group__V1__MsgUpdateGroupMetadata
{
  ProtobufCMessage base;
  /*
   * admin is the account address of the group admin.
   */
  char *admin;
  /*
   * group_id is the unique ID of the group.
   */
  uint64_t group_id;
  /*
   * metadata is the updated group's metadata.
   */
  char *metadata;
};
#define COSMOS__GROUP__V1__MSG_UPDATE_GROUP_METADATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__group__v1__msg_update_group_metadata__descriptor) \
, (char *)protobuf_c_empty_string, 0, (char *)protobuf_c_empty_string }


/*
 * MsgUpdateGroupMetadataResponse is the Msg/UpdateGroupMetadata response type.
 */
struct  Cosmos__Group__V1__MsgUpdateGroupMetadataResponse
{
  ProtobufCMessage base;
};
#define COSMOS__GROUP__V1__MSG_UPDATE_GROUP_METADATA_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__group__v1__msg_update_group_metadata_response__descriptor) \
 }


/*
 * MsgCreateGroupPolicy is the Msg/CreateGroupPolicy request type.
 */
struct  Cosmos__Group__V1__MsgCreateGroupPolicy
{
  ProtobufCMessage base;
  /*
   * admin is the account address of the group admin.
   */
  char *admin;
  /*
   * group_id is the unique ID of the group.
   */
  uint64_t group_id;
  /*
   * metadata is any arbitrary metadata attached to the group policy.
   */
  char *metadata;
  /*
   * decision_policy specifies the group policy's decision policy.
   */
  Google__Protobuf__Any *decision_policy;
};
#define COSMOS__GROUP__V1__MSG_CREATE_GROUP_POLICY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__group__v1__msg_create_group_policy__descriptor) \
, (char *)protobuf_c_empty_string, 0, (char *)protobuf_c_empty_string, NULL }


/*
 * MsgCreateGroupPolicyResponse is the Msg/CreateGroupPolicy response type.
 */
struct  Cosmos__Group__V1__MsgCreateGroupPolicyResponse
{
  ProtobufCMessage base;
  /*
   * address is the account address of the newly created group policy.
   */
  char *address;
};
#define COSMOS__GROUP__V1__MSG_CREATE_GROUP_POLICY_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__group__v1__msg_create_group_policy_response__descriptor) \
, (char *)protobuf_c_empty_string }


/*
 * MsgUpdateGroupPolicyAdmin is the Msg/UpdateGroupPolicyAdmin request type.
 */
struct  Cosmos__Group__V1__MsgUpdateGroupPolicyAdmin
{
  ProtobufCMessage base;
  /*
   * admin is the account address of the group admin.
   */
  char *admin;
  /*
   * group_policy_address is the account address of the group policy.
   */
  char *group_policy_address;
  /*
   * new_admin is the new group policy admin.
   */
  char *new_admin;
};
#define COSMOS__GROUP__V1__MSG_UPDATE_GROUP_POLICY_ADMIN__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__group__v1__msg_update_group_policy_admin__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


/*
 * MsgUpdateGroupPolicyAdminResponse is the Msg/UpdateGroupPolicyAdmin response type.
 */
struct  Cosmos__Group__V1__MsgUpdateGroupPolicyAdminResponse
{
  ProtobufCMessage base;
};
#define COSMOS__GROUP__V1__MSG_UPDATE_GROUP_POLICY_ADMIN_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__group__v1__msg_update_group_policy_admin_response__descriptor) \
 }


/*
 * MsgCreateGroupWithPolicy is the Msg/CreateGroupWithPolicy request type.
 */
struct  Cosmos__Group__V1__MsgCreateGroupWithPolicy
{
  ProtobufCMessage base;
  /*
   * admin is the account address of the group and group policy admin.
   */
  char *admin;
  /*
   * members defines the group members.
   */
  size_t n_members;
  Cosmos__Group__V1__MemberRequest **members;
  /*
   * group_metadata is any arbitrary metadata attached to the group.
   */
  char *group_metadata;
  /*
   * group_policy_metadata is any arbitrary metadata attached to the group policy.
   */
  char *group_policy_metadata;
  /*
   * group_policy_as_admin is a boolean field, if set to true, the group policy account address will be used as group
   * and group policy admin.
   */
  protobuf_c_boolean group_policy_as_admin;
  /*
   * decision_policy specifies the group policy's decision policy.
   */
  Google__Protobuf__Any *decision_policy;
};
#define COSMOS__GROUP__V1__MSG_CREATE_GROUP_WITH_POLICY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__group__v1__msg_create_group_with_policy__descriptor) \
, (char *)protobuf_c_empty_string, 0,NULL, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0, NULL }


/*
 * MsgCreateGroupWithPolicyResponse is the Msg/CreateGroupWithPolicy response type.
 */
struct  Cosmos__Group__V1__MsgCreateGroupWithPolicyResponse
{
  ProtobufCMessage base;
  /*
   * group_id is the unique ID of the newly created group with policy.
   */
  uint64_t group_id;
  /*
   * group_policy_address is the account address of the newly created group policy.
   */
  char *group_policy_address;
};
#define COSMOS__GROUP__V1__MSG_CREATE_GROUP_WITH_POLICY_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__group__v1__msg_create_group_with_policy_response__descriptor) \
, 0, (char *)protobuf_c_empty_string }


/*
 * MsgUpdateGroupPolicyDecisionPolicy is the Msg/UpdateGroupPolicyDecisionPolicy request type.
 */
struct  Cosmos__Group__V1__MsgUpdateGroupPolicyDecisionPolicy
{
  ProtobufCMessage base;
  /*
   * admin is the account address of the group admin.
   */
  char *admin;
  /*
   * group_policy_address is the account address of group policy.
   */
  char *group_policy_address;
  /*
   * decision_policy is the updated group policy's decision policy.
   */
  Google__Protobuf__Any *decision_policy;
};
#define COSMOS__GROUP__V1__MSG_UPDATE_GROUP_POLICY_DECISION_POLICY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__group__v1__msg_update_group_policy_decision_policy__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, NULL }


/*
 * MsgUpdateGroupPolicyDecisionPolicyResponse is the Msg/UpdateGroupPolicyDecisionPolicy response type.
 */
struct  Cosmos__Group__V1__MsgUpdateGroupPolicyDecisionPolicyResponse
{
  ProtobufCMessage base;
};
#define COSMOS__GROUP__V1__MSG_UPDATE_GROUP_POLICY_DECISION_POLICY_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__group__v1__msg_update_group_policy_decision_policy_response__descriptor) \
 }


/*
 * MsgUpdateGroupPolicyMetadata is the Msg/UpdateGroupPolicyMetadata request type.
 */
struct  Cosmos__Group__V1__MsgUpdateGroupPolicyMetadata
{
  ProtobufCMessage base;
  /*
   * admin is the account address of the group admin.
   */
  char *admin;
  /*
   * group_policy_address is the account address of group policy.
   */
  char *group_policy_address;
  /*
   * metadata is the group policy metadata to be updated.
   */
  char *metadata;
};
#define COSMOS__GROUP__V1__MSG_UPDATE_GROUP_POLICY_METADATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__group__v1__msg_update_group_policy_metadata__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


/*
 * MsgUpdateGroupPolicyMetadataResponse is the Msg/UpdateGroupPolicyMetadata response type.
 */
struct  Cosmos__Group__V1__MsgUpdateGroupPolicyMetadataResponse
{
  ProtobufCMessage base;
};
#define COSMOS__GROUP__V1__MSG_UPDATE_GROUP_POLICY_METADATA_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__group__v1__msg_update_group_policy_metadata_response__descriptor) \
 }


/*
 * MsgSubmitProposal is the Msg/SubmitProposal request type.
 */
struct  Cosmos__Group__V1__MsgSubmitProposal
{
  ProtobufCMessage base;
  /*
   * group_policy_address is the account address of group policy.
   */
  char *group_policy_address;
  /*
   * proposers are the account addresses of the proposers.
   * Proposers signatures will be counted as yes votes.
   */
  size_t n_proposers;
  char **proposers;
  /*
   * metadata is any arbitrary metadata attached to the proposal.
   */
  char *metadata;
  /*
   * messages is a list of `sdk.Msg`s that will be executed if the proposal passes.
   */
  size_t n_messages;
  Google__Protobuf__Any **messages;
  /*
   * exec defines the mode of execution of the proposal,
   * whether it should be executed immediately on creation or not.
   * If so, proposers signatures are considered as Yes votes.
   */
  Cosmos__Group__V1__Exec exec;
  /*
   * title is the title of the proposal.
   */
  char *title;
  /*
   * summary is the summary of the proposal.
   */
  char *summary;
};
#define COSMOS__GROUP__V1__MSG_SUBMIT_PROPOSAL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__group__v1__msg_submit_proposal__descriptor) \
, (char *)protobuf_c_empty_string, 0,NULL, (char *)protobuf_c_empty_string, 0,NULL, COSMOS__GROUP__V1__EXEC__EXEC_UNSPECIFIED, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


/*
 * MsgSubmitProposalResponse is the Msg/SubmitProposal response type.
 */
struct  Cosmos__Group__V1__MsgSubmitProposalResponse
{
  ProtobufCMessage base;
  /*
   * proposal is the unique ID of the proposal.
   */
  uint64_t proposal_id;
};
#define COSMOS__GROUP__V1__MSG_SUBMIT_PROPOSAL_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__group__v1__msg_submit_proposal_response__descriptor) \
, 0 }


/*
 * MsgWithdrawProposal is the Msg/WithdrawProposal request type.
 */
struct  Cosmos__Group__V1__MsgWithdrawProposal
{
  ProtobufCMessage base;
  /*
   * proposal is the unique ID of the proposal.
   */
  uint64_t proposal_id;
  /*
   * address is the admin of the group policy or one of the proposer of the proposal.
   */
  char *address;
};
#define COSMOS__GROUP__V1__MSG_WITHDRAW_PROPOSAL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__group__v1__msg_withdraw_proposal__descriptor) \
, 0, (char *)protobuf_c_empty_string }


/*
 * MsgWithdrawProposalResponse is the Msg/WithdrawProposal response type.
 */
struct  Cosmos__Group__V1__MsgWithdrawProposalResponse
{
  ProtobufCMessage base;
};
#define COSMOS__GROUP__V1__MSG_WITHDRAW_PROPOSAL_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__group__v1__msg_withdraw_proposal_response__descriptor) \
 }


/*
 * MsgVote is the Msg/Vote request type.
 */
struct  Cosmos__Group__V1__MsgVote
{
  ProtobufCMessage base;
  /*
   * proposal is the unique ID of the proposal.
   */
  uint64_t proposal_id;
  /*
   * voter is the voter account address.
   */
  char *voter;
  /*
   * option is the voter's choice on the proposal.
   */
  Cosmos__Group__V1__VoteOption option;
  /*
   * metadata is any arbitrary metadata attached to the vote.
   */
  char *metadata;
  /*
   * exec defines whether the proposal should be executed
   * immediately after voting or not.
   */
  Cosmos__Group__V1__Exec exec;
};
#define COSMOS__GROUP__V1__MSG_VOTE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__group__v1__msg_vote__descriptor) \
, 0, (char *)protobuf_c_empty_string, COSMOS__GROUP__V1__VOTE_OPTION__VOTE_OPTION_UNSPECIFIED, (char *)protobuf_c_empty_string, COSMOS__GROUP__V1__EXEC__EXEC_UNSPECIFIED }


/*
 * MsgVoteResponse is the Msg/Vote response type.
 */
struct  Cosmos__Group__V1__MsgVoteResponse
{
  ProtobufCMessage base;
};
#define COSMOS__GROUP__V1__MSG_VOTE_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__group__v1__msg_vote_response__descriptor) \
 }


/*
 * MsgExec is the Msg/Exec request type.
 */
struct  Cosmos__Group__V1__MsgExec
{
  ProtobufCMessage base;
  /*
   * proposal is the unique ID of the proposal.
   */
  uint64_t proposal_id;
  /*
   * executor is the account address used to execute the proposal.
   */
  char *executor;
};
#define COSMOS__GROUP__V1__MSG_EXEC__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__group__v1__msg_exec__descriptor) \
, 0, (char *)protobuf_c_empty_string }


/*
 * MsgExecResponse is the Msg/Exec request type.
 */
struct  Cosmos__Group__V1__MsgExecResponse
{
  ProtobufCMessage base;
  /*
   * result is the final result of the proposal execution.
   */
  Cosmos__Group__V1__ProposalExecutorResult result;
};
#define COSMOS__GROUP__V1__MSG_EXEC_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__group__v1__msg_exec_response__descriptor) \
, COSMOS__GROUP__V1__PROPOSAL_EXECUTOR_RESULT__PROPOSAL_EXECUTOR_RESULT_UNSPECIFIED }


/*
 * MsgLeaveGroup is the Msg/LeaveGroup request type.
 */
struct  Cosmos__Group__V1__MsgLeaveGroup
{
  ProtobufCMessage base;
  /*
   * address is the account address of the group member.
   */
  char *address;
  /*
   * group_id is the unique ID of the group.
   */
  uint64_t group_id;
};
#define COSMOS__GROUP__V1__MSG_LEAVE_GROUP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__group__v1__msg_leave_group__descriptor) \
, (char *)protobuf_c_empty_string, 0 }


/*
 * MsgLeaveGroupResponse is the Msg/LeaveGroup response type.
 */
struct  Cosmos__Group__V1__MsgLeaveGroupResponse
{
  ProtobufCMessage base;
};
#define COSMOS__GROUP__V1__MSG_LEAVE_GROUP_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__group__v1__msg_leave_group_response__descriptor) \
 }


/* Cosmos__Group__V1__MsgCreateGroup methods */
void   cosmos__group__v1__msg_create_group__init
                     (Cosmos__Group__V1__MsgCreateGroup         *message);
size_t cosmos__group__v1__msg_create_group__get_packed_size
                     (const Cosmos__Group__V1__MsgCreateGroup   *message);
size_t cosmos__group__v1__msg_create_group__pack
                     (const Cosmos__Group__V1__MsgCreateGroup   *message,
                      uint8_t             *out);
size_t cosmos__group__v1__msg_create_group__pack_to_buffer
                     (const Cosmos__Group__V1__MsgCreateGroup   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Group__V1__MsgCreateGroup *
       cosmos__group__v1__msg_create_group__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__group__v1__msg_create_group__free_unpacked
                     (Cosmos__Group__V1__MsgCreateGroup *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__Group__V1__MsgCreateGroupResponse methods */
void   cosmos__group__v1__msg_create_group_response__init
                     (Cosmos__Group__V1__MsgCreateGroupResponse         *message);
size_t cosmos__group__v1__msg_create_group_response__get_packed_size
                     (const Cosmos__Group__V1__MsgCreateGroupResponse   *message);
size_t cosmos__group__v1__msg_create_group_response__pack
                     (const Cosmos__Group__V1__MsgCreateGroupResponse   *message,
                      uint8_t             *out);
size_t cosmos__group__v1__msg_create_group_response__pack_to_buffer
                     (const Cosmos__Group__V1__MsgCreateGroupResponse   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Group__V1__MsgCreateGroupResponse *
       cosmos__group__v1__msg_create_group_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__group__v1__msg_create_group_response__free_unpacked
                     (Cosmos__Group__V1__MsgCreateGroupResponse *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__Group__V1__MsgUpdateGroupMembers methods */
void   cosmos__group__v1__msg_update_group_members__init
                     (Cosmos__Group__V1__MsgUpdateGroupMembers         *message);
size_t cosmos__group__v1__msg_update_group_members__get_packed_size
                     (const Cosmos__Group__V1__MsgUpdateGroupMembers   *message);
size_t cosmos__group__v1__msg_update_group_members__pack
                     (const Cosmos__Group__V1__MsgUpdateGroupMembers   *message,
                      uint8_t             *out);
size_t cosmos__group__v1__msg_update_group_members__pack_to_buffer
                     (const Cosmos__Group__V1__MsgUpdateGroupMembers   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Group__V1__MsgUpdateGroupMembers *
       cosmos__group__v1__msg_update_group_members__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__group__v1__msg_update_group_members__free_unpacked
                     (Cosmos__Group__V1__MsgUpdateGroupMembers *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__Group__V1__MsgUpdateGroupMembersResponse methods */
void   cosmos__group__v1__msg_update_group_members_response__init
                     (Cosmos__Group__V1__MsgUpdateGroupMembersResponse         *message);
size_t cosmos__group__v1__msg_update_group_members_response__get_packed_size
                     (const Cosmos__Group__V1__MsgUpdateGroupMembersResponse   *message);
size_t cosmos__group__v1__msg_update_group_members_response__pack
                     (const Cosmos__Group__V1__MsgUpdateGroupMembersResponse   *message,
                      uint8_t             *out);
size_t cosmos__group__v1__msg_update_group_members_response__pack_to_buffer
                     (const Cosmos__Group__V1__MsgUpdateGroupMembersResponse   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Group__V1__MsgUpdateGroupMembersResponse *
       cosmos__group__v1__msg_update_group_members_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__group__v1__msg_update_group_members_response__free_unpacked
                     (Cosmos__Group__V1__MsgUpdateGroupMembersResponse *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__Group__V1__MsgUpdateGroupAdmin methods */
void   cosmos__group__v1__msg_update_group_admin__init
                     (Cosmos__Group__V1__MsgUpdateGroupAdmin         *message);
size_t cosmos__group__v1__msg_update_group_admin__get_packed_size
                     (const Cosmos__Group__V1__MsgUpdateGroupAdmin   *message);
size_t cosmos__group__v1__msg_update_group_admin__pack
                     (const Cosmos__Group__V1__MsgUpdateGroupAdmin   *message,
                      uint8_t             *out);
size_t cosmos__group__v1__msg_update_group_admin__pack_to_buffer
                     (const Cosmos__Group__V1__MsgUpdateGroupAdmin   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Group__V1__MsgUpdateGroupAdmin *
       cosmos__group__v1__msg_update_group_admin__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__group__v1__msg_update_group_admin__free_unpacked
                     (Cosmos__Group__V1__MsgUpdateGroupAdmin *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__Group__V1__MsgUpdateGroupAdminResponse methods */
void   cosmos__group__v1__msg_update_group_admin_response__init
                     (Cosmos__Group__V1__MsgUpdateGroupAdminResponse         *message);
size_t cosmos__group__v1__msg_update_group_admin_response__get_packed_size
                     (const Cosmos__Group__V1__MsgUpdateGroupAdminResponse   *message);
size_t cosmos__group__v1__msg_update_group_admin_response__pack
                     (const Cosmos__Group__V1__MsgUpdateGroupAdminResponse   *message,
                      uint8_t             *out);
size_t cosmos__group__v1__msg_update_group_admin_response__pack_to_buffer
                     (const Cosmos__Group__V1__MsgUpdateGroupAdminResponse   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Group__V1__MsgUpdateGroupAdminResponse *
       cosmos__group__v1__msg_update_group_admin_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__group__v1__msg_update_group_admin_response__free_unpacked
                     (Cosmos__Group__V1__MsgUpdateGroupAdminResponse *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__Group__V1__MsgUpdateGroupMetadata methods */
void   cosmos__group__v1__msg_update_group_metadata__init
                     (Cosmos__Group__V1__MsgUpdateGroupMetadata         *message);
size_t cosmos__group__v1__msg_update_group_metadata__get_packed_size
                     (const Cosmos__Group__V1__MsgUpdateGroupMetadata   *message);
size_t cosmos__group__v1__msg_update_group_metadata__pack
                     (const Cosmos__Group__V1__MsgUpdateGroupMetadata   *message,
                      uint8_t             *out);
size_t cosmos__group__v1__msg_update_group_metadata__pack_to_buffer
                     (const Cosmos__Group__V1__MsgUpdateGroupMetadata   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Group__V1__MsgUpdateGroupMetadata *
       cosmos__group__v1__msg_update_group_metadata__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__group__v1__msg_update_group_metadata__free_unpacked
                     (Cosmos__Group__V1__MsgUpdateGroupMetadata *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__Group__V1__MsgUpdateGroupMetadataResponse methods */
void   cosmos__group__v1__msg_update_group_metadata_response__init
                     (Cosmos__Group__V1__MsgUpdateGroupMetadataResponse         *message);
size_t cosmos__group__v1__msg_update_group_metadata_response__get_packed_size
                     (const Cosmos__Group__V1__MsgUpdateGroupMetadataResponse   *message);
size_t cosmos__group__v1__msg_update_group_metadata_response__pack
                     (const Cosmos__Group__V1__MsgUpdateGroupMetadataResponse   *message,
                      uint8_t             *out);
size_t cosmos__group__v1__msg_update_group_metadata_response__pack_to_buffer
                     (const Cosmos__Group__V1__MsgUpdateGroupMetadataResponse   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Group__V1__MsgUpdateGroupMetadataResponse *
       cosmos__group__v1__msg_update_group_metadata_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__group__v1__msg_update_group_metadata_response__free_unpacked
                     (Cosmos__Group__V1__MsgUpdateGroupMetadataResponse *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__Group__V1__MsgCreateGroupPolicy methods */
void   cosmos__group__v1__msg_create_group_policy__init
                     (Cosmos__Group__V1__MsgCreateGroupPolicy         *message);
size_t cosmos__group__v1__msg_create_group_policy__get_packed_size
                     (const Cosmos__Group__V1__MsgCreateGroupPolicy   *message);
size_t cosmos__group__v1__msg_create_group_policy__pack
                     (const Cosmos__Group__V1__MsgCreateGroupPolicy   *message,
                      uint8_t             *out);
size_t cosmos__group__v1__msg_create_group_policy__pack_to_buffer
                     (const Cosmos__Group__V1__MsgCreateGroupPolicy   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Group__V1__MsgCreateGroupPolicy *
       cosmos__group__v1__msg_create_group_policy__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__group__v1__msg_create_group_policy__free_unpacked
                     (Cosmos__Group__V1__MsgCreateGroupPolicy *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__Group__V1__MsgCreateGroupPolicyResponse methods */
void   cosmos__group__v1__msg_create_group_policy_response__init
                     (Cosmos__Group__V1__MsgCreateGroupPolicyResponse         *message);
size_t cosmos__group__v1__msg_create_group_policy_response__get_packed_size
                     (const Cosmos__Group__V1__MsgCreateGroupPolicyResponse   *message);
size_t cosmos__group__v1__msg_create_group_policy_response__pack
                     (const Cosmos__Group__V1__MsgCreateGroupPolicyResponse   *message,
                      uint8_t             *out);
size_t cosmos__group__v1__msg_create_group_policy_response__pack_to_buffer
                     (const Cosmos__Group__V1__MsgCreateGroupPolicyResponse   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Group__V1__MsgCreateGroupPolicyResponse *
       cosmos__group__v1__msg_create_group_policy_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__group__v1__msg_create_group_policy_response__free_unpacked
                     (Cosmos__Group__V1__MsgCreateGroupPolicyResponse *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__Group__V1__MsgUpdateGroupPolicyAdmin methods */
void   cosmos__group__v1__msg_update_group_policy_admin__init
                     (Cosmos__Group__V1__MsgUpdateGroupPolicyAdmin         *message);
size_t cosmos__group__v1__msg_update_group_policy_admin__get_packed_size
                     (const Cosmos__Group__V1__MsgUpdateGroupPolicyAdmin   *message);
size_t cosmos__group__v1__msg_update_group_policy_admin__pack
                     (const Cosmos__Group__V1__MsgUpdateGroupPolicyAdmin   *message,
                      uint8_t             *out);
size_t cosmos__group__v1__msg_update_group_policy_admin__pack_to_buffer
                     (const Cosmos__Group__V1__MsgUpdateGroupPolicyAdmin   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Group__V1__MsgUpdateGroupPolicyAdmin *
       cosmos__group__v1__msg_update_group_policy_admin__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__group__v1__msg_update_group_policy_admin__free_unpacked
                     (Cosmos__Group__V1__MsgUpdateGroupPolicyAdmin *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__Group__V1__MsgUpdateGroupPolicyAdminResponse methods */
void   cosmos__group__v1__msg_update_group_policy_admin_response__init
                     (Cosmos__Group__V1__MsgUpdateGroupPolicyAdminResponse         *message);
size_t cosmos__group__v1__msg_update_group_policy_admin_response__get_packed_size
                     (const Cosmos__Group__V1__MsgUpdateGroupPolicyAdminResponse   *message);
size_t cosmos__group__v1__msg_update_group_policy_admin_response__pack
                     (const Cosmos__Group__V1__MsgUpdateGroupPolicyAdminResponse   *message,
                      uint8_t             *out);
size_t cosmos__group__v1__msg_update_group_policy_admin_response__pack_to_buffer
                     (const Cosmos__Group__V1__MsgUpdateGroupPolicyAdminResponse   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Group__V1__MsgUpdateGroupPolicyAdminResponse *
       cosmos__group__v1__msg_update_group_policy_admin_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__group__v1__msg_update_group_policy_admin_response__free_unpacked
                     (Cosmos__Group__V1__MsgUpdateGroupPolicyAdminResponse *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__Group__V1__MsgCreateGroupWithPolicy methods */
void   cosmos__group__v1__msg_create_group_with_policy__init
                     (Cosmos__Group__V1__MsgCreateGroupWithPolicy         *message);
size_t cosmos__group__v1__msg_create_group_with_policy__get_packed_size
                     (const Cosmos__Group__V1__MsgCreateGroupWithPolicy   *message);
size_t cosmos__group__v1__msg_create_group_with_policy__pack
                     (const Cosmos__Group__V1__MsgCreateGroupWithPolicy   *message,
                      uint8_t             *out);
size_t cosmos__group__v1__msg_create_group_with_policy__pack_to_buffer
                     (const Cosmos__Group__V1__MsgCreateGroupWithPolicy   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Group__V1__MsgCreateGroupWithPolicy *
       cosmos__group__v1__msg_create_group_with_policy__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__group__v1__msg_create_group_with_policy__free_unpacked
                     (Cosmos__Group__V1__MsgCreateGroupWithPolicy *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__Group__V1__MsgCreateGroupWithPolicyResponse methods */
void   cosmos__group__v1__msg_create_group_with_policy_response__init
                     (Cosmos__Group__V1__MsgCreateGroupWithPolicyResponse         *message);
size_t cosmos__group__v1__msg_create_group_with_policy_response__get_packed_size
                     (const Cosmos__Group__V1__MsgCreateGroupWithPolicyResponse   *message);
size_t cosmos__group__v1__msg_create_group_with_policy_response__pack
                     (const Cosmos__Group__V1__MsgCreateGroupWithPolicyResponse   *message,
                      uint8_t             *out);
size_t cosmos__group__v1__msg_create_group_with_policy_response__pack_to_buffer
                     (const Cosmos__Group__V1__MsgCreateGroupWithPolicyResponse   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Group__V1__MsgCreateGroupWithPolicyResponse *
       cosmos__group__v1__msg_create_group_with_policy_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__group__v1__msg_create_group_with_policy_response__free_unpacked
                     (Cosmos__Group__V1__MsgCreateGroupWithPolicyResponse *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__Group__V1__MsgUpdateGroupPolicyDecisionPolicy methods */
void   cosmos__group__v1__msg_update_group_policy_decision_policy__init
                     (Cosmos__Group__V1__MsgUpdateGroupPolicyDecisionPolicy         *message);
size_t cosmos__group__v1__msg_update_group_policy_decision_policy__get_packed_size
                     (const Cosmos__Group__V1__MsgUpdateGroupPolicyDecisionPolicy   *message);
size_t cosmos__group__v1__msg_update_group_policy_decision_policy__pack
                     (const Cosmos__Group__V1__MsgUpdateGroupPolicyDecisionPolicy   *message,
                      uint8_t             *out);
size_t cosmos__group__v1__msg_update_group_policy_decision_policy__pack_to_buffer
                     (const Cosmos__Group__V1__MsgUpdateGroupPolicyDecisionPolicy   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Group__V1__MsgUpdateGroupPolicyDecisionPolicy *
       cosmos__group__v1__msg_update_group_policy_decision_policy__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__group__v1__msg_update_group_policy_decision_policy__free_unpacked
                     (Cosmos__Group__V1__MsgUpdateGroupPolicyDecisionPolicy *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__Group__V1__MsgUpdateGroupPolicyDecisionPolicyResponse methods */
void   cosmos__group__v1__msg_update_group_policy_decision_policy_response__init
                     (Cosmos__Group__V1__MsgUpdateGroupPolicyDecisionPolicyResponse         *message);
size_t cosmos__group__v1__msg_update_group_policy_decision_policy_response__get_packed_size
                     (const Cosmos__Group__V1__MsgUpdateGroupPolicyDecisionPolicyResponse   *message);
size_t cosmos__group__v1__msg_update_group_policy_decision_policy_response__pack
                     (const Cosmos__Group__V1__MsgUpdateGroupPolicyDecisionPolicyResponse   *message,
                      uint8_t             *out);
size_t cosmos__group__v1__msg_update_group_policy_decision_policy_response__pack_to_buffer
                     (const Cosmos__Group__V1__MsgUpdateGroupPolicyDecisionPolicyResponse   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Group__V1__MsgUpdateGroupPolicyDecisionPolicyResponse *
       cosmos__group__v1__msg_update_group_policy_decision_policy_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__group__v1__msg_update_group_policy_decision_policy_response__free_unpacked
                     (Cosmos__Group__V1__MsgUpdateGroupPolicyDecisionPolicyResponse *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__Group__V1__MsgUpdateGroupPolicyMetadata methods */
void   cosmos__group__v1__msg_update_group_policy_metadata__init
                     (Cosmos__Group__V1__MsgUpdateGroupPolicyMetadata         *message);
size_t cosmos__group__v1__msg_update_group_policy_metadata__get_packed_size
                     (const Cosmos__Group__V1__MsgUpdateGroupPolicyMetadata   *message);
size_t cosmos__group__v1__msg_update_group_policy_metadata__pack
                     (const Cosmos__Group__V1__MsgUpdateGroupPolicyMetadata   *message,
                      uint8_t             *out);
size_t cosmos__group__v1__msg_update_group_policy_metadata__pack_to_buffer
                     (const Cosmos__Group__V1__MsgUpdateGroupPolicyMetadata   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Group__V1__MsgUpdateGroupPolicyMetadata *
       cosmos__group__v1__msg_update_group_policy_metadata__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__group__v1__msg_update_group_policy_metadata__free_unpacked
                     (Cosmos__Group__V1__MsgUpdateGroupPolicyMetadata *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__Group__V1__MsgUpdateGroupPolicyMetadataResponse methods */
void   cosmos__group__v1__msg_update_group_policy_metadata_response__init
                     (Cosmos__Group__V1__MsgUpdateGroupPolicyMetadataResponse         *message);
size_t cosmos__group__v1__msg_update_group_policy_metadata_response__get_packed_size
                     (const Cosmos__Group__V1__MsgUpdateGroupPolicyMetadataResponse   *message);
size_t cosmos__group__v1__msg_update_group_policy_metadata_response__pack
                     (const Cosmos__Group__V1__MsgUpdateGroupPolicyMetadataResponse   *message,
                      uint8_t             *out);
size_t cosmos__group__v1__msg_update_group_policy_metadata_response__pack_to_buffer
                     (const Cosmos__Group__V1__MsgUpdateGroupPolicyMetadataResponse   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Group__V1__MsgUpdateGroupPolicyMetadataResponse *
       cosmos__group__v1__msg_update_group_policy_metadata_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__group__v1__msg_update_group_policy_metadata_response__free_unpacked
                     (Cosmos__Group__V1__MsgUpdateGroupPolicyMetadataResponse *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__Group__V1__MsgSubmitProposal methods */
void   cosmos__group__v1__msg_submit_proposal__init
                     (Cosmos__Group__V1__MsgSubmitProposal         *message);
size_t cosmos__group__v1__msg_submit_proposal__get_packed_size
                     (const Cosmos__Group__V1__MsgSubmitProposal   *message);
size_t cosmos__group__v1__msg_submit_proposal__pack
                     (const Cosmos__Group__V1__MsgSubmitProposal   *message,
                      uint8_t             *out);
size_t cosmos__group__v1__msg_submit_proposal__pack_to_buffer
                     (const Cosmos__Group__V1__MsgSubmitProposal   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Group__V1__MsgSubmitProposal *
       cosmos__group__v1__msg_submit_proposal__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__group__v1__msg_submit_proposal__free_unpacked
                     (Cosmos__Group__V1__MsgSubmitProposal *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__Group__V1__MsgSubmitProposalResponse methods */
void   cosmos__group__v1__msg_submit_proposal_response__init
                     (Cosmos__Group__V1__MsgSubmitProposalResponse         *message);
size_t cosmos__group__v1__msg_submit_proposal_response__get_packed_size
                     (const Cosmos__Group__V1__MsgSubmitProposalResponse   *message);
size_t cosmos__group__v1__msg_submit_proposal_response__pack
                     (const Cosmos__Group__V1__MsgSubmitProposalResponse   *message,
                      uint8_t             *out);
size_t cosmos__group__v1__msg_submit_proposal_response__pack_to_buffer
                     (const Cosmos__Group__V1__MsgSubmitProposalResponse   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Group__V1__MsgSubmitProposalResponse *
       cosmos__group__v1__msg_submit_proposal_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__group__v1__msg_submit_proposal_response__free_unpacked
                     (Cosmos__Group__V1__MsgSubmitProposalResponse *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__Group__V1__MsgWithdrawProposal methods */
void   cosmos__group__v1__msg_withdraw_proposal__init
                     (Cosmos__Group__V1__MsgWithdrawProposal         *message);
size_t cosmos__group__v1__msg_withdraw_proposal__get_packed_size
                     (const Cosmos__Group__V1__MsgWithdrawProposal   *message);
size_t cosmos__group__v1__msg_withdraw_proposal__pack
                     (const Cosmos__Group__V1__MsgWithdrawProposal   *message,
                      uint8_t             *out);
size_t cosmos__group__v1__msg_withdraw_proposal__pack_to_buffer
                     (const Cosmos__Group__V1__MsgWithdrawProposal   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Group__V1__MsgWithdrawProposal *
       cosmos__group__v1__msg_withdraw_proposal__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__group__v1__msg_withdraw_proposal__free_unpacked
                     (Cosmos__Group__V1__MsgWithdrawProposal *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__Group__V1__MsgWithdrawProposalResponse methods */
void   cosmos__group__v1__msg_withdraw_proposal_response__init
                     (Cosmos__Group__V1__MsgWithdrawProposalResponse         *message);
size_t cosmos__group__v1__msg_withdraw_proposal_response__get_packed_size
                     (const Cosmos__Group__V1__MsgWithdrawProposalResponse   *message);
size_t cosmos__group__v1__msg_withdraw_proposal_response__pack
                     (const Cosmos__Group__V1__MsgWithdrawProposalResponse   *message,
                      uint8_t             *out);
size_t cosmos__group__v1__msg_withdraw_proposal_response__pack_to_buffer
                     (const Cosmos__Group__V1__MsgWithdrawProposalResponse   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Group__V1__MsgWithdrawProposalResponse *
       cosmos__group__v1__msg_withdraw_proposal_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__group__v1__msg_withdraw_proposal_response__free_unpacked
                     (Cosmos__Group__V1__MsgWithdrawProposalResponse *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__Group__V1__MsgVote methods */
void   cosmos__group__v1__msg_vote__init
                     (Cosmos__Group__V1__MsgVote         *message);
size_t cosmos__group__v1__msg_vote__get_packed_size
                     (const Cosmos__Group__V1__MsgVote   *message);
size_t cosmos__group__v1__msg_vote__pack
                     (const Cosmos__Group__V1__MsgVote   *message,
                      uint8_t             *out);
size_t cosmos__group__v1__msg_vote__pack_to_buffer
                     (const Cosmos__Group__V1__MsgVote   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Group__V1__MsgVote *
       cosmos__group__v1__msg_vote__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__group__v1__msg_vote__free_unpacked
                     (Cosmos__Group__V1__MsgVote *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__Group__V1__MsgVoteResponse methods */
void   cosmos__group__v1__msg_vote_response__init
                     (Cosmos__Group__V1__MsgVoteResponse         *message);
size_t cosmos__group__v1__msg_vote_response__get_packed_size
                     (const Cosmos__Group__V1__MsgVoteResponse   *message);
size_t cosmos__group__v1__msg_vote_response__pack
                     (const Cosmos__Group__V1__MsgVoteResponse   *message,
                      uint8_t             *out);
size_t cosmos__group__v1__msg_vote_response__pack_to_buffer
                     (const Cosmos__Group__V1__MsgVoteResponse   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Group__V1__MsgVoteResponse *
       cosmos__group__v1__msg_vote_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__group__v1__msg_vote_response__free_unpacked
                     (Cosmos__Group__V1__MsgVoteResponse *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__Group__V1__MsgExec methods */
void   cosmos__group__v1__msg_exec__init
                     (Cosmos__Group__V1__MsgExec         *message);
size_t cosmos__group__v1__msg_exec__get_packed_size
                     (const Cosmos__Group__V1__MsgExec   *message);
size_t cosmos__group__v1__msg_exec__pack
                     (const Cosmos__Group__V1__MsgExec   *message,
                      uint8_t             *out);
size_t cosmos__group__v1__msg_exec__pack_to_buffer
                     (const Cosmos__Group__V1__MsgExec   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Group__V1__MsgExec *
       cosmos__group__v1__msg_exec__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__group__v1__msg_exec__free_unpacked
                     (Cosmos__Group__V1__MsgExec *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__Group__V1__MsgExecResponse methods */
void   cosmos__group__v1__msg_exec_response__init
                     (Cosmos__Group__V1__MsgExecResponse         *message);
size_t cosmos__group__v1__msg_exec_response__get_packed_size
                     (const Cosmos__Group__V1__MsgExecResponse   *message);
size_t cosmos__group__v1__msg_exec_response__pack
                     (const Cosmos__Group__V1__MsgExecResponse   *message,
                      uint8_t             *out);
size_t cosmos__group__v1__msg_exec_response__pack_to_buffer
                     (const Cosmos__Group__V1__MsgExecResponse   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Group__V1__MsgExecResponse *
       cosmos__group__v1__msg_exec_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__group__v1__msg_exec_response__free_unpacked
                     (Cosmos__Group__V1__MsgExecResponse *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__Group__V1__MsgLeaveGroup methods */
void   cosmos__group__v1__msg_leave_group__init
                     (Cosmos__Group__V1__MsgLeaveGroup         *message);
size_t cosmos__group__v1__msg_leave_group__get_packed_size
                     (const Cosmos__Group__V1__MsgLeaveGroup   *message);
size_t cosmos__group__v1__msg_leave_group__pack
                     (const Cosmos__Group__V1__MsgLeaveGroup   *message,
                      uint8_t             *out);
size_t cosmos__group__v1__msg_leave_group__pack_to_buffer
                     (const Cosmos__Group__V1__MsgLeaveGroup   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Group__V1__MsgLeaveGroup *
       cosmos__group__v1__msg_leave_group__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__group__v1__msg_leave_group__free_unpacked
                     (Cosmos__Group__V1__MsgLeaveGroup *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__Group__V1__MsgLeaveGroupResponse methods */
void   cosmos__group__v1__msg_leave_group_response__init
                     (Cosmos__Group__V1__MsgLeaveGroupResponse         *message);
size_t cosmos__group__v1__msg_leave_group_response__get_packed_size
                     (const Cosmos__Group__V1__MsgLeaveGroupResponse   *message);
size_t cosmos__group__v1__msg_leave_group_response__pack
                     (const Cosmos__Group__V1__MsgLeaveGroupResponse   *message,
                      uint8_t             *out);
size_t cosmos__group__v1__msg_leave_group_response__pack_to_buffer
                     (const Cosmos__Group__V1__MsgLeaveGroupResponse   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Group__V1__MsgLeaveGroupResponse *
       cosmos__group__v1__msg_leave_group_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__group__v1__msg_leave_group_response__free_unpacked
                     (Cosmos__Group__V1__MsgLeaveGroupResponse *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Cosmos__Group__V1__MsgCreateGroup_Closure)
                 (const Cosmos__Group__V1__MsgCreateGroup *message,
                  void *closure_data);
typedef void (*Cosmos__Group__V1__MsgCreateGroupResponse_Closure)
                 (const Cosmos__Group__V1__MsgCreateGroupResponse *message,
                  void *closure_data);
typedef void (*Cosmos__Group__V1__MsgUpdateGroupMembers_Closure)
                 (const Cosmos__Group__V1__MsgUpdateGroupMembers *message,
                  void *closure_data);
typedef void (*Cosmos__Group__V1__MsgUpdateGroupMembersResponse_Closure)
                 (const Cosmos__Group__V1__MsgUpdateGroupMembersResponse *message,
                  void *closure_data);
typedef void (*Cosmos__Group__V1__MsgUpdateGroupAdmin_Closure)
                 (const Cosmos__Group__V1__MsgUpdateGroupAdmin *message,
                  void *closure_data);
typedef void (*Cosmos__Group__V1__MsgUpdateGroupAdminResponse_Closure)
                 (const Cosmos__Group__V1__MsgUpdateGroupAdminResponse *message,
                  void *closure_data);
typedef void (*Cosmos__Group__V1__MsgUpdateGroupMetadata_Closure)
                 (const Cosmos__Group__V1__MsgUpdateGroupMetadata *message,
                  void *closure_data);
typedef void (*Cosmos__Group__V1__MsgUpdateGroupMetadataResponse_Closure)
                 (const Cosmos__Group__V1__MsgUpdateGroupMetadataResponse *message,
                  void *closure_data);
typedef void (*Cosmos__Group__V1__MsgCreateGroupPolicy_Closure)
                 (const Cosmos__Group__V1__MsgCreateGroupPolicy *message,
                  void *closure_data);
typedef void (*Cosmos__Group__V1__MsgCreateGroupPolicyResponse_Closure)
                 (const Cosmos__Group__V1__MsgCreateGroupPolicyResponse *message,
                  void *closure_data);
typedef void (*Cosmos__Group__V1__MsgUpdateGroupPolicyAdmin_Closure)
                 (const Cosmos__Group__V1__MsgUpdateGroupPolicyAdmin *message,
                  void *closure_data);
typedef void (*Cosmos__Group__V1__MsgUpdateGroupPolicyAdminResponse_Closure)
                 (const Cosmos__Group__V1__MsgUpdateGroupPolicyAdminResponse *message,
                  void *closure_data);
typedef void (*Cosmos__Group__V1__MsgCreateGroupWithPolicy_Closure)
                 (const Cosmos__Group__V1__MsgCreateGroupWithPolicy *message,
                  void *closure_data);
typedef void (*Cosmos__Group__V1__MsgCreateGroupWithPolicyResponse_Closure)
                 (const Cosmos__Group__V1__MsgCreateGroupWithPolicyResponse *message,
                  void *closure_data);
typedef void (*Cosmos__Group__V1__MsgUpdateGroupPolicyDecisionPolicy_Closure)
                 (const Cosmos__Group__V1__MsgUpdateGroupPolicyDecisionPolicy *message,
                  void *closure_data);
typedef void (*Cosmos__Group__V1__MsgUpdateGroupPolicyDecisionPolicyResponse_Closure)
                 (const Cosmos__Group__V1__MsgUpdateGroupPolicyDecisionPolicyResponse *message,
                  void *closure_data);
typedef void (*Cosmos__Group__V1__MsgUpdateGroupPolicyMetadata_Closure)
                 (const Cosmos__Group__V1__MsgUpdateGroupPolicyMetadata *message,
                  void *closure_data);
typedef void (*Cosmos__Group__V1__MsgUpdateGroupPolicyMetadataResponse_Closure)
                 (const Cosmos__Group__V1__MsgUpdateGroupPolicyMetadataResponse *message,
                  void *closure_data);
typedef void (*Cosmos__Group__V1__MsgSubmitProposal_Closure)
                 (const Cosmos__Group__V1__MsgSubmitProposal *message,
                  void *closure_data);
typedef void (*Cosmos__Group__V1__MsgSubmitProposalResponse_Closure)
                 (const Cosmos__Group__V1__MsgSubmitProposalResponse *message,
                  void *closure_data);
typedef void (*Cosmos__Group__V1__MsgWithdrawProposal_Closure)
                 (const Cosmos__Group__V1__MsgWithdrawProposal *message,
                  void *closure_data);
typedef void (*Cosmos__Group__V1__MsgWithdrawProposalResponse_Closure)
                 (const Cosmos__Group__V1__MsgWithdrawProposalResponse *message,
                  void *closure_data);
typedef void (*Cosmos__Group__V1__MsgVote_Closure)
                 (const Cosmos__Group__V1__MsgVote *message,
                  void *closure_data);
typedef void (*Cosmos__Group__V1__MsgVoteResponse_Closure)
                 (const Cosmos__Group__V1__MsgVoteResponse *message,
                  void *closure_data);
typedef void (*Cosmos__Group__V1__MsgExec_Closure)
                 (const Cosmos__Group__V1__MsgExec *message,
                  void *closure_data);
typedef void (*Cosmos__Group__V1__MsgExecResponse_Closure)
                 (const Cosmos__Group__V1__MsgExecResponse *message,
                  void *closure_data);
typedef void (*Cosmos__Group__V1__MsgLeaveGroup_Closure)
                 (const Cosmos__Group__V1__MsgLeaveGroup *message,
                  void *closure_data);
typedef void (*Cosmos__Group__V1__MsgLeaveGroupResponse_Closure)
                 (const Cosmos__Group__V1__MsgLeaveGroupResponse *message,
                  void *closure_data);

/* --- services --- */

typedef struct Cosmos__Group__V1__Msg_Service Cosmos__Group__V1__Msg_Service;
struct Cosmos__Group__V1__Msg_Service
{
  ProtobufCService base;
  void (*create_group)(Cosmos__Group__V1__Msg_Service *service,
                       const Cosmos__Group__V1__MsgCreateGroup *input,
                       Cosmos__Group__V1__MsgCreateGroupResponse_Closure closure,
                       void *closure_data);
  void (*update_group_members)(Cosmos__Group__V1__Msg_Service *service,
                               const Cosmos__Group__V1__MsgUpdateGroupMembers *input,
                               Cosmos__Group__V1__MsgUpdateGroupMembersResponse_Closure closure,
                               void *closure_data);
  void (*update_group_admin)(Cosmos__Group__V1__Msg_Service *service,
                             const Cosmos__Group__V1__MsgUpdateGroupAdmin *input,
                             Cosmos__Group__V1__MsgUpdateGroupAdminResponse_Closure closure,
                             void *closure_data);
  void (*update_group_metadata)(Cosmos__Group__V1__Msg_Service *service,
                                const Cosmos__Group__V1__MsgUpdateGroupMetadata *input,
                                Cosmos__Group__V1__MsgUpdateGroupMetadataResponse_Closure closure,
                                void *closure_data);
  void (*create_group_policy)(Cosmos__Group__V1__Msg_Service *service,
                              const Cosmos__Group__V1__MsgCreateGroupPolicy *input,
                              Cosmos__Group__V1__MsgCreateGroupPolicyResponse_Closure closure,
                              void *closure_data);
  void (*create_group_with_policy)(Cosmos__Group__V1__Msg_Service *service,
                                   const Cosmos__Group__V1__MsgCreateGroupWithPolicy *input,
                                   Cosmos__Group__V1__MsgCreateGroupWithPolicyResponse_Closure closure,
                                   void *closure_data);
  void (*update_group_policy_admin)(Cosmos__Group__V1__Msg_Service *service,
                                    const Cosmos__Group__V1__MsgUpdateGroupPolicyAdmin *input,
                                    Cosmos__Group__V1__MsgUpdateGroupPolicyAdminResponse_Closure closure,
                                    void *closure_data);
  void (*update_group_policy_decision_policy)(Cosmos__Group__V1__Msg_Service *service,
                                              const Cosmos__Group__V1__MsgUpdateGroupPolicyDecisionPolicy *input,
                                              Cosmos__Group__V1__MsgUpdateGroupPolicyDecisionPolicyResponse_Closure closure,
                                              void *closure_data);
  void (*update_group_policy_metadata)(Cosmos__Group__V1__Msg_Service *service,
                                       const Cosmos__Group__V1__MsgUpdateGroupPolicyMetadata *input,
                                       Cosmos__Group__V1__MsgUpdateGroupPolicyMetadataResponse_Closure closure,
                                       void *closure_data);
  void (*submit_proposal)(Cosmos__Group__V1__Msg_Service *service,
                          const Cosmos__Group__V1__MsgSubmitProposal *input,
                          Cosmos__Group__V1__MsgSubmitProposalResponse_Closure closure,
                          void *closure_data);
  void (*withdraw_proposal)(Cosmos__Group__V1__Msg_Service *service,
                            const Cosmos__Group__V1__MsgWithdrawProposal *input,
                            Cosmos__Group__V1__MsgWithdrawProposalResponse_Closure closure,
                            void *closure_data);
  void (*vote)(Cosmos__Group__V1__Msg_Service *service,
               const Cosmos__Group__V1__MsgVote *input,
               Cosmos__Group__V1__MsgVoteResponse_Closure closure,
               void *closure_data);
  void (*exec)(Cosmos__Group__V1__Msg_Service *service,
               const Cosmos__Group__V1__MsgExec *input,
               Cosmos__Group__V1__MsgExecResponse_Closure closure,
               void *closure_data);
  void (*leave_group)(Cosmos__Group__V1__Msg_Service *service,
                      const Cosmos__Group__V1__MsgLeaveGroup *input,
                      Cosmos__Group__V1__MsgLeaveGroupResponse_Closure closure,
                      void *closure_data);
};
typedef void (*Cosmos__Group__V1__Msg_ServiceDestroy)(Cosmos__Group__V1__Msg_Service *);
void cosmos__group__v1__msg__init (Cosmos__Group__V1__Msg_Service *service,
                                   Cosmos__Group__V1__Msg_ServiceDestroy destroy);
#define COSMOS__GROUP__V1__MSG__BASE_INIT \
    { &cosmos__group__v1__msg__descriptor, protobuf_c_service_invoke_internal, NULL }
#define COSMOS__GROUP__V1__MSG__INIT(function_prefix__) \
    { COSMOS__GROUP__V1__MSG__BASE_INIT,\
      function_prefix__ ## create_group,\
      function_prefix__ ## update_group_members,\
      function_prefix__ ## update_group_admin,\
      function_prefix__ ## update_group_metadata,\
      function_prefix__ ## create_group_policy,\
      function_prefix__ ## create_group_with_policy,\
      function_prefix__ ## update_group_policy_admin,\
      function_prefix__ ## update_group_policy_decision_policy,\
      function_prefix__ ## update_group_policy_metadata,\
      function_prefix__ ## submit_proposal,\
      function_prefix__ ## withdraw_proposal,\
      function_prefix__ ## vote,\
      function_prefix__ ## exec,\
      function_prefix__ ## leave_group  }
void cosmos__group__v1__msg__create_group(ProtobufCService *service,
                                          const Cosmos__Group__V1__MsgCreateGroup *input,
                                          Cosmos__Group__V1__MsgCreateGroupResponse_Closure closure,
                                          void *closure_data);
void cosmos__group__v1__msg__update_group_members(ProtobufCService *service,
                                                  const Cosmos__Group__V1__MsgUpdateGroupMembers *input,
                                                  Cosmos__Group__V1__MsgUpdateGroupMembersResponse_Closure closure,
                                                  void *closure_data);
void cosmos__group__v1__msg__update_group_admin(ProtobufCService *service,
                                                const Cosmos__Group__V1__MsgUpdateGroupAdmin *input,
                                                Cosmos__Group__V1__MsgUpdateGroupAdminResponse_Closure closure,
                                                void *closure_data);
void cosmos__group__v1__msg__update_group_metadata(ProtobufCService *service,
                                                   const Cosmos__Group__V1__MsgUpdateGroupMetadata *input,
                                                   Cosmos__Group__V1__MsgUpdateGroupMetadataResponse_Closure closure,
                                                   void *closure_data);
void cosmos__group__v1__msg__create_group_policy(ProtobufCService *service,
                                                 const Cosmos__Group__V1__MsgCreateGroupPolicy *input,
                                                 Cosmos__Group__V1__MsgCreateGroupPolicyResponse_Closure closure,
                                                 void *closure_data);
void cosmos__group__v1__msg__create_group_with_policy(ProtobufCService *service,
                                                      const Cosmos__Group__V1__MsgCreateGroupWithPolicy *input,
                                                      Cosmos__Group__V1__MsgCreateGroupWithPolicyResponse_Closure closure,
                                                      void *closure_data);
void cosmos__group__v1__msg__update_group_policy_admin(ProtobufCService *service,
                                                       const Cosmos__Group__V1__MsgUpdateGroupPolicyAdmin *input,
                                                       Cosmos__Group__V1__MsgUpdateGroupPolicyAdminResponse_Closure closure,
                                                       void *closure_data);
void cosmos__group__v1__msg__update_group_policy_decision_policy(ProtobufCService *service,
                                                                 const Cosmos__Group__V1__MsgUpdateGroupPolicyDecisionPolicy *input,
                                                                 Cosmos__Group__V1__MsgUpdateGroupPolicyDecisionPolicyResponse_Closure closure,
                                                                 void *closure_data);
void cosmos__group__v1__msg__update_group_policy_metadata(ProtobufCService *service,
                                                          const Cosmos__Group__V1__MsgUpdateGroupPolicyMetadata *input,
                                                          Cosmos__Group__V1__MsgUpdateGroupPolicyMetadataResponse_Closure closure,
                                                          void *closure_data);
void cosmos__group__v1__msg__submit_proposal(ProtobufCService *service,
                                             const Cosmos__Group__V1__MsgSubmitProposal *input,
                                             Cosmos__Group__V1__MsgSubmitProposalResponse_Closure closure,
                                             void *closure_data);
void cosmos__group__v1__msg__withdraw_proposal(ProtobufCService *service,
                                               const Cosmos__Group__V1__MsgWithdrawProposal *input,
                                               Cosmos__Group__V1__MsgWithdrawProposalResponse_Closure closure,
                                               void *closure_data);
void cosmos__group__v1__msg__vote(ProtobufCService *service,
                                  const Cosmos__Group__V1__MsgVote *input,
                                  Cosmos__Group__V1__MsgVoteResponse_Closure closure,
                                  void *closure_data);
void cosmos__group__v1__msg__exec(ProtobufCService *service,
                                  const Cosmos__Group__V1__MsgExec *input,
                                  Cosmos__Group__V1__MsgExecResponse_Closure closure,
                                  void *closure_data);
void cosmos__group__v1__msg__leave_group(ProtobufCService *service,
                                         const Cosmos__Group__V1__MsgLeaveGroup *input,
                                         Cosmos__Group__V1__MsgLeaveGroupResponse_Closure closure,
                                         void *closure_data);

/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    cosmos__group__v1__exec__descriptor;
extern const ProtobufCMessageDescriptor cosmos__group__v1__msg_create_group__descriptor;
extern const ProtobufCMessageDescriptor cosmos__group__v1__msg_create_group_response__descriptor;
extern const ProtobufCMessageDescriptor cosmos__group__v1__msg_update_group_members__descriptor;
extern const ProtobufCMessageDescriptor cosmos__group__v1__msg_update_group_members_response__descriptor;
extern const ProtobufCMessageDescriptor cosmos__group__v1__msg_update_group_admin__descriptor;
extern const ProtobufCMessageDescriptor cosmos__group__v1__msg_update_group_admin_response__descriptor;
extern const ProtobufCMessageDescriptor cosmos__group__v1__msg_update_group_metadata__descriptor;
extern const ProtobufCMessageDescriptor cosmos__group__v1__msg_update_group_metadata_response__descriptor;
extern const ProtobufCMessageDescriptor cosmos__group__v1__msg_create_group_policy__descriptor;
extern const ProtobufCMessageDescriptor cosmos__group__v1__msg_create_group_policy_response__descriptor;
extern const ProtobufCMessageDescriptor cosmos__group__v1__msg_update_group_policy_admin__descriptor;
extern const ProtobufCMessageDescriptor cosmos__group__v1__msg_update_group_policy_admin_response__descriptor;
extern const ProtobufCMessageDescriptor cosmos__group__v1__msg_create_group_with_policy__descriptor;
extern const ProtobufCMessageDescriptor cosmos__group__v1__msg_create_group_with_policy_response__descriptor;
extern const ProtobufCMessageDescriptor cosmos__group__v1__msg_update_group_policy_decision_policy__descriptor;
extern const ProtobufCMessageDescriptor cosmos__group__v1__msg_update_group_policy_decision_policy_response__descriptor;
extern const ProtobufCMessageDescriptor cosmos__group__v1__msg_update_group_policy_metadata__descriptor;
extern const ProtobufCMessageDescriptor cosmos__group__v1__msg_update_group_policy_metadata_response__descriptor;
extern const ProtobufCMessageDescriptor cosmos__group__v1__msg_submit_proposal__descriptor;
extern const ProtobufCMessageDescriptor cosmos__group__v1__msg_submit_proposal_response__descriptor;
extern const ProtobufCMessageDescriptor cosmos__group__v1__msg_withdraw_proposal__descriptor;
extern const ProtobufCMessageDescriptor cosmos__group__v1__msg_withdraw_proposal_response__descriptor;
extern const ProtobufCMessageDescriptor cosmos__group__v1__msg_vote__descriptor;
extern const ProtobufCMessageDescriptor cosmos__group__v1__msg_vote_response__descriptor;
extern const ProtobufCMessageDescriptor cosmos__group__v1__msg_exec__descriptor;
extern const ProtobufCMessageDescriptor cosmos__group__v1__msg_exec_response__descriptor;
extern const ProtobufCMessageDescriptor cosmos__group__v1__msg_leave_group__descriptor;
extern const ProtobufCMessageDescriptor cosmos__group__v1__msg_leave_group_response__descriptor;
extern const ProtobufCServiceDescriptor cosmos__group__v1__msg__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_cosmos_2fgroup_2fv1_2ftx_2eproto__INCLUDED */
