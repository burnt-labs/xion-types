/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: cosmos/feegrant/v1beta1/feegrant.proto */

#ifndef PROTOBUF_C_cosmos_2ffeegrant_2fv1beta1_2ffeegrant_2eproto__INCLUDED
#define PROTOBUF_C_cosmos_2ffeegrant_2fv1beta1_2ffeegrant_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protobuf-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1005002 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protobuf-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protobuf-c.
#endif

#include "gogoproto/gogo.pb-c.h"
#include "google/protobuf/any.pb-c.h"
#include "cosmos_proto/cosmos.pb-c.h"
#include "cosmos/base/v1beta1/coin.pb-c.h"
#include "amino/amino.pb-c.h"
#include "google/protobuf/timestamp.pb-c.h"
#include "google/protobuf/duration.pb-c.h"

typedef struct Cosmos__Feegrant__V1beta1__BasicAllowance Cosmos__Feegrant__V1beta1__BasicAllowance;
typedef struct Cosmos__Feegrant__V1beta1__PeriodicAllowance Cosmos__Feegrant__V1beta1__PeriodicAllowance;
typedef struct Cosmos__Feegrant__V1beta1__AllowedMsgAllowance Cosmos__Feegrant__V1beta1__AllowedMsgAllowance;
typedef struct Cosmos__Feegrant__V1beta1__Grant Cosmos__Feegrant__V1beta1__Grant;


/* --- enums --- */


/* --- messages --- */

/*
 * BasicAllowance implements Allowance with a one-time grant of coins
 * that optionally expires. The grantee can use up to SpendLimit to cover fees.
 */
struct  Cosmos__Feegrant__V1beta1__BasicAllowance
{
  ProtobufCMessage base;
  /*
   * spend_limit specifies the maximum amount of coins that can be spent
   * by this allowance and will be updated as coins are spent. If it is
   * empty, there is no spend limit and any amount of coins can be spent.
   */
  size_t n_spend_limit;
  Cosmos__Base__V1beta1__Coin **spend_limit;
  /*
   * expiration specifies an optional time when this allowance expires
   */
  Google__Protobuf__Timestamp *expiration;
};
#define COSMOS__FEEGRANT__V1BETA1__BASIC_ALLOWANCE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__feegrant__v1beta1__basic_allowance__descriptor) \
, 0,NULL, NULL }


/*
 * PeriodicAllowance extends Allowance to allow for both a maximum cap,
 * as well as a limit per time period.
 */
struct  Cosmos__Feegrant__V1beta1__PeriodicAllowance
{
  ProtobufCMessage base;
  /*
   * basic specifies a struct of `BasicAllowance`
   */
  Cosmos__Feegrant__V1beta1__BasicAllowance *basic;
  /*
   * period specifies the time duration in which period_spend_limit coins can
   * be spent before that allowance is reset
   */
  Google__Protobuf__Duration *period;
  /*
   * period_spend_limit specifies the maximum number of coins that can be spent
   * in the period
   */
  size_t n_period_spend_limit;
  Cosmos__Base__V1beta1__Coin **period_spend_limit;
  /*
   * period_can_spend is the number of coins left to be spent before the period_reset time
   */
  size_t n_period_can_spend;
  Cosmos__Base__V1beta1__Coin **period_can_spend;
  /*
   * period_reset is the time at which this period resets and a new one begins,
   * it is calculated from the start time of the first transaction after the
   * last period ended
   */
  Google__Protobuf__Timestamp *period_reset;
};
#define COSMOS__FEEGRANT__V1BETA1__PERIODIC_ALLOWANCE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__feegrant__v1beta1__periodic_allowance__descriptor) \
, NULL, NULL, 0,NULL, 0,NULL, NULL }


/*
 * AllowedMsgAllowance creates allowance only for specified message types.
 */
struct  Cosmos__Feegrant__V1beta1__AllowedMsgAllowance
{
  ProtobufCMessage base;
  /*
   * allowance can be any of basic and periodic fee allowance.
   */
  Google__Protobuf__Any *allowance;
  /*
   * allowed_messages are the messages for which the grantee has the access.
   */
  size_t n_allowed_messages;
  char **allowed_messages;
};
#define COSMOS__FEEGRANT__V1BETA1__ALLOWED_MSG_ALLOWANCE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__feegrant__v1beta1__allowed_msg_allowance__descriptor) \
, NULL, 0,NULL }


/*
 * Grant is stored in the KVStore to record a grant with full context
 */
struct  Cosmos__Feegrant__V1beta1__Grant
{
  ProtobufCMessage base;
  /*
   * granter is the address of the user granting an allowance of their funds.
   */
  char *granter;
  /*
   * grantee is the address of the user being granted an allowance of another user's funds.
   */
  char *grantee;
  /*
   * allowance can be any of basic, periodic, allowed fee allowance.
   */
  Google__Protobuf__Any *allowance;
};
#define COSMOS__FEEGRANT__V1BETA1__GRANT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__feegrant__v1beta1__grant__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, NULL }


/* Cosmos__Feegrant__V1beta1__BasicAllowance methods */
void   cosmos__feegrant__v1beta1__basic_allowance__init
                     (Cosmos__Feegrant__V1beta1__BasicAllowance         *message);
size_t cosmos__feegrant__v1beta1__basic_allowance__get_packed_size
                     (const Cosmos__Feegrant__V1beta1__BasicAllowance   *message);
size_t cosmos__feegrant__v1beta1__basic_allowance__pack
                     (const Cosmos__Feegrant__V1beta1__BasicAllowance   *message,
                      uint8_t             *out);
size_t cosmos__feegrant__v1beta1__basic_allowance__pack_to_buffer
                     (const Cosmos__Feegrant__V1beta1__BasicAllowance   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Feegrant__V1beta1__BasicAllowance *
       cosmos__feegrant__v1beta1__basic_allowance__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__feegrant__v1beta1__basic_allowance__free_unpacked
                     (Cosmos__Feegrant__V1beta1__BasicAllowance *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__Feegrant__V1beta1__PeriodicAllowance methods */
void   cosmos__feegrant__v1beta1__periodic_allowance__init
                     (Cosmos__Feegrant__V1beta1__PeriodicAllowance         *message);
size_t cosmos__feegrant__v1beta1__periodic_allowance__get_packed_size
                     (const Cosmos__Feegrant__V1beta1__PeriodicAllowance   *message);
size_t cosmos__feegrant__v1beta1__periodic_allowance__pack
                     (const Cosmos__Feegrant__V1beta1__PeriodicAllowance   *message,
                      uint8_t             *out);
size_t cosmos__feegrant__v1beta1__periodic_allowance__pack_to_buffer
                     (const Cosmos__Feegrant__V1beta1__PeriodicAllowance   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Feegrant__V1beta1__PeriodicAllowance *
       cosmos__feegrant__v1beta1__periodic_allowance__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__feegrant__v1beta1__periodic_allowance__free_unpacked
                     (Cosmos__Feegrant__V1beta1__PeriodicAllowance *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__Feegrant__V1beta1__AllowedMsgAllowance methods */
void   cosmos__feegrant__v1beta1__allowed_msg_allowance__init
                     (Cosmos__Feegrant__V1beta1__AllowedMsgAllowance         *message);
size_t cosmos__feegrant__v1beta1__allowed_msg_allowance__get_packed_size
                     (const Cosmos__Feegrant__V1beta1__AllowedMsgAllowance   *message);
size_t cosmos__feegrant__v1beta1__allowed_msg_allowance__pack
                     (const Cosmos__Feegrant__V1beta1__AllowedMsgAllowance   *message,
                      uint8_t             *out);
size_t cosmos__feegrant__v1beta1__allowed_msg_allowance__pack_to_buffer
                     (const Cosmos__Feegrant__V1beta1__AllowedMsgAllowance   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Feegrant__V1beta1__AllowedMsgAllowance *
       cosmos__feegrant__v1beta1__allowed_msg_allowance__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__feegrant__v1beta1__allowed_msg_allowance__free_unpacked
                     (Cosmos__Feegrant__V1beta1__AllowedMsgAllowance *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__Feegrant__V1beta1__Grant methods */
void   cosmos__feegrant__v1beta1__grant__init
                     (Cosmos__Feegrant__V1beta1__Grant         *message);
size_t cosmos__feegrant__v1beta1__grant__get_packed_size
                     (const Cosmos__Feegrant__V1beta1__Grant   *message);
size_t cosmos__feegrant__v1beta1__grant__pack
                     (const Cosmos__Feegrant__V1beta1__Grant   *message,
                      uint8_t             *out);
size_t cosmos__feegrant__v1beta1__grant__pack_to_buffer
                     (const Cosmos__Feegrant__V1beta1__Grant   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Feegrant__V1beta1__Grant *
       cosmos__feegrant__v1beta1__grant__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__feegrant__v1beta1__grant__free_unpacked
                     (Cosmos__Feegrant__V1beta1__Grant *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Cosmos__Feegrant__V1beta1__BasicAllowance_Closure)
                 (const Cosmos__Feegrant__V1beta1__BasicAllowance *message,
                  void *closure_data);
typedef void (*Cosmos__Feegrant__V1beta1__PeriodicAllowance_Closure)
                 (const Cosmos__Feegrant__V1beta1__PeriodicAllowance *message,
                  void *closure_data);
typedef void (*Cosmos__Feegrant__V1beta1__AllowedMsgAllowance_Closure)
                 (const Cosmos__Feegrant__V1beta1__AllowedMsgAllowance *message,
                  void *closure_data);
typedef void (*Cosmos__Feegrant__V1beta1__Grant_Closure)
                 (const Cosmos__Feegrant__V1beta1__Grant *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor cosmos__feegrant__v1beta1__basic_allowance__descriptor;
extern const ProtobufCMessageDescriptor cosmos__feegrant__v1beta1__periodic_allowance__descriptor;
extern const ProtobufCMessageDescriptor cosmos__feegrant__v1beta1__allowed_msg_allowance__descriptor;
extern const ProtobufCMessageDescriptor cosmos__feegrant__v1beta1__grant__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_cosmos_2ffeegrant_2fv1beta1_2ffeegrant_2eproto__INCLUDED */
