/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: cosmos/slashing/v1beta1/slashing.proto */

#ifndef PROTOBUF_C_cosmos_2fslashing_2fv1beta1_2fslashing_2eproto__INCLUDED
#define PROTOBUF_C_cosmos_2fslashing_2fv1beta1_2fslashing_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protobuf-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1005002 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protobuf-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protobuf-c.
#endif

#include "gogoproto/gogo.pb-c.h"
#include "google/protobuf/duration.pb-c.h"
#include "google/protobuf/timestamp.pb-c.h"
#include "cosmos_proto/cosmos.pb-c.h"
#include "amino/amino.pb-c.h"

typedef struct Cosmos__Slashing__V1beta1__ValidatorSigningInfo Cosmos__Slashing__V1beta1__ValidatorSigningInfo;
typedef struct Cosmos__Slashing__V1beta1__Params Cosmos__Slashing__V1beta1__Params;


/* --- enums --- */


/* --- messages --- */

/*
 * ValidatorSigningInfo defines a validator's signing info for monitoring their
 * liveness activity.
 */
struct  Cosmos__Slashing__V1beta1__ValidatorSigningInfo
{
  ProtobufCMessage base;
  char *address;
  /*
   * Height at which validator was first a candidate OR was un-jailed
   */
  int64_t start_height;
  /*
   * Index which is incremented every time a validator is bonded in a block and
   * _may_ have signed a pre-commit or not. This in conjunction with the
   * signed_blocks_window param determines the index in the missed block bitmap.
   */
  int64_t index_offset;
  /*
   * Timestamp until which the validator is jailed due to liveness downtime.
   */
  Google__Protobuf__Timestamp *jailed_until;
  /*
   * Whether or not a validator has been tombstoned (killed out of validator
   * set). It is set once the validator commits an equivocation or for any other
   * configured misbehavior.
   */
  protobuf_c_boolean tombstoned;
  /*
   * A counter of missed (unsigned) blocks. It is used to avoid unnecessary
   * reads in the missed block bitmap.
   */
  int64_t missed_blocks_counter;
};
#define COSMOS__SLASHING__V1BETA1__VALIDATOR_SIGNING_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__slashing__v1beta1__validator_signing_info__descriptor) \
, (char *)protobuf_c_empty_string, 0, 0, NULL, 0, 0 }


/*
 * Params represents the parameters used for by the slashing module.
 */
struct  Cosmos__Slashing__V1beta1__Params
{
  ProtobufCMessage base;
  int64_t signed_blocks_window;
  ProtobufCBinaryData min_signed_per_window;
  Google__Protobuf__Duration *downtime_jail_duration;
  ProtobufCBinaryData slash_fraction_double_sign;
  ProtobufCBinaryData slash_fraction_downtime;
};
#define COSMOS__SLASHING__V1BETA1__PARAMS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__slashing__v1beta1__params__descriptor) \
, 0, {0,NULL}, NULL, {0,NULL}, {0,NULL} }


/* Cosmos__Slashing__V1beta1__ValidatorSigningInfo methods */
void   cosmos__slashing__v1beta1__validator_signing_info__init
                     (Cosmos__Slashing__V1beta1__ValidatorSigningInfo         *message);
size_t cosmos__slashing__v1beta1__validator_signing_info__get_packed_size
                     (const Cosmos__Slashing__V1beta1__ValidatorSigningInfo   *message);
size_t cosmos__slashing__v1beta1__validator_signing_info__pack
                     (const Cosmos__Slashing__V1beta1__ValidatorSigningInfo   *message,
                      uint8_t             *out);
size_t cosmos__slashing__v1beta1__validator_signing_info__pack_to_buffer
                     (const Cosmos__Slashing__V1beta1__ValidatorSigningInfo   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Slashing__V1beta1__ValidatorSigningInfo *
       cosmos__slashing__v1beta1__validator_signing_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__slashing__v1beta1__validator_signing_info__free_unpacked
                     (Cosmos__Slashing__V1beta1__ValidatorSigningInfo *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__Slashing__V1beta1__Params methods */
void   cosmos__slashing__v1beta1__params__init
                     (Cosmos__Slashing__V1beta1__Params         *message);
size_t cosmos__slashing__v1beta1__params__get_packed_size
                     (const Cosmos__Slashing__V1beta1__Params   *message);
size_t cosmos__slashing__v1beta1__params__pack
                     (const Cosmos__Slashing__V1beta1__Params   *message,
                      uint8_t             *out);
size_t cosmos__slashing__v1beta1__params__pack_to_buffer
                     (const Cosmos__Slashing__V1beta1__Params   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Slashing__V1beta1__Params *
       cosmos__slashing__v1beta1__params__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__slashing__v1beta1__params__free_unpacked
                     (Cosmos__Slashing__V1beta1__Params *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Cosmos__Slashing__V1beta1__ValidatorSigningInfo_Closure)
                 (const Cosmos__Slashing__V1beta1__ValidatorSigningInfo *message,
                  void *closure_data);
typedef void (*Cosmos__Slashing__V1beta1__Params_Closure)
                 (const Cosmos__Slashing__V1beta1__Params *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor cosmos__slashing__v1beta1__validator_signing_info__descriptor;
extern const ProtobufCMessageDescriptor cosmos__slashing__v1beta1__params__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_cosmos_2fslashing_2fv1beta1_2fslashing_2eproto__INCLUDED */
