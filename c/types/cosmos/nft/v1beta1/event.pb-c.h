/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: cosmos/nft/v1beta1/event.proto */

#ifndef PROTOBUF_C_cosmos_2fnft_2fv1beta1_2fevent_2eproto__INCLUDED
#define PROTOBUF_C_cosmos_2fnft_2fv1beta1_2fevent_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protobuf-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1005002 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protobuf-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protobuf-c.
#endif


typedef struct Cosmos__Nft__V1beta1__EventSend Cosmos__Nft__V1beta1__EventSend;
typedef struct Cosmos__Nft__V1beta1__EventMint Cosmos__Nft__V1beta1__EventMint;
typedef struct Cosmos__Nft__V1beta1__EventBurn Cosmos__Nft__V1beta1__EventBurn;


/* --- enums --- */


/* --- messages --- */

/*
 * EventSend is emitted on Msg/Send
 */
struct  Cosmos__Nft__V1beta1__EventSend
{
  ProtobufCMessage base;
  /*
   * class_id associated with the nft
   */
  char *class_id;
  /*
   * id is a unique identifier of the nft
   */
  char *id;
  /*
   * sender is the address of the owner of nft
   */
  char *sender;
  /*
   * receiver is the receiver address of nft
   */
  char *receiver;
};
#define COSMOS__NFT__V1BETA1__EVENT_SEND__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__nft__v1beta1__event_send__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


/*
 * EventMint is emitted on Mint
 */
struct  Cosmos__Nft__V1beta1__EventMint
{
  ProtobufCMessage base;
  /*
   * class_id associated with the nft
   */
  char *class_id;
  /*
   * id is a unique identifier of the nft
   */
  char *id;
  /*
   * owner is the owner address of the nft
   */
  char *owner;
};
#define COSMOS__NFT__V1BETA1__EVENT_MINT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__nft__v1beta1__event_mint__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


/*
 * EventBurn is emitted on Burn
 */
struct  Cosmos__Nft__V1beta1__EventBurn
{
  ProtobufCMessage base;
  /*
   * class_id associated with the nft
   */
  char *class_id;
  /*
   * id is a unique identifier of the nft
   */
  char *id;
  /*
   * owner is the owner address of the nft
   */
  char *owner;
};
#define COSMOS__NFT__V1BETA1__EVENT_BURN__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__nft__v1beta1__event_burn__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


/* Cosmos__Nft__V1beta1__EventSend methods */
void   cosmos__nft__v1beta1__event_send__init
                     (Cosmos__Nft__V1beta1__EventSend         *message);
size_t cosmos__nft__v1beta1__event_send__get_packed_size
                     (const Cosmos__Nft__V1beta1__EventSend   *message);
size_t cosmos__nft__v1beta1__event_send__pack
                     (const Cosmos__Nft__V1beta1__EventSend   *message,
                      uint8_t             *out);
size_t cosmos__nft__v1beta1__event_send__pack_to_buffer
                     (const Cosmos__Nft__V1beta1__EventSend   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Nft__V1beta1__EventSend *
       cosmos__nft__v1beta1__event_send__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__nft__v1beta1__event_send__free_unpacked
                     (Cosmos__Nft__V1beta1__EventSend *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__Nft__V1beta1__EventMint methods */
void   cosmos__nft__v1beta1__event_mint__init
                     (Cosmos__Nft__V1beta1__EventMint         *message);
size_t cosmos__nft__v1beta1__event_mint__get_packed_size
                     (const Cosmos__Nft__V1beta1__EventMint   *message);
size_t cosmos__nft__v1beta1__event_mint__pack
                     (const Cosmos__Nft__V1beta1__EventMint   *message,
                      uint8_t             *out);
size_t cosmos__nft__v1beta1__event_mint__pack_to_buffer
                     (const Cosmos__Nft__V1beta1__EventMint   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Nft__V1beta1__EventMint *
       cosmos__nft__v1beta1__event_mint__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__nft__v1beta1__event_mint__free_unpacked
                     (Cosmos__Nft__V1beta1__EventMint *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__Nft__V1beta1__EventBurn methods */
void   cosmos__nft__v1beta1__event_burn__init
                     (Cosmos__Nft__V1beta1__EventBurn         *message);
size_t cosmos__nft__v1beta1__event_burn__get_packed_size
                     (const Cosmos__Nft__V1beta1__EventBurn   *message);
size_t cosmos__nft__v1beta1__event_burn__pack
                     (const Cosmos__Nft__V1beta1__EventBurn   *message,
                      uint8_t             *out);
size_t cosmos__nft__v1beta1__event_burn__pack_to_buffer
                     (const Cosmos__Nft__V1beta1__EventBurn   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Nft__V1beta1__EventBurn *
       cosmos__nft__v1beta1__event_burn__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__nft__v1beta1__event_burn__free_unpacked
                     (Cosmos__Nft__V1beta1__EventBurn *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Cosmos__Nft__V1beta1__EventSend_Closure)
                 (const Cosmos__Nft__V1beta1__EventSend *message,
                  void *closure_data);
typedef void (*Cosmos__Nft__V1beta1__EventMint_Closure)
                 (const Cosmos__Nft__V1beta1__EventMint *message,
                  void *closure_data);
typedef void (*Cosmos__Nft__V1beta1__EventBurn_Closure)
                 (const Cosmos__Nft__V1beta1__EventBurn *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor cosmos__nft__v1beta1__event_send__descriptor;
extern const ProtobufCMessageDescriptor cosmos__nft__v1beta1__event_mint__descriptor;
extern const ProtobufCMessageDescriptor cosmos__nft__v1beta1__event_burn__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_cosmos_2fnft_2fv1beta1_2fevent_2eproto__INCLUDED */
