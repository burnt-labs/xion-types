/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: cosmos/nft/v1beta1/nft.proto */

#ifndef PROTOBUF_C_cosmos_2fnft_2fv1beta1_2fnft_2eproto__INCLUDED
#define PROTOBUF_C_cosmos_2fnft_2fv1beta1_2fnft_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protobuf-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1005002 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protobuf-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protobuf-c.
#endif

#include "google/protobuf/any.pb-c.h"

typedef struct Cosmos__Nft__V1beta1__Class Cosmos__Nft__V1beta1__Class;
typedef struct Cosmos__Nft__V1beta1__NFT Cosmos__Nft__V1beta1__NFT;


/* --- enums --- */


/* --- messages --- */

/*
 * Class defines the class of the nft type.
 */
struct  Cosmos__Nft__V1beta1__Class
{
  ProtobufCMessage base;
  /*
   * id defines the unique identifier of the NFT classification, similar to the contract address of ERC721
   */
  char *id;
  /*
   * name defines the human-readable name of the NFT classification. Optional
   */
  char *name;
  /*
   * symbol is an abbreviated name for nft classification. Optional
   */
  char *symbol;
  /*
   * description is a brief description of nft classification. Optional
   */
  char *description;
  /*
   * uri for the class metadata stored off chain. It can define schema for Class and NFT `Data` attributes. Optional
   */
  char *uri;
  /*
   * uri_hash is a hash of the document pointed by uri. Optional
   */
  char *uri_hash;
  /*
   * data is the app specific metadata of the NFT class. Optional
   */
  Google__Protobuf__Any *data;
};
#define COSMOS__NFT__V1BETA1__CLASS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__nft__v1beta1__class__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, NULL }


/*
 * NFT defines the NFT.
 */
struct  Cosmos__Nft__V1beta1__NFT
{
  ProtobufCMessage base;
  /*
   * class_id associated with the NFT, similar to the contract address of ERC721
   */
  char *class_id;
  /*
   * id is a unique identifier of the NFT
   */
  char *id;
  /*
   * uri for the NFT metadata stored off chain
   */
  char *uri;
  /*
   * uri_hash is a hash of the document pointed by uri
   */
  char *uri_hash;
  /*
   * data is an app specific data of the NFT. Optional
   */
  Google__Protobuf__Any *data;
};
#define COSMOS__NFT__V1BETA1__NFT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__nft__v1beta1__nft__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, NULL }


/* Cosmos__Nft__V1beta1__Class methods */
void   cosmos__nft__v1beta1__class__init
                     (Cosmos__Nft__V1beta1__Class         *message);
size_t cosmos__nft__v1beta1__class__get_packed_size
                     (const Cosmos__Nft__V1beta1__Class   *message);
size_t cosmos__nft__v1beta1__class__pack
                     (const Cosmos__Nft__V1beta1__Class   *message,
                      uint8_t             *out);
size_t cosmos__nft__v1beta1__class__pack_to_buffer
                     (const Cosmos__Nft__V1beta1__Class   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Nft__V1beta1__Class *
       cosmos__nft__v1beta1__class__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__nft__v1beta1__class__free_unpacked
                     (Cosmos__Nft__V1beta1__Class *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__Nft__V1beta1__NFT methods */
void   cosmos__nft__v1beta1__nft__init
                     (Cosmos__Nft__V1beta1__NFT         *message);
size_t cosmos__nft__v1beta1__nft__get_packed_size
                     (const Cosmos__Nft__V1beta1__NFT   *message);
size_t cosmos__nft__v1beta1__nft__pack
                     (const Cosmos__Nft__V1beta1__NFT   *message,
                      uint8_t             *out);
size_t cosmos__nft__v1beta1__nft__pack_to_buffer
                     (const Cosmos__Nft__V1beta1__NFT   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Nft__V1beta1__NFT *
       cosmos__nft__v1beta1__nft__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__nft__v1beta1__nft__free_unpacked
                     (Cosmos__Nft__V1beta1__NFT *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Cosmos__Nft__V1beta1__Class_Closure)
                 (const Cosmos__Nft__V1beta1__Class *message,
                  void *closure_data);
typedef void (*Cosmos__Nft__V1beta1__NFT_Closure)
                 (const Cosmos__Nft__V1beta1__NFT *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor cosmos__nft__v1beta1__class__descriptor;
extern const ProtobufCMessageDescriptor cosmos__nft__v1beta1__nft__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_cosmos_2fnft_2fv1beta1_2fnft_2eproto__INCLUDED */
