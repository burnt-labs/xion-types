/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: cosmos/evidence/v1beta1/query.proto */

#ifndef PROTOBUF_C_cosmos_2fevidence_2fv1beta1_2fquery_2eproto__INCLUDED
#define PROTOBUF_C_cosmos_2fevidence_2fv1beta1_2fquery_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protobuf-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1005002 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protobuf-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protobuf-c.
#endif

#include "cosmos/base/query/v1beta1/pagination.pb-c.h"
#include "google/protobuf/any.pb-c.h"
#include "google/api/annotations.pb-c.h"
#include "cosmos_proto/cosmos.pb-c.h"

typedef struct Cosmos__Evidence__V1beta1__QueryEvidenceRequest Cosmos__Evidence__V1beta1__QueryEvidenceRequest;
typedef struct Cosmos__Evidence__V1beta1__QueryEvidenceResponse Cosmos__Evidence__V1beta1__QueryEvidenceResponse;
typedef struct Cosmos__Evidence__V1beta1__QueryAllEvidenceRequest Cosmos__Evidence__V1beta1__QueryAllEvidenceRequest;
typedef struct Cosmos__Evidence__V1beta1__QueryAllEvidenceResponse Cosmos__Evidence__V1beta1__QueryAllEvidenceResponse;


/* --- enums --- */


/* --- messages --- */

/*
 * QueryEvidenceRequest is the request type for the Query/Evidence RPC method.
 */
struct  Cosmos__Evidence__V1beta1__QueryEvidenceRequest
{
  ProtobufCMessage base;
  /*
   * evidence_hash defines the hash of the requested evidence.
   * Deprecated: Use hash, a HEX encoded string, instead.
   */
  ProtobufCBinaryData evidence_hash PROTOBUF_C__DEPRECATED;
  /*
   * hash defines the evidence hash of the requested evidence.
   */
  char *hash;
};
#define COSMOS__EVIDENCE__V1BETA1__QUERY_EVIDENCE_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__evidence__v1beta1__query_evidence_request__descriptor) \
, {0,NULL}, (char *)protobuf_c_empty_string }


/*
 * QueryEvidenceResponse is the response type for the Query/Evidence RPC method.
 */
struct  Cosmos__Evidence__V1beta1__QueryEvidenceResponse
{
  ProtobufCMessage base;
  /*
   * evidence returns the requested evidence.
   */
  Google__Protobuf__Any *evidence;
};
#define COSMOS__EVIDENCE__V1BETA1__QUERY_EVIDENCE_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__evidence__v1beta1__query_evidence_response__descriptor) \
, NULL }


/*
 * QueryEvidenceRequest is the request type for the Query/AllEvidence RPC
 * method.
 */
struct  Cosmos__Evidence__V1beta1__QueryAllEvidenceRequest
{
  ProtobufCMessage base;
  /*
   * pagination defines an optional pagination for the request.
   */
  Cosmos__Base__Query__V1beta1__PageRequest *pagination;
};
#define COSMOS__EVIDENCE__V1BETA1__QUERY_ALL_EVIDENCE_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__evidence__v1beta1__query_all_evidence_request__descriptor) \
, NULL }


/*
 * QueryAllEvidenceResponse is the response type for the Query/AllEvidence RPC
 * method.
 */
struct  Cosmos__Evidence__V1beta1__QueryAllEvidenceResponse
{
  ProtobufCMessage base;
  /*
   * evidence returns all evidences.
   */
  size_t n_evidence;
  Google__Protobuf__Any **evidence;
  /*
   * pagination defines the pagination in the response.
   */
  Cosmos__Base__Query__V1beta1__PageResponse *pagination;
};
#define COSMOS__EVIDENCE__V1BETA1__QUERY_ALL_EVIDENCE_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__evidence__v1beta1__query_all_evidence_response__descriptor) \
, 0,NULL, NULL }


/* Cosmos__Evidence__V1beta1__QueryEvidenceRequest methods */
void   cosmos__evidence__v1beta1__query_evidence_request__init
                     (Cosmos__Evidence__V1beta1__QueryEvidenceRequest         *message);
size_t cosmos__evidence__v1beta1__query_evidence_request__get_packed_size
                     (const Cosmos__Evidence__V1beta1__QueryEvidenceRequest   *message);
size_t cosmos__evidence__v1beta1__query_evidence_request__pack
                     (const Cosmos__Evidence__V1beta1__QueryEvidenceRequest   *message,
                      uint8_t             *out);
size_t cosmos__evidence__v1beta1__query_evidence_request__pack_to_buffer
                     (const Cosmos__Evidence__V1beta1__QueryEvidenceRequest   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Evidence__V1beta1__QueryEvidenceRequest *
       cosmos__evidence__v1beta1__query_evidence_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__evidence__v1beta1__query_evidence_request__free_unpacked
                     (Cosmos__Evidence__V1beta1__QueryEvidenceRequest *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__Evidence__V1beta1__QueryEvidenceResponse methods */
void   cosmos__evidence__v1beta1__query_evidence_response__init
                     (Cosmos__Evidence__V1beta1__QueryEvidenceResponse         *message);
size_t cosmos__evidence__v1beta1__query_evidence_response__get_packed_size
                     (const Cosmos__Evidence__V1beta1__QueryEvidenceResponse   *message);
size_t cosmos__evidence__v1beta1__query_evidence_response__pack
                     (const Cosmos__Evidence__V1beta1__QueryEvidenceResponse   *message,
                      uint8_t             *out);
size_t cosmos__evidence__v1beta1__query_evidence_response__pack_to_buffer
                     (const Cosmos__Evidence__V1beta1__QueryEvidenceResponse   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Evidence__V1beta1__QueryEvidenceResponse *
       cosmos__evidence__v1beta1__query_evidence_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__evidence__v1beta1__query_evidence_response__free_unpacked
                     (Cosmos__Evidence__V1beta1__QueryEvidenceResponse *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__Evidence__V1beta1__QueryAllEvidenceRequest methods */
void   cosmos__evidence__v1beta1__query_all_evidence_request__init
                     (Cosmos__Evidence__V1beta1__QueryAllEvidenceRequest         *message);
size_t cosmos__evidence__v1beta1__query_all_evidence_request__get_packed_size
                     (const Cosmos__Evidence__V1beta1__QueryAllEvidenceRequest   *message);
size_t cosmos__evidence__v1beta1__query_all_evidence_request__pack
                     (const Cosmos__Evidence__V1beta1__QueryAllEvidenceRequest   *message,
                      uint8_t             *out);
size_t cosmos__evidence__v1beta1__query_all_evidence_request__pack_to_buffer
                     (const Cosmos__Evidence__V1beta1__QueryAllEvidenceRequest   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Evidence__V1beta1__QueryAllEvidenceRequest *
       cosmos__evidence__v1beta1__query_all_evidence_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__evidence__v1beta1__query_all_evidence_request__free_unpacked
                     (Cosmos__Evidence__V1beta1__QueryAllEvidenceRequest *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__Evidence__V1beta1__QueryAllEvidenceResponse methods */
void   cosmos__evidence__v1beta1__query_all_evidence_response__init
                     (Cosmos__Evidence__V1beta1__QueryAllEvidenceResponse         *message);
size_t cosmos__evidence__v1beta1__query_all_evidence_response__get_packed_size
                     (const Cosmos__Evidence__V1beta1__QueryAllEvidenceResponse   *message);
size_t cosmos__evidence__v1beta1__query_all_evidence_response__pack
                     (const Cosmos__Evidence__V1beta1__QueryAllEvidenceResponse   *message,
                      uint8_t             *out);
size_t cosmos__evidence__v1beta1__query_all_evidence_response__pack_to_buffer
                     (const Cosmos__Evidence__V1beta1__QueryAllEvidenceResponse   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Evidence__V1beta1__QueryAllEvidenceResponse *
       cosmos__evidence__v1beta1__query_all_evidence_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__evidence__v1beta1__query_all_evidence_response__free_unpacked
                     (Cosmos__Evidence__V1beta1__QueryAllEvidenceResponse *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Cosmos__Evidence__V1beta1__QueryEvidenceRequest_Closure)
                 (const Cosmos__Evidence__V1beta1__QueryEvidenceRequest *message,
                  void *closure_data);
typedef void (*Cosmos__Evidence__V1beta1__QueryEvidenceResponse_Closure)
                 (const Cosmos__Evidence__V1beta1__QueryEvidenceResponse *message,
                  void *closure_data);
typedef void (*Cosmos__Evidence__V1beta1__QueryAllEvidenceRequest_Closure)
                 (const Cosmos__Evidence__V1beta1__QueryAllEvidenceRequest *message,
                  void *closure_data);
typedef void (*Cosmos__Evidence__V1beta1__QueryAllEvidenceResponse_Closure)
                 (const Cosmos__Evidence__V1beta1__QueryAllEvidenceResponse *message,
                  void *closure_data);

/* --- services --- */

typedef struct Cosmos__Evidence__V1beta1__Query_Service Cosmos__Evidence__V1beta1__Query_Service;
struct Cosmos__Evidence__V1beta1__Query_Service
{
  ProtobufCService base;
  void (*evidence)(Cosmos__Evidence__V1beta1__Query_Service *service,
                   const Cosmos__Evidence__V1beta1__QueryEvidenceRequest *input,
                   Cosmos__Evidence__V1beta1__QueryEvidenceResponse_Closure closure,
                   void *closure_data);
  void (*all_evidence)(Cosmos__Evidence__V1beta1__Query_Service *service,
                       const Cosmos__Evidence__V1beta1__QueryAllEvidenceRequest *input,
                       Cosmos__Evidence__V1beta1__QueryAllEvidenceResponse_Closure closure,
                       void *closure_data);
};
typedef void (*Cosmos__Evidence__V1beta1__Query_ServiceDestroy)(Cosmos__Evidence__V1beta1__Query_Service *);
void cosmos__evidence__v1beta1__query__init (Cosmos__Evidence__V1beta1__Query_Service *service,
                                             Cosmos__Evidence__V1beta1__Query_ServiceDestroy destroy);
#define COSMOS__EVIDENCE__V1BETA1__QUERY__BASE_INIT \
    { &cosmos__evidence__v1beta1__query__descriptor, protobuf_c_service_invoke_internal, NULL }
#define COSMOS__EVIDENCE__V1BETA1__QUERY__INIT(function_prefix__) \
    { COSMOS__EVIDENCE__V1BETA1__QUERY__BASE_INIT,\
      function_prefix__ ## evidence,\
      function_prefix__ ## all_evidence  }
void cosmos__evidence__v1beta1__query__evidence(ProtobufCService *service,
                                                const Cosmos__Evidence__V1beta1__QueryEvidenceRequest *input,
                                                Cosmos__Evidence__V1beta1__QueryEvidenceResponse_Closure closure,
                                                void *closure_data);
void cosmos__evidence__v1beta1__query__all_evidence(ProtobufCService *service,
                                                    const Cosmos__Evidence__V1beta1__QueryAllEvidenceRequest *input,
                                                    Cosmos__Evidence__V1beta1__QueryAllEvidenceResponse_Closure closure,
                                                    void *closure_data);

/* --- descriptors --- */

extern const ProtobufCMessageDescriptor cosmos__evidence__v1beta1__query_evidence_request__descriptor;
extern const ProtobufCMessageDescriptor cosmos__evidence__v1beta1__query_evidence_response__descriptor;
extern const ProtobufCMessageDescriptor cosmos__evidence__v1beta1__query_all_evidence_request__descriptor;
extern const ProtobufCMessageDescriptor cosmos__evidence__v1beta1__query_all_evidence_response__descriptor;
extern const ProtobufCServiceDescriptor cosmos__evidence__v1beta1__query__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_cosmos_2fevidence_2fv1beta1_2fquery_2eproto__INCLUDED */
