/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: cosmos/evidence/v1beta1/tx.proto */

#ifndef PROTOBUF_C_cosmos_2fevidence_2fv1beta1_2ftx_2eproto__INCLUDED
#define PROTOBUF_C_cosmos_2fevidence_2fv1beta1_2ftx_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protobuf-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1005002 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protobuf-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protobuf-c.
#endif

#include "gogoproto/gogo.pb-c.h"
#include "google/protobuf/any.pb-c.h"
#include "cosmos_proto/cosmos.pb-c.h"
#include "cosmos/msg/v1/msg.pb-c.h"
#include "amino/amino.pb-c.h"

typedef struct Cosmos__Evidence__V1beta1__MsgSubmitEvidence Cosmos__Evidence__V1beta1__MsgSubmitEvidence;
typedef struct Cosmos__Evidence__V1beta1__MsgSubmitEvidenceResponse Cosmos__Evidence__V1beta1__MsgSubmitEvidenceResponse;


/* --- enums --- */


/* --- messages --- */

/*
 * MsgSubmitEvidence represents a message that supports submitting arbitrary
 * Evidence of misbehavior such as equivocation or counterfactual signing.
 */
struct  Cosmos__Evidence__V1beta1__MsgSubmitEvidence
{
  ProtobufCMessage base;
  /*
   * submitter is the signer account address of evidence.
   */
  char *submitter;
  /*
   * evidence defines the evidence of misbehavior.
   */
  Google__Protobuf__Any *evidence;
};
#define COSMOS__EVIDENCE__V1BETA1__MSG_SUBMIT_EVIDENCE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__evidence__v1beta1__msg_submit_evidence__descriptor) \
, (char *)protobuf_c_empty_string, NULL }


/*
 * MsgSubmitEvidenceResponse defines the Msg/SubmitEvidence response type.
 */
struct  Cosmos__Evidence__V1beta1__MsgSubmitEvidenceResponse
{
  ProtobufCMessage base;
  /*
   * hash defines the hash of the evidence.
   */
  ProtobufCBinaryData hash;
};
#define COSMOS__EVIDENCE__V1BETA1__MSG_SUBMIT_EVIDENCE_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__evidence__v1beta1__msg_submit_evidence_response__descriptor) \
, {0,NULL} }


/* Cosmos__Evidence__V1beta1__MsgSubmitEvidence methods */
void   cosmos__evidence__v1beta1__msg_submit_evidence__init
                     (Cosmos__Evidence__V1beta1__MsgSubmitEvidence         *message);
size_t cosmos__evidence__v1beta1__msg_submit_evidence__get_packed_size
                     (const Cosmos__Evidence__V1beta1__MsgSubmitEvidence   *message);
size_t cosmos__evidence__v1beta1__msg_submit_evidence__pack
                     (const Cosmos__Evidence__V1beta1__MsgSubmitEvidence   *message,
                      uint8_t             *out);
size_t cosmos__evidence__v1beta1__msg_submit_evidence__pack_to_buffer
                     (const Cosmos__Evidence__V1beta1__MsgSubmitEvidence   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Evidence__V1beta1__MsgSubmitEvidence *
       cosmos__evidence__v1beta1__msg_submit_evidence__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__evidence__v1beta1__msg_submit_evidence__free_unpacked
                     (Cosmos__Evidence__V1beta1__MsgSubmitEvidence *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__Evidence__V1beta1__MsgSubmitEvidenceResponse methods */
void   cosmos__evidence__v1beta1__msg_submit_evidence_response__init
                     (Cosmos__Evidence__V1beta1__MsgSubmitEvidenceResponse         *message);
size_t cosmos__evidence__v1beta1__msg_submit_evidence_response__get_packed_size
                     (const Cosmos__Evidence__V1beta1__MsgSubmitEvidenceResponse   *message);
size_t cosmos__evidence__v1beta1__msg_submit_evidence_response__pack
                     (const Cosmos__Evidence__V1beta1__MsgSubmitEvidenceResponse   *message,
                      uint8_t             *out);
size_t cosmos__evidence__v1beta1__msg_submit_evidence_response__pack_to_buffer
                     (const Cosmos__Evidence__V1beta1__MsgSubmitEvidenceResponse   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Evidence__V1beta1__MsgSubmitEvidenceResponse *
       cosmos__evidence__v1beta1__msg_submit_evidence_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__evidence__v1beta1__msg_submit_evidence_response__free_unpacked
                     (Cosmos__Evidence__V1beta1__MsgSubmitEvidenceResponse *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Cosmos__Evidence__V1beta1__MsgSubmitEvidence_Closure)
                 (const Cosmos__Evidence__V1beta1__MsgSubmitEvidence *message,
                  void *closure_data);
typedef void (*Cosmos__Evidence__V1beta1__MsgSubmitEvidenceResponse_Closure)
                 (const Cosmos__Evidence__V1beta1__MsgSubmitEvidenceResponse *message,
                  void *closure_data);

/* --- services --- */

typedef struct Cosmos__Evidence__V1beta1__Msg_Service Cosmos__Evidence__V1beta1__Msg_Service;
struct Cosmos__Evidence__V1beta1__Msg_Service
{
  ProtobufCService base;
  void (*submit_evidence)(Cosmos__Evidence__V1beta1__Msg_Service *service,
                          const Cosmos__Evidence__V1beta1__MsgSubmitEvidence *input,
                          Cosmos__Evidence__V1beta1__MsgSubmitEvidenceResponse_Closure closure,
                          void *closure_data);
};
typedef void (*Cosmos__Evidence__V1beta1__Msg_ServiceDestroy)(Cosmos__Evidence__V1beta1__Msg_Service *);
void cosmos__evidence__v1beta1__msg__init (Cosmos__Evidence__V1beta1__Msg_Service *service,
                                           Cosmos__Evidence__V1beta1__Msg_ServiceDestroy destroy);
#define COSMOS__EVIDENCE__V1BETA1__MSG__BASE_INIT \
    { &cosmos__evidence__v1beta1__msg__descriptor, protobuf_c_service_invoke_internal, NULL }
#define COSMOS__EVIDENCE__V1BETA1__MSG__INIT(function_prefix__) \
    { COSMOS__EVIDENCE__V1BETA1__MSG__BASE_INIT,\
      function_prefix__ ## submit_evidence  }
void cosmos__evidence__v1beta1__msg__submit_evidence(ProtobufCService *service,
                                                     const Cosmos__Evidence__V1beta1__MsgSubmitEvidence *input,
                                                     Cosmos__Evidence__V1beta1__MsgSubmitEvidenceResponse_Closure closure,
                                                     void *closure_data);

/* --- descriptors --- */

extern const ProtobufCMessageDescriptor cosmos__evidence__v1beta1__msg_submit_evidence__descriptor;
extern const ProtobufCMessageDescriptor cosmos__evidence__v1beta1__msg_submit_evidence_response__descriptor;
extern const ProtobufCServiceDescriptor cosmos__evidence__v1beta1__msg__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_cosmos_2fevidence_2fv1beta1_2ftx_2eproto__INCLUDED */
