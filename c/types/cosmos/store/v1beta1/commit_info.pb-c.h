/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: cosmos/store/v1beta1/commit_info.proto */

#ifndef PROTOBUF_C_cosmos_2fstore_2fv1beta1_2fcommit_5finfo_2eproto__INCLUDED
#define PROTOBUF_C_cosmos_2fstore_2fv1beta1_2fcommit_5finfo_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protobuf-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1005002 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protobuf-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protobuf-c.
#endif

#include "gogoproto/gogo.pb-c.h"
#include "google/protobuf/timestamp.pb-c.h"

typedef struct Cosmos__Store__V1beta1__CommitInfo Cosmos__Store__V1beta1__CommitInfo;
typedef struct Cosmos__Store__V1beta1__StoreInfo Cosmos__Store__V1beta1__StoreInfo;
typedef struct Cosmos__Store__V1beta1__CommitID Cosmos__Store__V1beta1__CommitID;


/* --- enums --- */


/* --- messages --- */

/*
 * CommitInfo defines commit information used by the multi-store when committing
 * a version/height.
 */
struct  Cosmos__Store__V1beta1__CommitInfo
{
  ProtobufCMessage base;
  int64_t version;
  size_t n_store_infos;
  Cosmos__Store__V1beta1__StoreInfo **store_infos;
  Google__Protobuf__Timestamp *timestamp;
};
#define COSMOS__STORE__V1BETA1__COMMIT_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__store__v1beta1__commit_info__descriptor) \
, 0, 0,NULL, NULL }


/*
 * StoreInfo defines store-specific commit information. It contains a reference
 * between a store name and the commit ID.
 */
struct  Cosmos__Store__V1beta1__StoreInfo
{
  ProtobufCMessage base;
  char *name;
  Cosmos__Store__V1beta1__CommitID *commit_id;
};
#define COSMOS__STORE__V1BETA1__STORE_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__store__v1beta1__store_info__descriptor) \
, (char *)protobuf_c_empty_string, NULL }


/*
 * CommitID defines the commitment information when a specific store is
 * committed.
 */
struct  Cosmos__Store__V1beta1__CommitID
{
  ProtobufCMessage base;
  int64_t version;
  ProtobufCBinaryData hash;
};
#define COSMOS__STORE__V1BETA1__COMMIT_ID__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__store__v1beta1__commit_id__descriptor) \
, 0, {0,NULL} }


/* Cosmos__Store__V1beta1__CommitInfo methods */
void   cosmos__store__v1beta1__commit_info__init
                     (Cosmos__Store__V1beta1__CommitInfo         *message);
size_t cosmos__store__v1beta1__commit_info__get_packed_size
                     (const Cosmos__Store__V1beta1__CommitInfo   *message);
size_t cosmos__store__v1beta1__commit_info__pack
                     (const Cosmos__Store__V1beta1__CommitInfo   *message,
                      uint8_t             *out);
size_t cosmos__store__v1beta1__commit_info__pack_to_buffer
                     (const Cosmos__Store__V1beta1__CommitInfo   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Store__V1beta1__CommitInfo *
       cosmos__store__v1beta1__commit_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__store__v1beta1__commit_info__free_unpacked
                     (Cosmos__Store__V1beta1__CommitInfo *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__Store__V1beta1__StoreInfo methods */
void   cosmos__store__v1beta1__store_info__init
                     (Cosmos__Store__V1beta1__StoreInfo         *message);
size_t cosmos__store__v1beta1__store_info__get_packed_size
                     (const Cosmos__Store__V1beta1__StoreInfo   *message);
size_t cosmos__store__v1beta1__store_info__pack
                     (const Cosmos__Store__V1beta1__StoreInfo   *message,
                      uint8_t             *out);
size_t cosmos__store__v1beta1__store_info__pack_to_buffer
                     (const Cosmos__Store__V1beta1__StoreInfo   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Store__V1beta1__StoreInfo *
       cosmos__store__v1beta1__store_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__store__v1beta1__store_info__free_unpacked
                     (Cosmos__Store__V1beta1__StoreInfo *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__Store__V1beta1__CommitID methods */
void   cosmos__store__v1beta1__commit_id__init
                     (Cosmos__Store__V1beta1__CommitID         *message);
size_t cosmos__store__v1beta1__commit_id__get_packed_size
                     (const Cosmos__Store__V1beta1__CommitID   *message);
size_t cosmos__store__v1beta1__commit_id__pack
                     (const Cosmos__Store__V1beta1__CommitID   *message,
                      uint8_t             *out);
size_t cosmos__store__v1beta1__commit_id__pack_to_buffer
                     (const Cosmos__Store__V1beta1__CommitID   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Store__V1beta1__CommitID *
       cosmos__store__v1beta1__commit_id__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__store__v1beta1__commit_id__free_unpacked
                     (Cosmos__Store__V1beta1__CommitID *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Cosmos__Store__V1beta1__CommitInfo_Closure)
                 (const Cosmos__Store__V1beta1__CommitInfo *message,
                  void *closure_data);
typedef void (*Cosmos__Store__V1beta1__StoreInfo_Closure)
                 (const Cosmos__Store__V1beta1__StoreInfo *message,
                  void *closure_data);
typedef void (*Cosmos__Store__V1beta1__CommitID_Closure)
                 (const Cosmos__Store__V1beta1__CommitID *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor cosmos__store__v1beta1__commit_info__descriptor;
extern const ProtobufCMessageDescriptor cosmos__store__v1beta1__store_info__descriptor;
extern const ProtobufCMessageDescriptor cosmos__store__v1beta1__commit_id__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_cosmos_2fstore_2fv1beta1_2fcommit_5finfo_2eproto__INCLUDED */
