/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: xion/feeabs/v1beta1/epoch.proto */

#ifndef PROTOBUF_C_xion_2ffeeabs_2fv1beta1_2fepoch_2eproto__INCLUDED
#define PROTOBUF_C_xion_2ffeeabs_2fv1beta1_2fepoch_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protobuf-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1005002 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protobuf-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protobuf-c.
#endif

#include "gogoproto/gogo.pb-c.h"
#include "google/protobuf/duration.pb-c.h"
#include "google/protobuf/timestamp.pb-c.h"

typedef struct Xion__Feeabs__V1beta1__EpochInfo Xion__Feeabs__V1beta1__EpochInfo;
typedef struct Xion__Feeabs__V1beta1__ExponentialBackoff Xion__Feeabs__V1beta1__ExponentialBackoff;


/* --- enums --- */


/* --- messages --- */

/*
 * EpochInfo defines information of a epoch
 */
struct  Xion__Feeabs__V1beta1__EpochInfo
{
  ProtobufCMessage base;
  /*
   * identifier is a unique reference to this particular timer.
   */
  char *identifier;
  /*
   * start_time is the time at which the timer first ever ticks.
   * If start_time is in the future, the epoch will not begin until the start
   * time.
   */
  Google__Protobuf__Timestamp *start_time;
  /*
   * duration is the time in between epoch ticks.
   * In order for intended behavior to be met, duration should
   * be greater than the chains expected block time.
   * Duration must be non-zero.
   */
  Google__Protobuf__Duration *duration;
  /*
   * current_epoch is the current epoch number, or in other words,
   * how many times has the timer 'ticked'.
   * The first tick (current_epoch=1) is defined as
   * the first block whose blocktime is greater than the EpochInfo start_time.
   */
  int64_t current_epoch;
  /*
   * current_epoch_start_time describes the start time of the current timer
   * interval. The interval is (current_epoch_start_time,
   * current_epoch_start_time + duration] When the timer ticks, this is set to
   * current_epoch_start_time = last_epoch_start_time + duration only one timer
   * tick for a given identifier can occur per block.
   * NOTE! The current_epoch_start_time may diverge significantly from the
   * wall-clock time the epoch began at. Wall-clock time of epoch start may be
   * >> current_epoch_start_time. Suppose current_epoch_start_time = 10,
   * duration = 5. Suppose the chain goes offline at t=14, and comes back online
   * at t=30, and produces blocks at every successive time. (t=31, 32, etc.)
   * * The t=30 block will start the epoch for (10, 15]
   * * The t=31 block will start the epoch for (15, 20]
   * * The t=32 block will start the epoch for (20, 25]
   * * The t=33 block will start the epoch for (25, 30]
   * * The t=34 block will start the epoch for (30, 35]
   * * The **t=36** block will start the epoch for (35, 40]
   */
  Google__Protobuf__Timestamp *current_epoch_start_time;
  /*
   * epoch_counting_started is a boolean, that indicates whether this
   * epoch timer has began yet.
   */
  protobuf_c_boolean epoch_counting_started;
  /*
   * current_epoch_start_height is the block height at which the current epoch
   * started. (The block height at which the timer last ticked)
   */
  int64_t current_epoch_start_height;
};
#define XION__FEEABS__V1BETA1__EPOCH_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&xion__feeabs__v1beta1__epoch_info__descriptor) \
, (char *)protobuf_c_empty_string, NULL, NULL, 0, NULL, 0, 0 }


/*
 * ExponentialBackoff defines backoff epoch
 */
struct  Xion__Feeabs__V1beta1__ExponentialBackoff
{
  ProtobufCMessage base;
  int64_t jump;
  int64_t future_epoch;
};
#define XION__FEEABS__V1BETA1__EXPONENTIAL_BACKOFF__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&xion__feeabs__v1beta1__exponential_backoff__descriptor) \
, 0, 0 }


/* Xion__Feeabs__V1beta1__EpochInfo methods */
void   xion__feeabs__v1beta1__epoch_info__init
                     (Xion__Feeabs__V1beta1__EpochInfo         *message);
size_t xion__feeabs__v1beta1__epoch_info__get_packed_size
                     (const Xion__Feeabs__V1beta1__EpochInfo   *message);
size_t xion__feeabs__v1beta1__epoch_info__pack
                     (const Xion__Feeabs__V1beta1__EpochInfo   *message,
                      uint8_t             *out);
size_t xion__feeabs__v1beta1__epoch_info__pack_to_buffer
                     (const Xion__Feeabs__V1beta1__EpochInfo   *message,
                      ProtobufCBuffer     *buffer);
Xion__Feeabs__V1beta1__EpochInfo *
       xion__feeabs__v1beta1__epoch_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   xion__feeabs__v1beta1__epoch_info__free_unpacked
                     (Xion__Feeabs__V1beta1__EpochInfo *message,
                      ProtobufCAllocator *allocator);
/* Xion__Feeabs__V1beta1__ExponentialBackoff methods */
void   xion__feeabs__v1beta1__exponential_backoff__init
                     (Xion__Feeabs__V1beta1__ExponentialBackoff         *message);
size_t xion__feeabs__v1beta1__exponential_backoff__get_packed_size
                     (const Xion__Feeabs__V1beta1__ExponentialBackoff   *message);
size_t xion__feeabs__v1beta1__exponential_backoff__pack
                     (const Xion__Feeabs__V1beta1__ExponentialBackoff   *message,
                      uint8_t             *out);
size_t xion__feeabs__v1beta1__exponential_backoff__pack_to_buffer
                     (const Xion__Feeabs__V1beta1__ExponentialBackoff   *message,
                      ProtobufCBuffer     *buffer);
Xion__Feeabs__V1beta1__ExponentialBackoff *
       xion__feeabs__v1beta1__exponential_backoff__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   xion__feeabs__v1beta1__exponential_backoff__free_unpacked
                     (Xion__Feeabs__V1beta1__ExponentialBackoff *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Xion__Feeabs__V1beta1__EpochInfo_Closure)
                 (const Xion__Feeabs__V1beta1__EpochInfo *message,
                  void *closure_data);
typedef void (*Xion__Feeabs__V1beta1__ExponentialBackoff_Closure)
                 (const Xion__Feeabs__V1beta1__ExponentialBackoff *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor xion__feeabs__v1beta1__epoch_info__descriptor;
extern const ProtobufCMessageDescriptor xion__feeabs__v1beta1__exponential_backoff__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_xion_2ffeeabs_2fv1beta1_2fepoch_2eproto__INCLUDED */
